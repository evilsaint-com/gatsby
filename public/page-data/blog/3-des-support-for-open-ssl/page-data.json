{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/3-des-support-for-open-ssl/","result":{"pageContext":{"post":{"fields":{"slug":"/3-des-support-for-open-ssl"},"excerpt":"git clone https://github.com/drwetter/testssl.sh/ /opt cd /opt/testssl.sh/bin\ncp openssl.Linux.x86_64 /usr/bin/\necho \"export OPENSSL_CONF…","frontmatter":{"date":"17th August 2021 ","title":"3DES Support For OpenSSL","description":"","tags":"ssl, tls","posttype":"blog"},"body":"\n```\ngit clone https://github.com/drwetter/testssl.sh/ /opt\ncd /opt/testssl.sh/bin\ncp openssl.Linux.x86_64 /usr/bin/\necho \"export OPENSSL_CONF=/etc/ssl/\" >> ~/.bashrc\nbash\ncd ~/\nopenssl.Linux.x86_64 s_client -connect x.x.x.x:443 -cipher 3DES -tls1\n```"},"prev":{"fields":{"slug":"/hashcat-now-offers-auto-detection"},"excerpt":null,"frontmatter":{"date":"2nd October 2021 ","title":"Hashcat Now Offers Auto Detection","description":"The latest edition of Hashcat now has an auto-detect mode built-in. If you pass a hashes file to Hashcat with no additional options, it will try to detect the hash types. It is a new feature, and so you will need a recent copy of Hashcat to utilise this feature.","tags":"hashcat","posttype":"blog"},"body":"I just learnt this from a colleague at work and felt it was worth a share. Hashcat now has auto-detect functionality. Run your Hashcat binary and pass only the hash file, and Hashcat will try and work out the hash types included in the file and give you the mode you need to crack them. \n\n```\nhashcat <hash file>\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/394dc713-e2a6-40da-98fa-da8f02387e65.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIn the above example, I am using Hashcat version 6.2.4; however, I have been informed that the auto-detect feature was added in Hashcat 6.2.2. \n\nIn the screen capture below, we can see the detected hash types in my file. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/b8ae95f9-fea9-4c82-ad56-1fafef2e84ef.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nThe orange text indicates that this is a best-effort detection; however, it is correct in my case. The file contains five NTLM hashes."},"next":{"fields":{"slug":"/error-importing-to-notion"},"excerpt":"consultant@DESKTOP-CFSRHKG MINGW64 ~/Desktop/bkup/finish $ file Access\\ Tokens-1.md Access Tokens-1.md: Unicode text, UTF-16, little-endian…","frontmatter":{"date":"13th August 2021 ","title":"Error Importing To Notion","description":"productivity","tags":"productivity","posttype":"blog"},"body":"\nconsultant@DESKTOP-CFSRHKG MINGW64 ~/Desktop/bkup/finish\n$ file Access\\ Tokens-1.md\nAccess Tokens-1.md: Unicode text, UTF-16, little-endian text, with CRLF line terminators\n\nconsultant@DESKTOP-CFSRHKG MINGW64 ~/Desktop/bkup/finish\n$ unix2dos.exe Access\\ Tokens-1.md\nunix2dos: converting UTF-16LE file Access Tokens-1.md to UTF-8 DOS format...\n\nconsultant@DESKTOP-CFSRHKG MINGW64 ~/Desktop/bkup/finish\n$ file Access\\ Tokens-1.md\nAccess Tokens-1.md: Unicode text, UTF-8 (with BOM) text, with CRLF line terminators"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}