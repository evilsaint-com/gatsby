{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/i-must-learn-to-check-status-docker-com/","result":{"pageContext":{"post":{"fields":{"slug":"/i-must-learn-to-check-status-docker-com"},"excerpt":null,"frontmatter":{"date":"14th April 2021 ","title":"I must learn to check status.docker.com","description":"","tags":"docker","posttype":"blog"},"body":"\n<h1>Lesson Learnt</h1>\n\nAfter a night of complaining to myself about the poor performance of `Docker pull` on a VPS I have hosted in Asia, I just stumbled onto the \n\n[https://status.docker.com/](https://status.docker.com/https://status.docker.com/pages/history/533c6539221ae15e3f000031) website. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/29cc5fe3-48a6-443a-9e9e-fe96fcb2072c.png\" class=\"img-fluid\" alt=\"Current system status of Docker where you can view active incidents or upcoming maintenances.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Current system status of Docker where you can view active incidents or upcoming maintenances.</figcaption>\n</figure>"},"prev":{"fields":{"slug":"/docker-down-again"},"excerpt":null,"frontmatter":{"date":"15th April 2021 ","title":"Docker Down Again","description":"","tags":"docker","posttype":"blog"},"body":"Well, I learnt my lesson from the other day. Seeing as I use Docker quite a bit I was surprised, to say the least, that I couldn't even pull a few basic packages down until I remembered to check on my old friend <a href=\"https://status.docker.com/\" target=\"_blank\" class=\"external\" title=\"External Link to docker.com\" rel=”nofollow”>https://status.docker.com/</a>\n\nI mean what was \"Error response from daemon: received unexpected HTTP status: 503 Service Unavailable\" supposed to mean when trying to run the hello-world example for confirmation of a successful Docker install. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/345dd538-9a56-4db8-9aa0-a567f07d1e92.png\" class=\"img-fluid\" alt=\"Trying to pull down a few basic images and being met with 503 errors\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Trying to pull down a few basic images and being met with 503 errors</figcaption>\n</figure>\n\nAnnoying yes! but knowing it is not something I have done makes me feel a little better. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/e9218761-2274-4d78-96dc-ff9dabe89c64.png\" class=\"img-fluid\" alt=\"Docker System Status real-time view confirming the error.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Docker System Status real-time view confirming the error.</figcaption>\n</figure>"},"next":{"fields":{"slug":"/appending-dates-to-filenames-in-cron-jobs"},"excerpt":null,"frontmatter":{"date":"29th March 2021 ","title":"Appending Dates To Filenames in Cron Jobs","description":"","tags":null,"posttype":"blog"},"body":"As a heavy proponent of automation, I constantly use `cron` to schedule tasks. A `cron` is a utility available in Linux that allows you to schedule a command or script to run automatically at a specified time and date. A ___cron job___ is the name for the scheduled task.\n\nSome of the tasks I set up ___cron jobs___ for are deleting temporary files, running commands, synchronise data folders and tasks that email me updates based on various gathered pieces of data. \n\nI plan to do a full article on the `cron` service in the future, but for now, I wanted to cover a recent gotcha I got asked for input into solving. \n\n### How do I append dates to filenames in cron jobs. \n\nSo it is quite common to want to append dates in filenames. We have probably all seen a script such as\n\n```\n:::bash\n#!/bin/bash\n\ntar -cf backup-$(date +%Y-%m-%d-%H%M%S).tar file1.txt file2.txt\n```\n\nThose who don't know [what the `tar` command does](https://linux.die.net/man/1/tar). \n\n> A quick tip - while I don't want to get away from the point of this article, but if you didn't require the hour, minutes and seconds, then we can modify the previous command; using backticks instead of `$()` and using the `date -I` syntax, less typing. See the example below.\n\nThe image below shows a file listing using the  `ls -l` command. The image shows two files called file1.txt and file2.txt, respectively. Using the `tar` and `date` commands, we make a `tar` archive of the two files appended with the date and time at the end of the archive name. \n\nWe then show the listing again, and we can see the creation of `backup-2021-03-27-152146.tar`. Next, we see a variation of command being run using just the `date -I` enclosed in backticks. The output of this does not show the hours, minutes and seconds; however, it is faster to type and has another benefit we will see in a minute.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/63778ef4-da31-464f-8748-397463b45a49.png\" class=\"img-fluid\" alt=\"Appending Dates To Filenames in Cron Jobs\">\n <figcaption class=\"figure-caption text-center fw-normal text-dark\">Appending Dates To Filenames in Cron Jobs.</figcaption>\n</figure>\n\nWe have seen a typical use case of a command that appends the date. Why can't I use this in a cron? Surely we can paste the above example in a script called _mybackupscript.sh_ and run it every minute like the following... right!\n\n```\n:::bash\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name  command to be executed\n*/1  *  *  *  * root /root/mybackupscript.sh\n```\n\n**Wrong** - We can read the manual for the crontab `man 5 crontab` to get our answer.\n\n> The \"sixth\" field (the rest of the line) specifies the command to be run. The entire command portion of the line, up to a newline or a \"%\" character, will be executed by /bin/sh or by the shell specified in the SHELL variable of the cronfile. A \"%\" character in the command, unless escaped with a backslash (\\), will be changed into newline characters, and all data after the first % will be sent to the command as standard input.\n\nSo how do we work around this? \n\nJust as the excerpt says, we escape like so\n\n```\n:::bash\n#!/bin/bash\n\ntar -cf backup-$(date +\\%Y-\\%m-\\%d-\\%H\\%M\\%S).tar file1.txt file2.txt\n```\n\nSo, Saint? Why did you waste time showing us `date -I`.... because it doesn't contain a percentage sign ;-)."}}},"staticQueryHashes":["310218920"],"slicesMap":{}}