{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/vulnerabilities-in-ssl-and-tls-rc-4-byte-biases/","result":{"pageContext":{"post":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-rc-4-byte-biases"},"excerpt":"Main Points The RC4 algorithm has many byte biases (certain bytes are more (or less) likely to appear than others).An attacker can use…","frontmatter":{"date":"16th January 2022 ","title":"Vulnerabilities in SSL & TLS :- RC4 Byte Biases","description":"In this article, we will look into CVE-2013-2566, also known as RC4 Byte Biases. The RC4 algorithm, which is used in the TLS and SSL protocols, has many single-byte biases, making it easier for remote attackers to carry plaintext-recovery attacks by statistically analysing ciphertext in a large number of sessions that use the same plaintext.","tags":"rc4-byte-biases, ssl","posttype":"article"},"body":"## Main Points\n\n- The RC4 algorithm has many byte biases (certain bytes are more (or less) likely to appear than others).\n- An attacker can use byte biases to recover plaintext bytes at known locations (such as a session token within a cookie) upon encrypting the same plaintext many times and monitoring the ciphertext.\n- This attack requires generation of large data volumes.\n- It is somewhat impractical but highlights a significant flaw within RC4.\n\n## Quick Reference\n\n### Description\n\nThe RC4 algorithm, which is used in the TLS and SSL protocols, has many single-byte biases, making it easier for remote attackers to carry plaintext-recovery attacks by statistically analysing ciphertext in a large number of sessions that use the same plaintext.\n\n### Name\n\nRC4 Byte Biases\n\n### CVE Number\n\nCVE-2013-2566\n\n### Type of Vulnerability\n\nCBC decryption vulnerability\n\n### Affected\n\nConnections supporting RC4\n\n### Remediation\n\nDisable support for RC4 algorithm."},"prev":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-ccs-injection-vulnerability"},"excerpt":"Main Points A weakness exists within a certain version of OpenSSL that allows clients and servers to be forced via specifically specially…","frontmatter":{"date":"17th January 2022 ","title":"Vulnerabilities in SSL & TLS :- CCS injection vulnerability","description":"In this article, we will look at CVE Number CVE-2014-0224, also known as the CCS injection vulnerability. This vulnerability results from a flaw in certain versions of OpenSSL that allows an attacker to communicate using weak key material in the hope decrypting traffic later.","tags":"css-injection, openssl, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- A weakness exists within a certain version of OpenSSL that allows clients and servers to be forced via specifically specially crafted handshake packet to use weak key material for communication.\n- Via a person-in-the-middle context an attacker maybe able to decrypt/modify traffic.\n\n## Quick Reference\n\n### Description\n\nA weakness in certain versions of OpenSSL that allows an attacker to use weak key material for communication with the hope decrypting traffic later. \n\n### Name\n\nCCS injection vulnerability\n\n### CVE Number\n\nCVE-2014-0224\n\n### Type of Vulnerability\n\nVulnerability in the OpenSSL library.\n\n### Affected\n\nOpenSSL versions said to be affected include:\n\n- Versions before 0.9.8za\n- 1.0.0 before 1.0.0m\n- 1.0.1 before 1.0.1h\n\n### Remediation\n\nUpgrade to a non-vulnerable version of the OpenSSL Library."},"next":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-breach"},"excerpt":"Main Points The attacker must use a different exploit to become a man-in-the-middle and to inject content into the network traffic stream…","frontmatter":{"date":"15th January 2022 ","title":"Vulnerabilities in SSL & TLS :- BREACH","description":"In this article we look at CVE Number CVE-2013-3587 or what is commonly referred as the BREACH attack. The HTTPS protocol can encrypt compressed data without properly obfuscating the length of the unencrypted data, which makes it easier for man-in-the-middle (MitM) attackers to obtain plaintext secret values by observing length differences during a series of guesses in which a string in an HTTP request URL potentially matches an unknown string in an HTTP response body.","tags":"breach, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- The attacker must use a different exploit to become a man-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- The BREACH attack is very similar to how CRIME work but BREACH exploits of vulnerability within the HTTP compression allowing an attacker to identify if text exists within a page.\n- BREACH attack on HTTP request responses, whereas CRIME looks at HTTP requests.\n- The BREACH attack is agnostic to the version of TLS/SSL, and does not require TLS-layer compression (only HTTP compression).\n- The BREACH attack works against any cipher suite.\n- The BREACH attack against stream ciphers is simpler as when performing attacks against block ciphers additional work must be done to align the output to the cipher text blocks.\n- The BREACH attack can be exploited with just a few thousand requests, and can be executed in under a minute**.** The number of requests required will depend on the secret size. The power of the attack comes from the fact that it allows guessing a secret one character at a time.\n\n\n## Quick Reference\n\n### TLDR\n\nThe HTTPS protocol can encrypt compressed data without properly obfuscating the length of the unencrypted data, which makes it easier for man-in-the-middle (MitM) attackers to obtain plaintext secret values by observing length differences during a series of guesses in which a string in an HTTP request URL potentially matches an unknown string in an HTTP response body.\n\n### Abbreviation\n\nBREACH\n\n### Name\n\nBrowser Reconnaissance & Exfiltration via Adaptive Compression of Hypertext\n\n### CVE Number\n\nCVE-2013-3587\n\n### Type of Vulnerability\n\nThe vulnerability is in HTTPS protocol compression. \n\n### Affected\n\nTo be vulnerable, a web application must:\n\n- Be served from a server that uses HTTP-level compression\n- Reflect user-input in HTTP response bodies\n- Reflect a secret (such as a CSRF token) in HTTP response bodies\n\n### Remediation\n\nNo clear mitigation to this attack. The following is a list of potential mitigations in order of effectiveness (not practicality)  provided by breachattack.com\n\n1. Disabling HTTP compression\n2. Separating secrets from user input\n3. Randomizing secrets per request\n4. Masking secrets (effectively randomizing by XORing with a random secret per request)\n5. Protecting vulnerable pages with CSRF\n6. Length hiding (by adding random number of bytes to the responses)\n7. Rate-limiting the requests"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}