{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/querying-active-directory-with-power-shell/","result":{"pageContext":{"post":{"fields":{"slug":"/querying-active-directory-with-power-shell"},"excerpt":"PowerShell v1: .NET & ADSI PowerShell v2 & newer: PowerShell Active Directory Module\n\nImport-module servermanager; add-windowsfeature rsat…","frontmatter":{"date":"22nd June 2022 ","title":"Querying Active Directory With PowerShell","description":"Active Directory lies at the heart of most organisations' networks. PowerShell is a versatile Scripting Language that Windows natively support. We can leverage PowerShell to enumerate Active Directory for various pieces of information crucial to our penetration tests.","tags":"active-directory, enumeration, powershell","posttype":"article"},"body":"# Active Directory Querying With PowerShell\n\nPowerShell v1: .NET & ADSI\n\nPowerShell v2 & newer: PowerShell Active Directory Module\n\n```\nImport-module servermanager; add-windowsfeature rsat-ad-tools\nImport-module servermanager; add-windowsfeature rsat-ad-PowerShell\n```\n\n### .NET\n\nExample of .NET\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers\n```\n\n### ADSI\n\n[http://www.selfadsi.org/extended-ad/search-domain-controllers.htm](http://www.selfadsi.org/extended-ad/search-domain-controllers.htm)\n\nExample of ADSI\n\n```\n$UserID = \"JoeUser\"\n$root = [ADSI]''\n$searcher = new-object System.DirectoryServices.DirectorySearcher($root)\n$searcher.filter = \"(&(objectClass=user)(sAMAccountName=$UserID))\"\n$user = $searcher.findall()\n$user\n```\n\n### Active Directory Module\n\nExample of Active Directory Module\n\n- Requires AD Web Services (ADWS) running on targeted DC (TCP 9389)\n    - (Side Note) PowerShell Remoting uses TCP 5985 (HTTP) or TCP 5986 (HTTPS)\n- SOAP XML messages over HTTP translated on DC\n\n```\nImport-Module ActiveDirectory\n$UserID = \"JoeUser\"\nGet-ADUser $UserID -Property *\n```\n\nHere are some of the more useful Active Directory Module commands\n\n```\nGet-Module -ListAvailable\nGet-Command -Module ActiveDirectory\n```\n\nServer 2008 R2\n\n```\nGet/Set-ADForest\nGet/Set-ADDomain\nGet/Set-ADDomainController\nGet/Set-ADUser\nGet/Set-ADComputer\nGet/Set-ADGroup\nGet/Set-ADGroupMember\nGet/Set-ADObject\nGet/Set-ADOrganizationalUnit\n\nEnable-ADOptionalFeature\nDisable/Enable-ADAccount\nMove-ADDirectoryServerOperationMasterRole\nNew-ADUser\nNew-ADComputer\nNew-ADGroup\nNew-ADObject\nNew-ADOrganizationalUnit\n```\n\nServer 2012+\n\n```\n*-ADResourcePropertyListMember\n*-ADAuthenticationPolicy\n*-ADAuthenticationPolicySilo\n*-ADCentralAccessPolicy\n*-ADCentralAccessRule\n*-ADResourceProperty\n*-ADResourcePropertyList\n*-ADResourcePropertyValueType\n*-ADDCCloneConfigFile\n*-ADReplicationAttributeMetadata\n*-ADReplicationConnection\n*-ADReplicationFailure\n*-ADReplicationPartnerMetadata\n*-ADReplicationQueueOperation\n*-ADReplicationSite\n*-ADReplicationSiteLink\n*-ADReplicationSiteLinkBridge\n*-ADReplicationSubnet\n*-ADReplicationUpToDatenessVectorTable\nSync-ADObject\n```\n\nA nice looking inventory of DC’s\n\n```\nGet-ADDomainController -Filter * | select hostname,IPv4Address,IsGlobalCatalog,IsReadOnly,OperatingSystem | Format-Table -auto\n```\n\n### Active Directory Drive\n\nExample of Active Directory drive\n\n```\nImort-Module ActiveDirectory\ndir ad:\nSet-Location ad:\nSet-Location \"dc=lab,dc=pentest,dc=local\"\ndir\n```\n\n### ANR\n\nANR enables you to find a user when you have some information about a user, but don’t know exactly to which attribute that data corresponds. For example, if you know the user has “Thor” somewhere, but don’t know exactly what the SAMAccountName is (or DN, SID, name, etc). Submitting an ANR search will query the AD attributes flagged for ANR (attributes must be indexed) and replies with the results (may be more than one user found).\n\nExample of ANR\n\n```\nImport-Module ActiveDirectory\nGet-ADObject -LDAPFilter {(&(ObjectClass=User)(ANR=Thor))}\n```\n\n## Active Directory Enumeration with .NET\n\nHere are some alternatives to using Get-ADForest & Get-Domain:\n\n### Get Active Directory Forest Information\n\n```\n$ADForestInfo = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()\n$ADForestInfo.Name\n$ADForestInfo.Sites\n$ADForestInfo.Domains\n$ADForestInfo.GlobalCatalogs\n$ADForestInfo.ApplicationPartitions\n$ADForestInfo.ForestMode\n$ADForestInfo.RootDomain\n$ADForestInfo.Schema\n$ADForestInfo.SchemaRoleOwner\n$ADForestInfo.NamingRoleOwner\n```\n\nOR\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Name\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Sites\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().GlobalCatalogs\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ApplicationPartitions\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ForestMode\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().RootDomain\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Schema\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().SchemaRoleOwner\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().NamingRoleOwner\n```\n\n### Get Active Directory Domain Information\n\nTarget the current (local) computer’s domain:\n\n```\n$ADDomainInfo = [System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain()\n```\n\nTarget the current user’s domain:\n\n```\n$ADDomainName = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n```\n\n```\n$ADDomainInfo.Forest\n$ADDomainInfo.DomainControllers\n$ADDomainInfo.Children\n$ADDomainInfo.DomainMode\n$ADDomainInfo.Parent\n$ADDomainInfo.PdcRoleOwner\n$ADDomainInfo.RidRoleOwner\n$ADDomainInfo.Name\n```\n\nOR\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Forest\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Children\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainMode\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Parent\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().RidRoleOwner\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Name\n```\n\n- Note: Use `[System.DirectoryServices.ActiveDirectory.Domain]::GetCOMPUTERDomain().Attribute` for the local computer’s domain info.\n\nExample:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCOMPUTERDomain().Forest\n```\n\n### Get the local computer’s site information:\n\n```\n$LocalSiteInfo = [System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite()\n$LocalSiteInfo.Name\n$LocalSiteInfo.Domains\n$LocalSiteInfo.Subnets\n$LocalSiteInfo.Servers\n$LocalSiteInfo.AdjacentSites\n$LocalSiteInfo.SiteLinks\n$LocalSiteInfo.InterSiteTopologyGenerator\n$LocalSiteInfo.Options\n$LocalSiteInfo.Location\n$LocalSiteInfo.BridgeheadServers\n$LocalSiteInfo.PreferredSmtpBridgeheadServers\n$LocalSiteInfo.PreferredRpcBridgeheadServers\n$LocalSiteInfo.IntraSiteReplicationSchedule\n```\n\nOR\n\n```\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Name\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Domains\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Subnets\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Servers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().AdjacentSites\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().SiteLinks\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().InterSiteTopologyGenerator\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Options\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Location\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().BridgeheadServers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().PreferredSmtpBridgeheadServers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().PreferredRpcBridgeheadServers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().IntraSiteReplicationSchedule\n```\n\n## Sean Metcalf Fave Enumeration Commands\n\nGet a Computer’s Site:\n\n```\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite()\n```\n\nGet a User’s Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Name\n```\n\nGet a Computer’s Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain().Name\n```\n\nList Active Directory FSMOs:\n\n```\n([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).SchemaRoleOwner\n([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).NamingRoleOwner\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).InfrastructureRoleOwner\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).PdcRoleOwner\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).RidRoleOwner\n```\n\nList All Domain Controllers in a Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers\n```\n\nGet Active Directory Domain Mode:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainMode\n```\n\nGet Trusts for current Active Directory Domain:\n\n```\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n```\n\nGet Active Directory Forest Name:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Name\n```\n\nGet a List of Sites in the Active Directory Forest:\n\n```\n[array] $ADSites = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Sites\n```\n\nGet Active Directory Forest Domains:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains\n```\n\nGet Active Directory Forest Global Catalogues:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().GlobalCatalogs\n```\n\nGet Active Directory Forest Application Partitions:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ApplicationPartitions\n```\n\nGet Active Directory Forest Mode:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ForestMode\n```\n\nGet Active Directory Forest Root Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().RootDomain\n```\n\nGet Active Directory Forest Schema DN:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Schema\n```\n\n## PowerShell Mitigations\n\nPowerShell version 5 will be out very soon and has several compelling security enhancements.\n\n### System-wide Transcripts\n\nUse group policy to have PowerShell log all system PowerShell commands and save the transcripts to a share for parsing.\n\n### Script Block Logging\n\nPowerShell logs the obfuscated code as well as the dynamically generated code that PowerShell actually executes.\n\n### Constrained PowerShell\n\nAutomatically enables PowerShell constrained mode when AppLocker policy is set to â€œAllowâ€. This limits PowerShell code execution to only core capability. The offensive PowerShell tools typically used by attackers leverage advanced PowerShell functionality disabled in Constrained Mode.\n\n### Windows 10 - Antimalware Integration\n\nWindows 10 adds Antimalware Integration which automatically passes all code PowerShell processes to an installed antimalware solution before execution. If the code is deemed as malicious it doesn’t execute. This also includes code downloaded into memory from the Internet and executed.\n\nPowerShell Security Recommendations.\n\n- Limit PowerShell Remoting (WinRM) - Limit WinRM listener scope to admin subnet & Disable PowerShell Remoting (WinRM) on DCs.\n- Audit/block PowerShell script execution via AppLocker. Once you have PowerShell v3+, Enable PowerShell Module logging (via GPO). This Enables tracking of PowerShell command usage providing capability to detect invoke-mimikatz use - just search PowerShell logs for “mimikatz”. [Note this won’t catch everything]\n- PowerShell v3+: Enable PowerShell Module logging (via GPO).\n- Leverage Metering for PowerShell usage trend analysis - JoeUser ran PowerShell on 10 computers today?\n- Track PowerShell Remoting Usage through NetFlow data OR check the PowerShell logs on clients (event ID 06) & servers (event id 400)\n- Deploy PowerShell v5 and implement system-wide transcripts"},"prev":{"fields":{"slug":"/find-interesting-files"},"excerpt":"Find SUID files find / -perm -4000 -type f 2>/dev/null\n\n\nFind SUID files owned by root\n\nfind / -uid 0 -perm -4000 -type f 2>/dev/null\n\n\nFind…","frontmatter":{"date":"29th June 2022 ","title":"Find Interesting Files","description":"A significant part of our job when searching around a target system is to look for interesting files.  Whether we have a need to look for SSH keys, Bash History files or database backups the commands typically all follow the same syntax. This article will look at using basic Linux commands to find and discover files.","tags":"enumeration, linux","posttype":"article"},"body":"\n# Finding Interesting Files\n\nFind SUID files\n\n```bash\nfind / -perm -4000 -type f 2>/dev/null\n```\n\nFind SUID files owned by root\n\n```bash\nfind / -uid 0 -perm -4000 -type f 2>/dev/null\n```\n\nFind GUID files\n\n```bash\nfind / -perm -2000 -type f 2>/dev/null\n```\n\nFind world-writeable files\n\n```bash\nfind / -perm -2 -type f 2>/dev/null\n```\n\nFind world-writeable files excluding those in /proc\n\n```bash\nfind / ! -path \"*/proc/*\" -perm -2 -type f -print 2>/dev/null\n```\n\nFind word-writeable directories\n\n```bash\nfind / -perm -2 -type d 2>/dev/null\n```\n\nFind rhost config files\n\n```bash\nfind /home –name *.rhosts -print 2>/dev/null\n```\n\nFind *.plan files, list permissions and cat the file contents\n\n```bash\nfind /home -iname *.plan -exec ls -la {} ; -exec cat {} 2>/dev/null ;\n```\n\nFind hosts.equiv, list permissions and cat the file contents\n\n```bash\nfind /etc -iname hosts.equiv -exec ls -la {} 2>/dev/null ; -exec cat {} 2>/dev/null ;\n```\n\nSee if you can access other user directories to find interesting files\n\n```bash\nls -ahlR /root/\n```\n\nShow the current users’ command history\n\n```bash\ncat ~/.bash_history\n```\n\nShow the current users’ various history files\n\n```bash\nls -la ~/.*_history\n```\n\nCan we read root’s history files\n\n```bash\nls -la /root/.*_history\n```\n\nCheck for interesting ssh files in the current users’ directory\n\n```bash\nls -la ~/.ssh/\n```\n\nFind SSH keys/host information\n\n```bash\nfind / -name \"id_dsa*\" -o -name \"id_rsa*\" -o -name \"known_hosts\" -o -name \"authorized_hosts\" -o -name \"authorized_keys\" 2>/dev/null |xargs -r ls -la\n```\n\nCheck Configuration of inetd services\n\n```bash\nls -la /usr/sbin/in.*\n```\n\nCheck log files for keywords (‘pass’ in this example) and show positive matches\n\n```bash\ngrep -l -i pass /var/log/*.log 2>/dev/null\n```\n\nList files in specified directory (/var/log)\n\n```bash\nfind /var/log -type f -exec ls -la {} ; 2>/dev/null\n```\n\nList .log files in specified directory (/var/log)\n\n```bash\nfind /var/log -name *.log -type f -exec ls -la {} ; 2>/dev/null\n```\n\nList .conf files in /etc (recursive 1 level)\n\n```bash\nfind /etc/ -maxdepth 1 -name *.conf -type f -exec ls -la {} ; 2>/dev/null\n```\n\nAs above\n\n```bash\nls -la /etc/*.conf\n```\n\nFind .conf files (recursive 4 levels) and output line number where the word ‘password’ is located\n\n```bash\nfind / -maxdepth 4 -name *.conf -type f -exec grep -Hn password {} ; 2>/dev/null\n```\n\nList open files (output will depend on account privileges)\n\n```bash\nlsof -i -n\n```\n\nCan we read roots mail\n\n```bash\nhead /var/mail/root\n```"},"next":{"fields":{"slug":"/ds-query"},"excerpt":"Open DS Query GUI Window rundll32 dsquery,OpenQueryWindow\n\nUsers\n\nQuery Users From Local server (default 100)\n\ndsquery user\n\n\nList Users…","frontmatter":{"date":"20th June 2022 ","title":"DSQuery","description":"Dsquery is a command-line tool that is built into Windows Server 2008. It is available if you have the Active Directory Domain Services (AD DS) server role installed. It allows you to find any objects in the directory using a Lightweight Directory Access Protocol (LDAP) query. To use it, you must run the dsquery command from an elevated command prompt.","tags":"dsquery, ldap","posttype":"article"},"body":"\n# DSQuery\n\nOpen DS Query GUI Window\n\n```\nrundll32 dsquery,OpenQueryWindow\n```\n\n### Users\n\nQuery Users From Local server (default 100)\n\n```\ndsquery user\n```\n\nList Users Remote Server (Unlimited or 2000 results)\n\n```\ndsquery user -s 10.100.1.254 -limit 0\ndsquery user -s 10.100.1.254 -limit 2000\n```\n\nQuery a specific user\n\n```\ndsquery user -samid <username> -s <DC IP Address>\ndsquery user -samid Administrator -s 10.100.1.254\n```\n\nList AD Users starting with ‘b’, don’t limit the number of results returned and request particular fields.\n\n```\ndsquery user -name \"b*\" -s 10.100.1.254 -limit 0 | dsget user -samid -sid -fn -ln -email -dept -disabled -reversiblepwd -mustchpwd -canchpwd -acctexpires -s 10.100.1.254\n```\n\nHow to Reset Active Directory User’s Password from Command Line\n```\ndsquery user -samid enter_username_here | dsmod user -pwd enter_new_pw_here -mustchpwd no\n```\n\nFind out if a user account is currently enabled or disabled.\n```\ndsquery user DC=%userdnsdomain:.=,DC=% -name %username% | dsget user -disabled -dn\n```\n\nStale user accounts\n```\ndsquery user domainroot -stalepwd 100 -limit 0\n```\n\nDisabled user accounts\n```\ndsquery user domainroot -disabled -limit 0\n```\n\nRemotely Reset the Active Directory User’s password from the command line.\n```\npsexec domain_controller_ip dsquery user -samid enter_username_here | dsmod user -pwd enter_new_pw_here -mustchpwd no enter_new_pw_here\n```\n\n### Computers\n\nList all computers\n```\ndsquery computer -limit 0\ndsquery computer -s 10.100.1.254\ndsquery computer -d marvel.lab\n```\n\nStale computer accounts\n\n```\ndsquery computer domainroot -stalepwd 180 -limit 0\n```\n\n### Loop through Domain Computers and run a command\n\nLoop through all the computers in the domain (Great for Adding Further Queries)\n\n```\nfor /f %i in ('dsquery computer -o rdn) do echo %i\n```\n\n### Group\n\nList all groups with Admin in the name\n\n```\ndsquery group -name \"*Admin*\" -s 10.100.1.254\ndsquery group -name \"*Admin*\" -s 10.100.1.254 | dsget group -members -expand -s 10.100.1.254\n```\n\nList all members of all group(s)\n\n```\ndsquery group -name \"*\" -s 10.100.1.254 | dsget group -members -expand -s 10.100.1.254\n```\n\nList all users in security group\n\n```\ndsquery group -name \"\" | dsget group -members -expand | dsget user -fn -ln -disabled\n```\n\n### Servers\n\nGet Domain Controllers\n\n```\ndsquery server -s 10.100.1.254\n```\n\nGlobal Catalog (`-isgc`)\n\n```\ndsquery server -isgc\n```\n\n### Loop through Domain servers and run a command\n\nLoop over a list of DC’s using `dsquery` (Great for Adding Further Queries)\n```\nfor /f %i in ('dsquery server -o rdn') do echo %i\n```\n\nDomain Controller IP Configuration\n```\nfor /f %i in ('dsquery server -domain %userdnsdomain% -o rdn') do psexec //%i ipconfig /all\n```\n\nAD Database disk usage\n```\nfor /f %i in ('dsquery server -domain %userdnsdomain% -o rdn') do dir //%i/admin$/ntds\n```\n\nDomain Controller Netlogon entries\n```\nfor /f %i in ('dsquery server -o rdn') do echo %i & reg query //%i/hklm/system/currentcontrolset/services/netlogon/parameters\n```\n\nDNS Zones in AD\n\n```\nfor /f %i in ('dsquery server -o rdn') do Dsquery * -s %i domainroot -filter (objectCategory=dnsZone)\n```\n\nEnumerate DNS Server Zones\n```\nfor /f %i in ('dsquery server -domain %userdnsdomain% -o rdn') do dnscmd %i /enumzones\n```\n\n### Sites\n\nReturn the object if KCC Intra/Inter site is disabled for each site\n```\ndsquery site | dsquery * -attr * -filter \"(|(Options:1.2.840.113556.1.4.803:=1)(Options:1.2.840.113556.1.4.803:=16))\"\n```\n\nReturn the object if KCC Intra/Inter site is disabled for each site\n```\ndsquery site | dsquery * -attr * -filter \"(|(Options:1.2.840.113556.1.4.803:=1)(Options:1.2.840.113556.1.4.803:=16))\"\n```\n\n### Subnets\n\nSubnet information\n```\ndsquery subnet -limit 0\n```\n\n### OU\n\nList Organisational Units\n```\ndsquery OU\n```\n\nACL on all OUs\n```\nfor /f \"delims=|\" %i in ('dsquery OU') do acldiag %i\n```\n\n### Custom Queries\n\nRemember all below queries can have the following added:\n\n- `s 10.100.1.254` will make the command query a remote server. `d marvel.lab` will make the command query a DC in the domain `limit 0` this option will allow ldap to return unlimited results as apposed to the default of 100 records. If 0 is given then the result set will be unlimited.\n\n### Servers\n\nFind servers in the domain\n```\ndsquery * domainroot -filter \"(&(objectCategory=Computer)(objectClass=Computer)(operatingSystem=*Server*))\"\n```\n\nDomain Controllers per site\n```\ndsquery * \"CN=Sites,CN=Configuration,DC=MARVEL,DC=LAB\" -filter \"(objectCategory=Server)\"\n```\n\nGlobal Catalog Servers from AD\n```\ndsquery * \"CN=Configuration,DC=MARVEL,DC=LAB\" -filter \"(&(objectCategory=nTDSDSA)(options:1.2.840.113556.1.4.803:=1))\"\n```\n\nDSQuery authorised DHCP Servers\n```\ndsquery * \"cn=NetServices,cn=Services,cn=Configuration,DC=MARVEL,DC=LAB\" -attr dhcpServers\n```\n\n### Users\n\nExport all usernames and email addresses\n```\ndsquery * -filter \"(&(objectCategory=person)(objectClass=user)(mail=*))\" -attr sAMAccountName name mail\n```\n\nUser accounts that are not disabled\n```\ndsquery * -filter \"(&(objectCategory=Person)(objectClass=User)(!userAccountControl:1.2.840.113556.1.4.803:=2))\"\n```\n\nUser accounts that are disabled\n```\ndsquery * domainroot -filter \"(&(objectCategory=Person)(objectClass=User)(userAccountControl:1.2.840.113556.1.4.803:=2))\"\n```\n\nUsers with no logon script\n```\ndsquery * domainroot -filter \"(&(objectCategory=Person)(objectClass=User)(!scriptPath=*))\" -attr sAMAccountName sn givenName pwdLastSet distinguishedName\n```\n\nUser accounts with no password required\n```\ndsquery * domainroot -filter \"(&(objectCategory=Person)(objectClass=User)(userAccountControl:1.2.840.113556.1.4.803:=32))\"\n```\n\nUser accounts with no password expiry\n```\ndsquery * domainroot -filter \"(&(objectCategory=Person)(objectClass=User)(userAccountControl:1.2.840.113556.1.4.803:=65536))\"\n```\n\nFind user by account name.\n```\ndsquery * domainroot -filter \"(samAccountName=Black.Widow)\" -attr *\n```\n\nFind a user by their email address.\n```\ndsquery * domainroot -filter \"(&(objectClass=User) (mail=Black.Widow@marvel.lab))\" -attr *\n```\n\nFind users with passwords set never to expire.\n```\ndsquery * domainroot -filter \"(&(objectClass=User) (userAccountControl>=65536))\" -attr samAccountName userPrincipalName userAccountControl\n```\n\n### Groups\n\nFind users in Domain Admin Group.\n```\ndsquery * -filter \"&(objectCategory=group)(CN=Domain Admins)\" | dsget group -members | dsget user -dn -samid -sid -fn -ln -display -email\n```\n\nFind empty groups.\n```\ndsquery * -filter \"&(objectCategory=group)(!member=*)\" -limit 0 -attr whenCreated whenChanged groupType sAMAccountName distinguishedName memberOf\n```\n\n### Group Policies\n\nInformation on existing GPOs\n```\ndsquery * \"CN=Policies,CN=System,DC=MARVEL,DC=LAB\" -filter \"(objectCategory=groupPolicyContainer)\" -attr displayName cnwhenCreated gPCFileSysPath\n```\n\nFind the policy display name given the GUID.\n```\ndsquery * \"CN=Policies,CN=System,DC=MARVEL,DC=LAB\" -filter \"(objectCategory=groupPolicyContainer)\" -attr Name displayName\n```\n\n### Useful Information\n\nForest/Domain Functional Levels\n\n```\ndsquery * \"cn=partitions,cn=configuration,DC=MARVEL,DC=LAB\" -filter \"(|(systemFlags=3)(systemFlags=-2147483648))\" -attr msDS-Behavior-Version Name dnsroot ntmixeddomain NetBIOSName\n```\n\nFind when the AD was installed.\n```\ndsquery * \"CN=configuration,DC=MARVEL,DC=LAB\" -attr whencreated -scope base\n```\n\nReturn the AD Schema\n\n```\ndsquery * \"CN=schema,CN=configuration,DC=MARVEL,DC=LAB\" -scope base -attr whenCreated whenChanged objectVersion\n```\n\n| 13 | Windows 2000 Server operating system |\n| --- | --- |\n| 30 | Windows Server 2003 operating system |\n| 31 | Windows Server 2003 R2 operating system |\n| 44 | Windows Server 2008 operating system (AD DS) |\n| 47 | Windows Server 2008 R2 operating system (AD DS) |\n| 56 | Windows Server 2012 operating system (AD DS) |\n| 69 | Windows Server 2012 R2 operating system (AD DS) |\n| 87 | Windows Server 2016 operating system (AD DS) |\n| 88 | Windows Server v1803 operating system (AD DS) |\n\n### Trusts\n\nEnumerate the trusts from the specified domain\n\n```\ndsquery * \"CN=System,DC=MARVEL,DC=LAB\" -filter \"(objectClass=trustedDomain)\" -attr trustPartner flatName\n```\n\nFind a DC for each trusted domain\n\n```\nfor /f \"skip=1\" %i in ('\"dsquery * CN=System,DC=MARVEL,DC=LAB -filter (objectClass=trustedDomain) -attr *\"') do nltest /dsgetdc:%i\n```\n\n### Sites & Subnets\n\nAD Site Information\n\n```\ndsquery * \"CN=Sites,CN=Configuration,DC=MARVEL,DC=LAB\" -attr cn description location -filter \"(objectClass=site)\"\n```\n\nSite Links and Cost\n\n```\ndsquery * \"CN=Sites,CN=Configuration,DC=MARVEL,DC=LAB\" -attr cn costdescription replInterval siteList -filter \"(objectClass=siteLink)\"\n```\n\nAD Subnet and Site Information\n\n```\ndsquery * \"CN=Subnets,CN=Sites,CN=Configuration,DC=MARVEL,DC=LAB\" -attr cn siteObject description location\n```"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}