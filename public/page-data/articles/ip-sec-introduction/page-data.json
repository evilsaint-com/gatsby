{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/ip-sec-introduction/","result":{"pageContext":{"post":{"fields":{"slug":"/ip-sec-introduction"},"excerpt":null,"frontmatter":{"date":"3rd January 2022 ","title":"IP Sec - Introduction","description":"This is a two part article that will go over the fundamentals of IPSec. We will start with a background of IPSec, and take a look at configuring an IPSec tunnel. Then we will run the pentest tool ike-scan against our configured IPSec tunnel and collect and analyse traffic in wireshark.","tags":"ike, isakmp","posttype":"article"},"body":"<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/8b11686c-7367-4f73-9278-6d8b142cf1f5.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">IPSec Overview</figcaption></figure>\n\nIPSec is a framework of open standards. The benefit of being a framework is that if one component gets superseded, it can be replaced, or additional items can be added. The suite of protocols that make up IPSec allows secure, encrypted communication between two computers.\n\nUses of IPsec\n\n- Authenticating and encrypting host-to-host traffic.\n- Authenticating and encrypting traffic to specific servers.\n- Using L2TP/IPsec for VPN connections.\n- Site-to-site tunneling.\n- Enforcing logical networks.\n\n## Overview\n\nIPSec was designed to provide security options and enhancements to Internet Protocol (IP) and negate Internet Protocol weaknesses.\n\nIPsec provided the following security.\n\n- Authentication - IP spoofing and packet source forgery issues.\n- Data Integrity - Modification of data within IP packets.\n- Anti-replay - Replaying packet attacks.\n- Data Confidentiality - Prevent packet sniffing attacks.\n\nIPSec consists of three core components. IKE, ESP and AH.\n\n**Internet Key Exchange (IKE)** is a network security Protocol designed to allow two devices to dynamically exchange Encryption Keys and negotiate Security Associations (SA). Internet Key Exchange (IKE) Security Associations (SA) can be established dynamically and removed after a negotiated period.\n\n**Encapsulating Security Payload (ESP)** provides IPSec data integrity, encryption, authentication, and anti-replay functions. ESP authenticates the data within the VPN, ensuring the integrity of the data and that it is coming from the correct source. Encapsulating Security Payload can provide encryption via two modes. Transport mode and Tunnel mode. In transport mode, the payload is encrypted, and in tunnel mode, the entire packet is encrypted.\n\n**Authentication Header (AH)** provides data integrity, authentication, and anti-replay functions for IPSec. Authentication Header (AH) does not, however, provide any data encryption. Authentication Header (AH) is used to provide data integrity services to ensure that no data tampering has occurred during transmission.\n\nSo just to run that back again, the authentication header (AH) is concerned with ensuring that packets get delivered and maintain their integrity. It will block against replay attacks and make sure data has not been modified; however, it does not encrypt. Encapsulating Security Payload (if used) encapsulates and encrypts the IP datagrams to protect them from sniffing attacks in addition to what AH does alone.\n\n<aside>\nðŸ’¡ Why would we ever use AH if ESP does everything? In short, when overhead and packet size becomes issues. ESP encapsulates packets with much overhead.\n\n</aside>\n\n## A look at IKE and ISAKMP\n\nIKE or Internet Key Exchange protocol is a protocol that sets up Security Associations (SAs) in the IPSec protocol suite.\n\nInternet Key Exchange (IKE) is a hybrid protocol that consists of 3 protocols.\n\n- ISAKMP: It is not a key exchange protocol per se. It is a framework on which key exchange protocols operate.\n- Oakley: Describes the \"modes\" of key exchange (e.g. perfect forward secrecy for keys, identity protection, and authentication)\n- SKEME: Provides support for public-key-based Key exchange, key distribution centres, and manual installation. It also outlines methods of secure and fast key refreshment.\n\nIn many texts, the terms IKE and ISAKMP are used interchangeably, which often confuses people in picking up this topic. Although we have briefly touched on their relationship, let us clarify the difference between IKE and ISAKMP.\n\nInternet Security Association Key Management Protocol (ISAKMP) is a framework for authentication and key exchange between two peers to establish, modify, and tear down SAs. It is designed to support many different kinds of key exchanges, not just IKE. ISAKMP uses UDP port 500 for communication between peers and is why port 500 is commonly associated with IPSec VPN.\n\nIKE is the implementation of ISAKMP using the Oakley and Skeme key exchange techniques. Oakley provides perfect forward secrecy (PFS) for keys, identity protection, and authentication; Skeme provides anonymity, reputability, and quick key refreshment.\n\nThink of ISAKMP as a framework, and IKE is an implementation of ISAKMP using the Oakley and Skeme key exchange techniques. Oakley provides perfect forward secrecy (PFS) for keys, identity protection, and authentication; Skeme provides anonymity, reputability, and quick key refreshment.\n\nEstablishing an IPSec tunnel requires two IKE phases.\n\n## IKE Phases\n\nIPsec VPNs are negotiated in phases\n\n- Successful Phase I negotiation results in an IKE Security Association (SA)\n- Successful Phase II negotiation results in two separate IPsec SAs for the directions in and out.\n- Phase II or (Quick Mode) happens through the Phase I tunnel.\n\n### Phase I\n\n- This Phase is where the IKE SA (Internet Key Exchange Security Association) is negotiated. This Phase can be performed in one of two Modes: Main (MM) or Aggressive (AM)\n\n### Phase II\n\n- This Phase is where the IPSec SA is negotiated. The IPSec tunnel (also called the IKE Phase II tunnel) build is complete when this Phase is completed. This Phase only has one mode called Quick Mode.\n\n## IPSec Implementation\n\nMost IPsec implementations use the Internet Key Exchange (IKE) service. Some older IPsec implementations use manual keying (Which involves exchanging encryption and authentication keys in advance), but this is now considered obsolete. As discussed briefly in the introduction, the Internet Key Exchange (IKE) protocol is used to negotiate the cryptographic algorithm choices and generate the associated keys. The Authentication Header (AH) and Encapsulating Security Payload (ESP) then use these choices.\n\nThe Internet Security Association and Key Management Protocol (ISAKMP) provides the framework for establishing SAs. A security association (SA) is a logical connection involving two devices that transfer data. With the help of the defined IPsec protocols, SAs offer data protection for unidirectional traffic. Generally, an IPsec tunnel features two unidirectional SAs, which offer a secure, full-duplex channel for data.\n\nA security association consists of parameters I remember as HAGLE:\n\nH = Hash Algorithm\n\nA = Authentication Method\n\nG = Group Number\n\nL = Lifetime Value\n\nE = Encryption\n\nBoth sides store the SA parameters in their security Association database when complete, sometimes referenced as SAD."},"prev":{"fields":{"slug":"/ip-sec-introduction-part-2"},"excerpt":null,"frontmatter":{"date":"4th January 2022 ","title":"IP Sec - Introduction Part 2","description":"In the second part of this article on IPSec we will be looking at the difference between main mode and aggressive mode and how to configure IKE in a lab environment using a Windows Server 2016 and a Windows 10 virtual machine. We then proceed to enumerate this setup with some tools bundled in Kali Linux.","tags":"ike, isakmp","posttype":"article"},"body":"Let us go over a summary of the points we covered in the introduction.\n\n- IKE is an implementation of the Internet Security Association Key Management Protocol (ISAKMP) along with the use of Oakley and SKEME protocols.\n- IKE communicates through UDP port 500.\n- IKE authentication methods support pre-shared keys, public-key encryption, and digital signatures.\n- IKE uses a two-phase process to establish the IPsec SA.\n- IKE phase one authenticates the peers who establish an ISAKMP SA, which is used during Phase two. The second Phase establishes an IPsec SA;\n- IKE phase one can run in two modes, \"main mode\" or \"aggressive mode\".\n- Phase two only has a single mode called Quick mode.\n\nPhase one, as mentioned, can be run in two modes called \"main mode\" or \"aggressive mode\". When testing IPsec VPN systems, we will primarily be dealing with IKE phase one as Phase two is only accessible upon successful authentication.\n\n## \"main mode\" or \"aggressive mode\"\n\nMain Mode\n\n- Six messages are sent in total.\n- The expensive DH computation is not performed until after the first packet is exchanged, and the peer IDs are passed encrypted not in the clear.\n- Due to the way it is calculated, it is not possible to use the \"main mode\" with pre-shared key authentication unless the IP address of the initiator (client) is known beforehand. Client IPs are usually dynamic in remote access situations.\n\nAggressive mode\n\n- Optional, so not all VPN services will support it.\n- Only three messages are sent in instead of the six used in \"main mode\", which reduces the time required to complete Phase one exchange, but it impacts security integrity because the peer ID is passed in the clear, not encrypted.\n- This mode is generally used in a remote access VPN solution.\n- Aggressive mode is susceptible to resource exhaustion because the expensive DH computation must be performed immediately after receiving the first packet.\n\n## Configuring IPSec\n\nLab Nine in *La Maison de saint* is the following setup: a Windows Server 2016 and a Windows 10, 64-bit operating system. It can be seen in the screenshot that both machines have non-persistent hard disks and have their operating system build numbers in their title. They are both set up on their own VM Net Number.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/16e99dcd-fac2-4635-b8d2-19dcf8f1ba91.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/f251ca61-a2d6-4d7d-bf93-61d86f0630d3.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<aside>\nðŸ’¡ Note,  the benefit of non-persistent disks is that they will maintain the configuration if the machine is rebooted. However, if the machine is shut down, it will revert to its previous configuration when turned back on.\n</aside>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/3f7498cb-d58f-4cb0-9fad-6f58f7ee317f.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/e7597ff9-5b3f-454a-a6d2-df0c6b80379e.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nInitial configuration if we look at the above screenshots, we can identify the two machines' hostname and IP address. The windows 10 machine is called \"client\", and the Windows Server machine is called \"server\". These are on IP 10.10.10.100 and 10.10.10.250\n\nThere is an IIS default web application on port 80 of the server that we will connect to test the IP Sec configuration.  The below screenshot shows the connection to the web application and a blend of TCP and HTTP traffic showing up in Wireshark. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/2920a73d-9649-43af-abce-d26b900989e8.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Wireshark open and HTTP traffic showing. Web application (IIS default start page)</figcaption></figure>\n\nLet us navigate to the start menu and open \"Windows Firewall with Advanced Security\".\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/623916a1-7a2f-4c09-b7d9-a660b45ef4b5.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nWe will open the Windows Firewall with Advanced Security, select Connect security policy from the left-hand side, and create a new rule on the right-hand side.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/da5a5280-fc26-44b4-a4c7-0d55a1fc6cbe.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIn the modal that appears, we will have five different rule options.\n\n- Isolation\n- Authentication exemption\n- server-to-server\n- Tunnel\n- Custom\n\nWe will configure a server to server connection.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/42c71ddf-36a0-42a5-900f-9d6bef82afb0.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIt will then ask us for the endpoints; we can select the two endpoints per the IP Addresses mentioned earlier.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/fd0dfa3a-7106-44c3-af8f-50a791ec3170.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nOn the next screen, we are asked several options regarding whether we want to require or request authentication for inbound and outbound scenarios. We want to request authentication for inbound and outbound connections, but we will not require it for communication (It is nice to have, desired but not enforced).\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/7cb25c35-099c-432a-8402-5845d69573fd.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nOn the following screen, we can set up an authentication method. As mentioned previously, we can see computer certificates as one of the authentication options. If we select the Advanced option and click customise, we will be taken to a screen to configure a customised advanced authentication method.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/7d634e06-f6b9-4435-b7c7-64909235b215.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIn this case, we will click to add the first authentication method and select the pre-shared key.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/01176cb6-8749-44ff-9ce8-88868e1fe1d0.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/dbb1dab6-5843-4253-a585-c973e23b7494.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nPre-Shared Keys (as you can see from the warning) are not recommended; however, they are the easiest way to set up the configuration for our lab.\n\nWe will then click OK and OK again, then select next to move on to the next screen. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/7179dcfb-f060-43ab-92b4-a05655d52ff8.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nWe will apply this rule to all types of networks, domain, private and public.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/af164b02-b866-46cc-931f-2973fbd34170.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nWe will now refresh our browser connection and look inside Wireshark. Packets 61 and 62 show are initial connection on TCP port 80 and then shortly after we can now see the six packets that make up the \"main mode\" and the following \"quick mode\" packets.\n\nBecause we have set up a secure connection between two endpoints, as shown in the following screenshots, we will not gain an IKE handshake as our testing machine cannot fall in the endpoint IP range.\n\nHowever, if we set the endpoint range to be any in the following range, and we happen to be inside that range, then we might get some output that we can see from our penetration testing tools.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/03f2b448-4b09-41af-8074-9dfd4e5a24e6.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n## Using Ike-Scan\n\nWe can identify IPsec VPN points with Ike-Scan.\n\nIf we run `ike-scan` against our server with no arguments you can see if has negotiated a handshake and we can see the details of the SA\n\n```bash\nsudo ike-scan 10.10.10.250\nStarting ike-scan 1.9.4 with 1 hosts ([http://www.nta-monitor.com/tools/ike-scan/](http://www.nta-monitor.com/tools/ike-scan/))\n10.10.10.250    Main Mode Handshake returned HDR=(CKY-R=0cf85f1d8b3df6a4) SA=(Enc=3DES Hash=SHA1 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration(4)=0x00007080) VID=1e2b516905991c7d7c96fcbfb587e46100000009 (Windows-8) VID=4a131c81070358455c5728f20e95452f (RFC 3947 NAT-T) VID=90cb80913ebb696e086381b5ec427b1f (draft-ietf-ipsec-nat-t-ike-02\\n) VID=4048b7d56ebce88525e7de7f00d6c2d3 (IKE Fragmentation) VID=fb1de3cdf341b7ea16b7e5be0855f120 (MS-Negotiation Discovery Capable) VID=e3a5966a76379fe707228231e5ce8652 (IKE CGA version 1)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.008 seconds (129.87 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nFor clarity we can add the `-M` option for multi-line mode to make it easier to read.\n\n```bash\nsudo ike-scan 10.10.10.250 -M                                                                                                                                                            \nStarting ike-scan 1.9.4 with 1 hosts (http://www.nta-monitor.com/tools/ike-scan/)\n10.10.10.250    Main Mode Handshake returned\n        HDR=(CKY-R=eb5de8bbb1bcb7d6)\n        SA=(Enc=3DES Hash=SHA1 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration(4)=0x00007080)\n        VID=1e2b516905991c7d7c96fcbfb587e46100000009 (Windows-8)\n        VID=4a131c81070358455c5728f20e95452f (RFC 3947 NAT-T)\n        VID=90cb80913ebb696e086381b5ec427b1f (draft-ietf-ipsec-nat-t-ike-02\\n)\n        VID=4048b7d56ebce88525e7de7f00d6c2d3 (IKE Fragmentation)\n        VID=fb1de3cdf341b7ea16b7e5be0855f120 (MS-Negotiation Discovery Capable)\n        VID=e3a5966a76379fe707228231e5ce8652 (IKE CGA version 1)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.008 seconds (120.63 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nIf we just want to check the mode i.e. Main or Aggressive then we might want to use the `--quiet` flag to get rid of any superfluous SA information. \n\n```bash\nsudo ike-scan 10.10.10.250 --quiet\nStarting ike-scan 1.9.4 with 1 hosts ([http://www.nta-monitor.com/tools/ike-scan/](http://www.nta-monitor.com/tools/ike-scan/))\n10.10.10.250    Main Mode Handshake returned\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.007 seconds (151.15 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nIn this example we have been fortunate to be able to negotiate an SA. However on another endpoint we might not be so successful. We can use the `--trans` flag to specify values that make up a custom transform. \n\n```bash\nsudo ike-scan 10.10.10.250 -M -v --trans=5,2,1,2\nDEBUG: pkt len=84 bytes, bandwidth=56000 bps, int=16000 us\nStarting ike-scan 1.9.4 with 1 hosts ([http://www.nta-monitor.com/tools/ike-scan/](http://www.nta-monitor.com/tools/ike-scan/))\n10.10.10.250    Main Mode Handshake returned\nHDR=(CKY-R=581954ce022c82e2)\nSA=(Enc=3DES Hash=SHA1 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration(4)=0x00007080)\nVID=1e2b516905991c7d7c96fcbfb587e46100000009 (Windows-8)\nVID=4a131c81070358455c5728f20e95452f (RFC 3947 NAT-T)\nVID=90cb80913ebb696e086381b5ec427b1f (draft-ietf-ipsec-nat-t-ike-02\\n)\nVID=4048b7d56ebce88525e7de7f00d6c2d3 (IKE Fragmentation)\nVID=fb1de3cdf341b7ea16b7e5be0855f120 (MS-Negotiation Discovery Capable)\nVID=e3a5966a76379fe707228231e5ce8652 (IKE CGA version 1)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.007 seconds (135.19 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nWe can lookup the values below\n\n**Encryption Algorithm Values**\n\n1 = DES\n2 = IDEA\n3 = Blowfish\n4 = RC5\n5 = Triple DES\n6 = CAST\n7 = AES\n8 = Camellia\n\n**Hash Algorithm Values**\n\n1 = MD5\n2 = SHA1\n3 = Tiger\n4 = SHA2-256\n5 = SHA2-384\n6 = SHA2-512\n\n\n**Authentication Method Values**\n\n1\t\t= Pre-Shared Key\n2\t\t= DSS Signature\n3\t\t= RSA Signature\n4\t\t= RSA Encryption\n5\t\t= Revised RSA Encryption\n6\t\t= ElGamel Encryption\n7\t\t= Revised ElGamel Encryption\n8\t\t= ECDSA Signature\n64221\t= Hybrid Mode\n65001\t= XAUTH\n\n**Diffie-Hellman Group Values**\n\n1\t= MODP 768\n2\t= MODP 1024\n3\t= EC2N 155\n4\t= EC2N 185\n5\t= MODP 1536\n6\t= EC2N 163\n7\t= EC2N 163\n8\t= EC2N 183\n9\t= EC2N 183\n10\t= EC2N 409\n11\t= EC2N 409\n12\t= EC2N 571\n13\t= EC2N 571\n14\t= MODP 2048\n15\t= MODP 3072\n16\t= MODP 4096\n17\t= MODP 6144\n18\t= MODP 8192"},"next":{"fields":{"slug":"/web-security-headers"},"excerpt":null,"frontmatter":{"date":"2nd January 2022 ","title":"Web Security Headers","description":"Web application security headers can make a big difference in reducing the attack surface of a clients application. Knowing the differences is an essential part of a consultants repertoire.","tags":"browsers, content-security-policy, csp, hsts, security-headers, strict-transport-security, x-content-type-options, x-frame-options","posttype":"article"},"body":"HTTP Headers are typically easy to implement and can significantly increase the security of your website and help prevent security vulnerabilities like Cross-Site Scripting, Clickjacking, Information disclosure and more. In this article, we are concerned chiefly with five security headers that can be implemented to improve the security posture of your website.\n\n- X Frames Options\n    - X-Frames-Options\n- XSS Protection\n    - *X-XSS-Protection*\n- X Content-Type Options\n    - *X-Content-Type-Options*\n- Strict Transport Security Header (HSTS)\n    - *Strict-Transport-Security*\n- Content Security Policy (CSP)\n    - *Content-Security-Policy*\n\nWhile these headers are certainly not in order of importance, I have purposely left Security Headers with more discussion points until later in this article.\n\nA quick word on setting headers. While the exact location of a webservers domain configuration file can be customised, it is quite common for the Nginx and Apache Configuration files to be at the following locations named typically after the web domain name or utilising the default configuration example. If your website was `something.com`, then check for a file called `something.com.conf` or potentially `default.conf` if the default template file was used.\n\n- /etc/apache2/sites-enabled/<website name|default>.conf\n- /etc/nginx/sites-enabled/<website name|default>.conf file:\n\n## X Frames Options - X-Frames-Options\n\nThe X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a `<frame>`, `<iframe>`, `<embed>` or `<object>`. Sites can use this to avoid clickjacking attacks by ensuring that their content is not embedded into other sites.\n\nThere are three ways to configure X-Frame-Options:\n\n**DENY:**Â This will disable iframe features altogether.\n\n**SAMEORIGIN:**Â iframe can be used only by someone of the same origin.\n\n**ALLOW-FROM:**Â This will allow pages to be put in iframes only from specific URLs.\n\nNginx\n\n```bash\nadd_header X-Frame-Options \"SAMEORIGIN\";\n```\n\nApache\n\n```bash\nHeader always set X-Frame-Options \"SAMEORIGIN\"\n```\n\n## XSS Protection -Â *X-XSS-Protection*\n\nThe XSS Protection header is an older security header that enables cross-site scripting protection in Internet Explorer, Chrome and Firefox. Although this functionality is now provided by CSP, which allows us to block inline JavaScript, the header can still provide protection when used with older browsers that do not support the Content Security Policy header.\n\nYou can implement XSS protection using the three options depending on the specific need.\n\n**X-XSS-Protection: 0**: This will disable the filter entirely.\n\n**X-XSS-Protection: 1**: This will enable the filter but only sanitizes potentially malicious scripts.\n\n**X-XSS-Protection: 1; mode=block**: This will enable the filter and completely blocks the page.\n\nNginx\n\n```bash\nadd_header X-XSS-Protection \"1; mode=block\";\n```\n\nApache\n\n```bash\nHeader set X-XSS-Protection \"1; mode=block\"\n```\n\n## X Content-Type Options - X-Content-Type-Options\n\nThis header tells the browser that the Multipurpose Internet Mail Extensions (MIME) types advertised in the Content-Type header should be followed. This header was first introduced by Microsoft to prevent MIME sniffing.\n\nMIME sniffing is where a browser looks at the contents of a given resource and attempts to detect the MIME type. An attack vector can open up if an attacker can control the content of a resource or upload a new resource to a website, and this Security Header is not advertised in the resource response. The attacker might make non-executable content appear to be executable content and trick the browser into executing it in the victim's browser.\n\nNginx\n\n```bash\nadd_header X-Content-Type-Options \"nosniff\"\n```\n\nApache\n\n```bash\nHeader set X-Content-Type-Options \"nosniff\"\n```\n\n## Strict Transport Security Header (HSTS) -Â *Strict-Transport-Security*\n\nThe first header for discussion is the Strict Transport Security Header (HSTS). The HSTS forces web browsers or clients to communicate with servers but only through HTTPS connections. HSTS ensures that connections only use HTTPS and prevent man in the middle, downgrade, and cookie hijacking attacks. HSTS is a trust on first use (sometimes abbreviated as TOFU), meaning it must send at least one insecure connection over HTTP to the host to transfer the security header.\n\nThe HSTS preload list is an effort to provide browsers with a list of sites that support HSTS to avoid this initial, insecure connection. However, suppose a site is not on the list but uses the 'strict-transport-security' header; after the initial exchange, the browser will only request access to the website over Transport Layer Security (TLS).\n\nNginx\n\n```bash\nadd_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';\n```\n\nApache\n\n```bash\nHeader set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n```\n\n## Content Security Policy (CSP) -Â *Content-Security-Policy*\n\nContent Security Policy, sometimes abbreviated as CSP, is a security header that helps mitigate the risk of certain types of data injection attacks such as cross-site scripting. CSP allows website administrators to eliminate or mitigate cross-site scripting by defining a policy that stipulates what locations browsers should trust and allows script execution. The Content Security Policy header is sometimes referred to as a poor man's Web Application Firewall (WAF).\n\nThis header is set in HTTP response when an HTML document is requested by a user. Content Security Policy enables the website to list precisely which domains the HTML document can load scripts from. Browsers then deny requests for scripts from any other servers.\n\nThe architecture of this policy allows sites to safelist only servers containing resources they need, such as CDNs and plugins. As a result, if an attacker successfully gets a page to request a script through a cross-site scripting attack, the browser will refuse to load the script because the origin isn't on the safelist.\n\nIn addition to disallowing non-whitelisted sites, a site that implements the Content Security Policy header no longer supports inline JavaScript. This means that sites must remove code within script tags in an HTML file, JavaScript URLs, and inline event handlers and handle those tasks using script files instead.\n\nAs an ultimate form of protection, sites that want to never allow scripts to be executed can opt to globally disallow script execution. In addition to restricting the domains from which content can be loaded, the server can specify which protocols were allowed. So, for example, a server can specify that all content must be loaded using HTTPS.\n\nHowever, it should be noted that as part of a defence in depth approach, all cookies should be marked with a secure flag to ensure that they can't be transmitted over HTTP.\n\nNginx\n\n```bash\nadd_header Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *\";\n```\n\nApache\n\n```bash\nHeader always set Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;\"\n```"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}