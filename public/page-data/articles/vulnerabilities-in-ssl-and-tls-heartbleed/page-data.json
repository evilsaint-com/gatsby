{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/vulnerabilities-in-ssl-and-tls-heartbleed/","result":{"pageContext":{"post":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-heartbleed"},"excerpt":"Main Points Does not require a person-in-the-middle position to work -- unlike many other attacks in our \"Vulnerabilities in SSL/TLSâ€¦","frontmatter":{"date":"6th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Heartbleed","description":"In this article, we look at CVE Number CVE-2014-0160 or what is commonly referred to as the Heartbleed vulnerability; a buffer overflow in the Heartbeat extension of OpenSSL. A malicious client could send a specially crafted packet to disclose a limited portion of the server or computer's memory per request from a connected client or server. The disclosed portions of memory could include sensitive information, such as private keys, names, usernames, passwords and/or any other data on the system.","tags":"heartbleed, openssl, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- **Does not** require a person-in-the-middle position to work -- unlike many other attacks in our \"Vulnerabilities in SSL/TLS\" series.\n- Found in OpenSSL's implementation of the SSL/TLS protocol -- rather than the protocol itself or one of its components.\n- OpenSSL 1.0.1 added a \"Heartbeat\" extension in December 2011 whose goal was to avoid the need to re-establish SSL sessions and extend their lifespan. Later, a flaw was introduced into the Hearbeat extension's code.\n- Apache and Nginx power much of the internet's infrastructure and by default use OpenSSL. Some sources claim that at the time of the Heartbleed attack, 17% of the internet was vulnerable.\n- Heartbleed is a programming error. The TLS heartbeat extension lacks a bounds check, causing incorrect input validation. The extension returns memory contents without checking how much is returned.\n- PHD Student Robin Seggelmann, co-author of the Heartbeat extensions RFC, introduced the bug into the code. Stephen N. Henson, one of OpenSSL's four core developers, reviewed the code. Henson overlooked a flaw in Seggelmann's implementation, which was introduced into OpenSSL's source code repository on December 31, 2011. The flaw spread rapidly with the release of OpenSSL 1.0.1 on March 14, 2012, with Heartbeat support enabled by default. 1.0.1g, released on April 7, 2014.\n- Affects either a server or a client using a vulnerable OpenSSL TLS instance.\n\n## Quick Reference\n\n### Abbreviation\n\nNo abbreviation, just referred to as Heartbleed. \n\n### Name\n\nHeartbleed\n\n### CVE Number\n\nCVE-2014-0160\n\n### Where is Vulnerability\n\nThe vulnerability is in the OpenSSL implementation of SSL/TLS and not the SSL/TLS protocol itself.  \n\n### Affected\n\nOnly 1.0.1 and 1.0.2-beta releases of OpenSSL are affected includingÂ 1.0.1f and 1.0.2-beta1.\n\n### Remediation\n\nAs long as the vulnerable version of OpenSSL is in use, it can be abused. Upgrade to a patched version of OpenSSL."},"prev":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-sweet32"},"excerpt":"Main Points Sweet32 takes advantage of weaknesses in the design of some ciphers.Allows an attacker to recover small portions of plaintextâ€¦","frontmatter":{"date":"7th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Sweet32","description":"In this article, we will look at CVE Numbers CVE-2016â€“2183 and CVE-2016â€“6329, also known as the Sweet32 attack. The attack which involves collecting SSL traffic using legacy block ciphers via a person-in-the-middle context and subjecting it to a collision attack.","tags":"ssl, sweet32, tls","posttype":"article"},"body":"## Main Points\n\n- Sweet32 takes advantage of weaknesses in the design of some ciphers.\n- Allows an attacker to recover small portions of plaintext encrypted with 64-bit block ciphers (such as Triple-DES and Blowfish).\n- Based on the use of legacy block ciphers, which are vulnerable to a practical collision attack when used in CBC mode. A simple birthday attack can be used to identify 64-bit block cipher collisions when using the CBC mode of operation. When a collision occurs, it means that the input and output are the same, allowing the encrypted data to be exfiltrated.\n- The use of a 64-bit block ciphers is likely to produce a collision after 32 GB of data, but for a practical attack the researchers found that up to 785 GB of data is required.\n- A specific weakness in the OpenSSL implementation of SSLv2 allows for a 'special DROWN attack,' which greatly reduces the effort required to break the encryption, allowing for real-time person-in-the-middle attacks.\n\n## Quick Reference\n\n### Description\n\nThe attack which involves collecting SSL traffic using legacy block ciphers via a person-in-the-middle context and subjecting it to a collision attack.\n\n### Abbreviation\n\nSWEET32\n\n### Name\n\nSWEET32\n\n### CVE Number\n\nCVE-2016â€“2183 and CVE-2016â€“6329\n\n### Type of Vulnerability\n\nThe attack takes advantage of flaws in the design of some block ciphers.\n\n### Affected\n\nCarrying out the TLS variant of the Sweet32 attack successfully requires a very specific set of capabilities on the part of the attacker:\n\n- The attacker must be able to run JavaScript in the victim's browser to generate data for transmission to the server.\n- The attacker must keep the victim on the malicious JavaScript page for one to two days to generate enough ciphertext blocks to find a collision.\n\n### Remediation\n\nDo not support or negotiate 3DES cipher-suites. At a minimum, AES should be preferred over 3DES. Limit the length of the TLS session."},"next":{"fields":{"slug":"/ip-sec-introduction-part-2"},"excerpt":null,"frontmatter":{"date":"4th January 2022 ","title":"IP Sec - Introduction Part 2","description":"In the second part of this article on IPSec we will be looking at the difference between main mode and aggressive mode and how to configure IKE in a lab environment using a Windows Server 2016 and a Windows 10 virtual machine. We then proceed to enumerate this setup with some tools bundled in Kali Linux.","tags":"ike, isakmp","posttype":"article"},"body":"Let us go over a summary of the points we covered in the introduction.\n\n- IKE is an implementation of the Internet Security Association Key Management Protocol (ISAKMP) along with the use of Oakley and SKEME protocols.\n- IKE communicates through UDP port 500.\n- IKE authentication methods support pre-shared keys, public-key encryption, and digital signatures.\n- IKE uses a two-phase process to establish the IPsec SA.\n- IKE phase one authenticates the peers who establish an ISAKMP SA, which is used during Phase two. The second Phase establishes an IPsec SA;\n- IKE phase one can run in two modes, \"main mode\" or \"aggressive mode\".\n- Phase two only has a single mode called Quick mode.\n\nPhase one, as mentioned, can be run in two modes called \"main mode\" or \"aggressive mode\". When testing IPsec VPN systems, we will primarily be dealing with IKE phase one as Phase two is only accessible upon successful authentication.\n\n## \"main mode\" or \"aggressive mode\"\n\nMain Mode\n\n- Six messages are sent in total.\n- The expensive DH computation is not performed until after the first packet is exchanged, and the peer IDs are passed encrypted not in the clear.\n- Due to the way it is calculated, it is not possible to use the \"main mode\" with pre-shared key authentication unless the IP address of the initiator (client) is known beforehand. Client IPs are usually dynamic in remote access situations.\n\nAggressive mode\n\n- Optional, so not all VPN services will support it.\n- Only three messages are sent in instead of the six used in \"main mode\", which reduces the time required to complete Phase one exchange, but it impacts security integrity because the peer ID is passed in the clear, not encrypted.\n- This mode is generally used in a remote access VPN solution.\n- Aggressive mode is susceptible to resource exhaustion because the expensive DH computation must be performed immediately after receiving the first packet.\n\n## Configuring IPSec\n\nLab Nine in *La Maison de saint* is the following setup: a Windows Server 2016 and a Windows 10, 64-bit operating system. It can be seen in the screenshot that both machines have non-persistent hard disks and have their operating system build numbers in their title. They are both set up on their own VM Net Number.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/16e99dcd-fac2-4635-b8d2-19dcf8f1ba91.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/f251ca61-a2d6-4d7d-bf93-61d86f0630d3.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<aside>\nðŸ’¡ Note,  the benefit of non-persistent disks is that they will maintain the configuration if the machine is rebooted. However, if the machine is shut down, it will revert to its previous configuration when turned back on.\n</aside>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/3f7498cb-d58f-4cb0-9fad-6f58f7ee317f.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/e7597ff9-5b3f-454a-a6d2-df0c6b80379e.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nInitial configuration if we look at the above screenshots, we can identify the two machines' hostname and IP address. The windows 10 machine is called \"client\", and the Windows Server machine is called \"server\". These are on IP 10.10.10.100 and 10.10.10.250\n\nThere is an IIS default web application on port 80 of the server that we will connect to test the IP Sec configuration.  The below screenshot shows the connection to the web application and a blend of TCP and HTTP traffic showing up in Wireshark. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/2920a73d-9649-43af-abce-d26b900989e8.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Wireshark open and HTTP traffic showing. Web application (IIS default start page)</figcaption></figure>\n\nLet us navigate to the start menu and open \"Windows Firewall with Advanced Security\".\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/623916a1-7a2f-4c09-b7d9-a660b45ef4b5.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nWe will open the Windows Firewall with Advanced Security, select Connect security policy from the left-hand side, and create a new rule on the right-hand side.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/da5a5280-fc26-44b4-a4c7-0d55a1fc6cbe.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIn the modal that appears, we will have five different rule options.\n\n- Isolation\n- Authentication exemption\n- server-to-server\n- Tunnel\n- Custom\n\nWe will configure a server to server connection.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/42c71ddf-36a0-42a5-900f-9d6bef82afb0.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIt will then ask us for the endpoints; we can select the two endpoints per the IP Addresses mentioned earlier.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/fd0dfa3a-7106-44c3-af8f-50a791ec3170.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nOn the next screen, we are asked several options regarding whether we want to require or request authentication for inbound and outbound scenarios. We want to request authentication for inbound and outbound connections, but we will not require it for communication (It is nice to have, desired but not enforced).\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/7cb25c35-099c-432a-8402-5845d69573fd.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nOn the following screen, we can set up an authentication method. As mentioned previously, we can see computer certificates as one of the authentication options. If we select the Advanced option and click customise, we will be taken to a screen to configure a customised advanced authentication method.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/7d634e06-f6b9-4435-b7c7-64909235b215.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIn this case, we will click to add the first authentication method and select the pre-shared key.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/01176cb6-8749-44ff-9ce8-88868e1fe1d0.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/dbb1dab6-5843-4253-a585-c973e23b7494.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nPre-Shared Keys (as you can see from the warning) are not recommended; however, they are the easiest way to set up the configuration for our lab.\n\nWe will then click OK and OK again, then select next to move on to the next screen. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/7179dcfb-f060-43ab-92b4-a05655d52ff8.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nWe will apply this rule to all types of networks, domain, private and public.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/af164b02-b866-46cc-931f-2973fbd34170.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nWe will now refresh our browser connection and look inside Wireshark. Packets 61 and 62 show are initial connection on TCP port 80 and then shortly after we can now see the six packets that make up the \"main mode\" and the following \"quick mode\" packets.\n\nBecause we have set up a secure connection between two endpoints, as shown in the following screenshots, we will not gain an IKE handshake as our testing machine cannot fall in the endpoint IP range.\n\nHowever, if we set the endpoint range to be any in the following range, and we happen to be inside that range, then we might get some output that we can see from our penetration testing tools.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/03f2b448-4b09-41af-8074-9dfd4e5a24e6.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n## Using Ike-Scan\n\nWe can identify IPsec VPN points with Ike-Scan.\n\nIf we run `ike-scan` against our server with no arguments you can see if has negotiated a handshake and we can see the details of the SA\n\n```bash\nsudo ike-scan 10.10.10.250\nStarting ike-scan 1.9.4 with 1 hosts ([http://www.nta-monitor.com/tools/ike-scan/](http://www.nta-monitor.com/tools/ike-scan/))\n10.10.10.250    Main Mode Handshake returned HDR=(CKY-R=0cf85f1d8b3df6a4) SA=(Enc=3DES Hash=SHA1 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration(4)=0x00007080) VID=1e2b516905991c7d7c96fcbfb587e46100000009 (Windows-8) VID=4a131c81070358455c5728f20e95452f (RFC 3947 NAT-T) VID=90cb80913ebb696e086381b5ec427b1f (draft-ietf-ipsec-nat-t-ike-02\\n) VID=4048b7d56ebce88525e7de7f00d6c2d3 (IKE Fragmentation) VID=fb1de3cdf341b7ea16b7e5be0855f120 (MS-Negotiation Discovery Capable) VID=e3a5966a76379fe707228231e5ce8652 (IKE CGA version 1)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.008 seconds (129.87 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nFor clarity we can add the `-M` option for multi-line mode to make it easier to read.\n\n```bash\nsudo ike-scan 10.10.10.250 -M                                                                                                                                                            \nStarting ike-scan 1.9.4 with 1 hosts (http://www.nta-monitor.com/tools/ike-scan/)\n10.10.10.250    Main Mode Handshake returned\n        HDR=(CKY-R=eb5de8bbb1bcb7d6)\n        SA=(Enc=3DES Hash=SHA1 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration(4)=0x00007080)\n        VID=1e2b516905991c7d7c96fcbfb587e46100000009 (Windows-8)\n        VID=4a131c81070358455c5728f20e95452f (RFC 3947 NAT-T)\n        VID=90cb80913ebb696e086381b5ec427b1f (draft-ietf-ipsec-nat-t-ike-02\\n)\n        VID=4048b7d56ebce88525e7de7f00d6c2d3 (IKE Fragmentation)\n        VID=fb1de3cdf341b7ea16b7e5be0855f120 (MS-Negotiation Discovery Capable)\n        VID=e3a5966a76379fe707228231e5ce8652 (IKE CGA version 1)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.008 seconds (120.63 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nIf we just want to check the mode i.e. Main or Aggressive then we might want to use the `--quiet` flag to get rid of any superfluous SA information. \n\n```bash\nsudo ike-scan 10.10.10.250 --quiet\nStarting ike-scan 1.9.4 with 1 hosts ([http://www.nta-monitor.com/tools/ike-scan/](http://www.nta-monitor.com/tools/ike-scan/))\n10.10.10.250    Main Mode Handshake returned\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.007 seconds (151.15 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nIn this example we have been fortunate to be able to negotiate an SA. However on another endpoint we might not be so successful. We can use the `--trans` flag to specify values that make up a custom transform. \n\n```bash\nsudo ike-scan 10.10.10.250 -M -v --trans=5,2,1,2\nDEBUG: pkt len=84 bytes, bandwidth=56000 bps, int=16000 us\nStarting ike-scan 1.9.4 with 1 hosts ([http://www.nta-monitor.com/tools/ike-scan/](http://www.nta-monitor.com/tools/ike-scan/))\n10.10.10.250    Main Mode Handshake returned\nHDR=(CKY-R=581954ce022c82e2)\nSA=(Enc=3DES Hash=SHA1 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration(4)=0x00007080)\nVID=1e2b516905991c7d7c96fcbfb587e46100000009 (Windows-8)\nVID=4a131c81070358455c5728f20e95452f (RFC 3947 NAT-T)\nVID=90cb80913ebb696e086381b5ec427b1f (draft-ietf-ipsec-nat-t-ike-02\\n)\nVID=4048b7d56ebce88525e7de7f00d6c2d3 (IKE Fragmentation)\nVID=fb1de3cdf341b7ea16b7e5be0855f120 (MS-Negotiation Discovery Capable)\nVID=e3a5966a76379fe707228231e5ce8652 (IKE CGA version 1)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.007 seconds (135.19 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nWe can lookup the values below\n\n**Encryption Algorithm Values**\n\n1 = DES\n2 = IDEA\n3 = Blowfish\n4 = RC5\n5 = Triple DES\n6 = CAST\n7 = AES\n8 = Camellia\n\n**Hash Algorithm Values**\n\n1 = MD5\n2 = SHA1\n3 = Tiger\n4 = SHA2-256\n5 = SHA2-384\n6 = SHA2-512\n\n\n**Authentication Method Values**\n\n1\t\t= Pre-Shared Key\n2\t\t= DSS Signature\n3\t\t= RSA Signature\n4\t\t= RSA Encryption\n5\t\t= Revised RSA Encryption\n6\t\t= ElGamel Encryption\n7\t\t= Revised ElGamel Encryption\n8\t\t= ECDSA Signature\n64221\t= Hybrid Mode\n65001\t= XAUTH\n\n**Diffie-Hellman Group Values**\n\n1\t= MODP 768\n2\t= MODP 1024\n3\t= EC2N 155\n4\t= EC2N 185\n5\t= MODP 1536\n6\t= EC2N 163\n7\t= EC2N 163\n8\t= EC2N 183\n9\t= EC2N 183\n10\t= EC2N 409\n11\t= EC2N 409\n12\t= EC2N 571\n13\t= EC2N 571\n14\t= MODP 2048\n15\t= MODP 3072\n16\t= MODP 4096\n17\t= MODP 6144\n18\t= MODP 8192"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}