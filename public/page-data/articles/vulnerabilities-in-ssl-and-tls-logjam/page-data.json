{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/vulnerabilities-in-ssl-and-tls-logjam/","result":{"pageContext":{"post":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-logjam"},"excerpt":"Main Points For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the…","frontmatter":{"date":"10th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Logjam","description":"In this article we will look at the SSL Logjam vulnerability. This is a person-in-the-middle attack, similar to FREAK, that exposes Export Grade cipher suites. This time, Diffie-Hellman is used instead of RSA.","tags":"logjam, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the network traffic stream.\n- Very similar to FREAK except this time, Diffie-Hellman is used instead of RSA.\n- Diffie-Hellman key exchange is a popular cryptographic algorithm that allows Internet protocols to agree on a shared key and negotiate a secure connection. It is essential to many protocols, including HTTPS, SSH, IPsec, SMTPS, and those that rely on TLS.\n- The Logjam vulnerability allows a person-in-the-middle attacker to downgrade vulnerable TLS connections to 512-bit export-grade cryptography.\n\n## Quick Reference\n\n### Description\n\nThe SSL Logjam vulnerability allows attackers within person-in-the-middle context to exposes Export Grade cipher suites to downgrade TLS connections.\n\n### Name\n\nLogjam\n\n### CVE Number\n\nClosest thing to an official CVE number is CVE-2015-4000. \n\n### Type of Vulnerability\n\nMethod for attacking Die-Hellman (DH) key exchange\n\n### Affected\n\nThe TLS protocol 1.2 and earlier when a DHE_EXPORT cipher suite is enabled. \n\n### Remediation\n\n Disable support for export cipher suites and use a 2048-bit Diffie-Hellman group."},"prev":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-crime"},"excerpt":"Main Points The attack was discovered by security researchers Juliano Rizzo and Thai Duong, who cooked up the BEAST SSL exploit.For this…","frontmatter":{"date":"13th January 2022 ","title":"Vulnerabilities in SSL & TLS :- CRIME","description":"This article will examine CVE 2012-4929, also known as the CRIME vulnerability. To obtain plaintext HTTP headers, attackers with person-in-the-middle context can compare length differences between a string in an HTTP request and an unknown string in an HTTP header.","tags":"crime, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- The attack was discovered by security researchers Juliano Rizzo and Thai Duong, who cooked up the BEAST SSL exploit.\n- For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the network traffic stream.\n- The CRIME (Compression Ratio Info-leak Made Easy) attack is a vulnerability in SSL/TLS compression.\n- CRIME is a side-channel attack that uses the compressed size of HTTP requests to discover session tokens or other secret information.\n- The technique exploits SSL/TLS-protected web sessions when they use one of two data-compression schemes (DEFLATE and gzip) built into the protocol and used to reduce network congestion or the loading time of web pages.\n- In order to carry out the attack, the attacker must have control over the plaintext as well as the ability to intercept the encrypted message.\n- On secret web cookies transmitted over compressed HTTPS or SPDY connections, this attack exposes cookie data to session hijacking.\n- When the size of the compressed content is reduced, it can be inferred that some part of the injected content is likely to match some part of the source.\n\n## Quick Reference\n\n### Description\n\nCRIME is a vulnerability in SSL/TLS compression that allows attackers with person-in-the-middle context to compare length differences between a string in an HTTP request and an unknown string in an HTTP header.\n\n### Abbreviation\n\nCRIME \n\n### Name\n\nCompression Ratio Info-leak Made Easy\n\n### CVE Number\n\nCVE-2012-4929\n\n### Type of Vulnerability\n\nThe vulnerability is within TLS compression. \n\n### Affected\n\nTLS compression is required for the connection. The attacker requires a person-in-the-middle position, the ability to control plaintext on a website visited by the victim, and the ability to intercept encrypted messages.\n\n### Remediation\n\nDisable SSL/TLS compression to prevent the CRIME attack. CRIME can be defeated by preventing the use of compression, either at the client end, by disabling compression of SPDY requests in the browser, or by the website preventing the use of data compression on such transactions using the TLS protocol negotiation features."},"next":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-freak"},"excerpt":"Main Points In the 1990s, the US government established rules governing the strength of encryption that could be exported (\"Export keys\").…","frontmatter":{"date":"9th January 2022 ","title":"Vulnerabilities in SSL & TLS :- FREAK","description":"In this article, we will look at CVE-2015-0204, also known as the FREAK attack. This attack makes use of a person-in-the-middle position to allow end clients to communicate using RSA Export Keys, which were a form of weak strength RSA encryption keys capped at 512 bits. The US government imposed this in the 1990s to prevent the encryption from being used against them. The idea was to give protection from a modest system but not prevent the NSA from decrypting it.","tags":"freak, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- In the 1990s, the US government established rules governing the strength of encryption that could be exported (\"Export keys\").\n- In any Secure Socket Layer (SSL) implementations aimed at export, these rules limited the strength of the RSA encryption keys to a maximum of 512 bits.\n- The RSA Export keys were designed to allow exports to contain encryption that could not be broken by a typical computing resource but could be broken by the NSA.\n- For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the network traffic stream.\n- The FREAK attack necessitates a person-in-the-middle position in order to change the initial HTTP packet that is sent out when negotiating cipher use to request \"Export Keys.\"\n- The use of “Export Keys” suites was stopped, and by the year 2000, browsers could use a higher-security SSL.\n- Attack Narrative\n    1. An attacker gains a person-in-the-middle position between two computers. \n    2. Victim requests a secure connection to a webpage. The victims browser sends a \"Client Hello message\" to the server asking for typical cipher suites. \n    3. The attacker intercepts the conversation and substitutes the requested cipher suites with a request for ‘export RSA’\n    4. The server agrees and accepts the request (not understanding that it was modified). It responds with a 512-bit export RSA key.\n    5. The client accepts ‘export RSA’ (not understanding that its request was modified).\n    6. Attacker breaks weaker keys (first done by a researcher in 1999, modern cloud computing makes this much easier) and obtains information.\n\n## Quick Reference \n\n### Abbreviation\n\nFREAK \n\n### Name\n\nFactoring RSA Export Keys\n\n### CVE Number\n\nCVE-2015-0204\n\n### Type of Vulnerability\n\nThe vulnerability is in the ciphers with which the system is willing to communicate. They cannot be negotiated if the weak cipher is removed. It is a simple fix.\n\n### Affected\n\nAny system willing to negotiate RSA Export Keys. \n\n### Remediation\n\nDisable support for weak export-grade ciphers\n\n### Mediation\n\nRemove any weak ciphers from your configuration. Refuse to communicate using weak ciphers. This way the person-in-the-middle cipher negotiation cannot be modified to support RSA Export Keys."}}},"staticQueryHashes":["310218920"],"slicesMap":{}}