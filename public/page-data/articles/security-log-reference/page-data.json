{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/security-log-reference/","result":{"pageContext":{"post":{"fields":{"slug":"/security-log-reference"},"excerpt":null,"frontmatter":{"date":"17th February 2022 ","title":"Security Log Reference","description":"This article serves as a quick reference for Windows Security Log event IDs.","tags":"security-logs, windows","posttype":"article"},"body":"This article serves as a quick reference for Windows Security Log event IDs.\n\n# Windows Security Log Reference\n\nTo Open the security log run\n```\neventvwr.msc\n```\n\nThen in the console tree, expand Windows Logs, and then click Security. The results pane lists individual security events.\n\n## User Account Changes\n\n| Event ID | Description                                  |\n|----------|----------------------------------------------|\n| 4720     | Created                                      |\n| 4722     | Enabled                                      |\n| 4723     | User changed own password                    |\n| 4724     | Privileged User changed this user's password |\n| 4725     | Disabled                                     |\n| 4726     | Deleted                                      |\n| 4738     | Changed                                      |\n| 4740     | Locked out                                   |\n| 4767     | Unlocked                                     |\n| 4781     | Name change                                  |\n\n## Domain Controller Authentication Events\n\n\n| Event ID | Description                                                                                |\n|----------|--------------------------------------------------------------------------------------------|\n| 4768     | A Kerberos authentication ticket (TGT) was requested                                       |\n| 4771     | Kerberos pre-authentication failed                                                         |\n| 4820     | A Kerberos TGT was denied because the device does not meet the access control restrictions |\n\n\n## Logon Session Events (Correlate by Logon ID)\n\n| Event ID | Description                             |\n|----------|-----------------------------------------|\n| 4624     | Successful logon                        |\n| 4647     | User initiated logoff                   |\n| 4625     | Logon failure {See Logon Failure Codes) |\n| 4778     | Remote desktop session reconnected      |\n| 4779     | Remote desktop session disconnected     |\n| 4800     | Workstation locked                      |\n| 4801     | Workstation unlocked                    |\n| 4802     | Screen saver invoked                    |\n| 4803     | Screen saver dismissed                  |\n\n## Logon Types\n\n| Type ID | Description                   |\n|---------|-------------------------------|\n| 2       | Interactive                   |\n| 3       | Network (i.e. mapped drive)   |\n| 4       | Batch                         |\n| 5       | Service (service startup)     |\n| 7       | Unlock                        |\n| 8       | Network Cleartext             |\n| 10      | Remote Desktop                |\n| 11      | Logon with cached credentials |\n\n\n## Security Group Changes\n\n\n| Action         | Local | Global | Universal |\n|----------------|-------|--------|-----------|\n| Created        | 4731  | 4727   | 4754      |\n| Changed        | 4735  | 4737   | 4755      |\n| Deleted        | 4734  | 4730   | 4758      |\n| Member Added   | 4732  | 4728   | 4756      |\n| Member Removed | 4733  | 4729   | 4757      |\n\n\n## Distribution Group Changes\n\n| Action         | Local | Global | Universal |\n|----------------|-------|--------|-----------|\n| Created        | 4744  | 4749   | 4759      |\n| Changed        | 4745  | 4750   | 4760      |\n| Deleted        | 4748  | 4753   | 4763      |\n| Member Added   | 4746  | 4751   | 4761      |\n| Member Removed | 4747  | 4752   | 4762      |"},"prev":{"fields":{"slug":"/fixing-common-errors-power-shell-remoting-from-kali"},"excerpt":"Assuming you have powershell installed on Kali. // Insert link or brief description of installing PowerShell on Kali.\n\nProblem 1\n\nWhen you try…","frontmatter":{"date":"25th February 2022 ","title":"Fixing Common Errors PowerShell Remoting From Kali","description":"In this article, I will briefly explain how to fix common issues when trying to PowerShell Remote From Kalil.","tags":"error-message, kali-linux, powershell","posttype":"article"},"body":"\nAssuming you have powershell installed on Kali. \n\n// Insert link or brief description of installing PowerShell on Kali. \n\n\n\n## Problem 1\n\nWhen you try and perform PowerShell remoting the first time you will probably see the following error. \n\n\"Enter-PSSession: This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\" \n\n```\n┌──(consultant㉿pentest)-[~]\n└─$ pwsh \nPowerShell 7.1.4\nCopyright (c) Microsoft Corporation.\n\nhttps://aka.ms/powershell\nType 'help' to get help.\n\nPS /home/consultant> $cred = Get-Credential\n\nPowerShell credential request\nEnter your credentials.\nUser: Administrator\nPassword for user Administrator: *********\n\nPS /home/consultant> Enter-PSSession -ComputerName 192.168.1.235 -Credential $cred -Authentication Negotiate\nEnter-PSSession: This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\nPS /home/consultant> \n```\n\n![](86717c1c-326e-405e-a56f-4bcb1d38a049.png)\n\nThe problem here is that the library is looking for packages that do not exist. \n\n\nIn this case, our PowerShell is located in the following path `/opt/microsoft/powershell/7`\n\nif we do\n```\nldd /opt/microsoft/powershell/7/libmi.so \n\tlinux-vdso.so.1 (0x00007ffc7bbe9000)\n\tlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007ff9e2e02000)\n\tlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007ff9e2dfb000)\n\tlibpam.so.0 => /lib/x86_64-linux-gnu/libpam.so.0 (0x00007ff9e2de9000)\n\tlibssl.so.1.0.0 => not found\n\tlibcrypto.so.1.0.0 => not found\n\tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007ff9e2c0f000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007ff9e3010000)\n\tlibaudit.so.1 => /lib/x86_64-linux-gnu/libaudit.so.1 (0x00007ff9e2bdb000)\n\tlibcap-ng.so.0 => /lib/x86_64-linux-gnu/libcap-ng.so.0 (0x00007ff9e2bd3000)\n\n```\n\n\n![](adfdb756-450d-4869-a4d9-f6862bb0ba16.png)\n\nIn that directory, we need to add our symlinks:\n\n\n```\ncd /usr/lib/x86_64-linux-gnu \nsudo ln -s /usr/lib/x86_64-linux-gnu/libssl.so.1.0.2 libssl.so.1.0.0\nsudo ln -s /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.2 libcrypto.so.1.0.0\n```\n\n![](0743039e-e8ad-49d5-9d64-91588530b5f6.png)\n\nNow fixed!\n\n\n## Problem 2\n\nYou get a `MI_RESULT_ACCESS_DENIED` error message.\n```\nEnter-PSSession : MI_RESULT_ACCESS_DENIED\n```\n\nThis is probably because you missed off the `-Authentication` flag on your command\n\nCheck if you are typing in something like this\n```\nEnter-PSSession -ComputerName 192.168.1.235 -Credential $cred \n```\n\nThe solution is to use `-Authentication Negotiate`\n```\nEnter-PSSession -ComputerName 192.168.1.235 -Credential $cred -Authentication Negotiate\n```\n\n\n## Problem 3\n\nErrors with non-Kerberos authentication i.e. because you are not domain-joined\n\nIf you have seen this error when trying to connect with Negotiate because you are not domain-joined. \n\n\"Enter-PSSession: Connecting to remote server 192.168.1.235 failed with the following error message : acquiring creds with username only failed An invalid name was supplied SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\"\n\nFrom trying to type in a command such as \n```\nPS /home/consultant> Enter-PSSession -ComputerName 192.168.1.235 -Credential $cred -Authentication Negotiate\nEnter-PSSession: Connecting to remote server 192.168.1.235 failed with the following error message : acquiring creds with username only failed An invalid name was supplied SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\n```\n\n![](7a048cd7-7167-4242-9c30-710c29d5b01b.png)\n\nThis is because you need the following package installed on your kali Linux\n```\nsudo apt-get install gss-ntlmssp\n```\n\nAfter this, you should be able to connect."},"next":{"fields":{"slug":"/cloud-hacking-serverless-function-injection"},"excerpt":null,"frontmatter":{"date":"16th February 2022 ","title":"Cloud Hacking :- Serverless Function Injection","description":"In this example, we will demonstrate how to exfiltrate secrets through command injection against a serverless function. Serverless functions listen for events or triggers to be run. It is possible to inject data to these events, leading to injection vulnerabilities in serverless functions.","tags":"cloud, how-to, serverless-functions","posttype":"article"},"body":"In this example, we will demonstrate how to exfiltrate secrets through command injection against a serverless function. Serverless functions listen for events or triggers to be run. It is possible to inject data to these events, leading to injection vulnerabilities in serverless functions.\n\n##What is a function?\n\nIt is a piece of code that you can use over and over again to perform a task.\n\n##What is serverless?\n\nIn serverless architecture, you are building and running code on someone else's computer. In cloud context, the computer belongs to the cloud provider and resides on their premises. Because the computer serves your code, it is referred to as a server. The cloud provider is responsible for maintaining the server and, thus, you are left with a \"serverless\" setting.\n\n##Piecing it together - A serverless function\n\nA serverless function is a piece of code that runs on the cloud provider's computer and it can perform a task over and over again.\n\n##What are some examples of serverless functions?\n\n* AWS Lambda\n* Microsoft Azure Functions\n* Google Cloud Functions\n\nTo perform a task, the function requires an event or a trigger. These events or triggers can originate from different sources. Examples include:\n\n* HTTP APIs\n* Changes in systems like databases\n* Other alerting systems\n\n##Where does the injection come in?\n\nIn context of serverless functions, injection vulnerabilities occur when unexpected input is sent to the function. The process of sending unexpected input can be referred to as an injection attack. \n\n##Why does it work?\n\nTwo aspects come into play:\n\n1. Your ability to control variables passed to the function;\n3. Whether the server trusts your input and executes it.\n\nIn case of command injection vulnerabilities, the function should run shell or operating system commands in the background.\n\nNow that we have our foundations set up, let us demonstrate this with an easy-to-follow example.\n\n#Serverless event-data injection\n\nThis example demonstrates how to execute unwanted code via a serverless function. To do this example, you will only require a browser. We have done this example using the OWASP ServerlessGoat web application, which you can find in the below URL.\n\n* https://www.serverless-hack.me/\n\nThe application converts Doc files to text from a URL. The output is then displayed on the screen.\n\n<img src=\"/static/b576cf8f-2a9d-43b3-a1d1-3ed12f9b0f12.png\">\n\nIn case of OWASP ServerlessGoat, the injection vulnerability occurs when the Doc filename is appended with code that gets executed. \n\n##Instructions\n\n<h5 class=\"step\">Step 1 - Navigate to https://www.serverless-hack.me/</h5>\n\nThe vulnerable app resides here. You can alternatively create your own serverless functions in the cloud!\n\n<h5 class=\"step\">Step 2 - Append the filename with the command you want to execute.</h5>\n\nFor example, using a semi-comma to separate the filename from the command you want to execute will print out the environment variables:\n```\nhttps://www.puresec.io/hubfs/document.doc;env\n```\n\nThe output will display a secret (the AWS secret access key)!\n\n<img src=\"/static/96002e52-8f1b-496a-ba9c-0c4631826a30.png\">\n\nOr to output text of your choice, you can use the \"echo\" command:\n```\nhttps://www.puresec.io/hubfs/document.doc;echo \"hello\"\n```\n\nDisplayed below is \"hello\" echoed back to us.\n\n<img src=\"/static/6359b91a-fa74-45f0-b9c2-52f5b3a49fae.png\">\n\n\nTo understand why this works, you may wish to review the code used for the function:\n```\nconst child_process = require('child_process');\nconst AWS = require('aws-sdk');\nconst uuid = require('node-uuid');\n\nasync function log(event) {\n  const docClient = new AWS.DynamoDB.DocumentClient();\n  let requestid = event.requestContext.requestId;\n  let ip = event.requestContext.identity.sourceIp;\n  let documentUrl = event.queryStringParameters.document_url;\n\n  await docClient.put({\n      TableName: process.env.TABLE_NAME,\n      Item: {\n        'id': requestid,\n        'ip': ip,\n        'document_url': documentUrl\n      }\n    }\n  ).promise();\n\n}\n\nexports.handler = async (event) => {\n  try {\n    await log(event);\n\n    let documentUrl = event.queryStringParameters.document_url;\n\n    let txt = child_process.execSync(`curl --silent -L ${documentUrl} | /lib64/ld-linux-x86-64.so.2 ./bin/catdoc -`).toString();\n\n    // Lambda response max size is 6MB. The workaround is to upload result to S3 and redirect user to the file.\n    let key = uuid.v4();\n    let s3 = new AWS.S3();\n    await s3.putObject({\n      Bucket: process.env.BUCKET_NAME,\n      Key: key,\n      Body: txt,\n      ContentType: 'text/html',\n      ACL: 'public-read'\n    }).promise();\n\n    return {\n      statusCode: 302,\n      headers: {\n        \"Location\": `${process.env.BUCKET_URL}/${key}`\n      }\n    };\n  }\n  catch (err) {\n    return {\n      statusCode: 500,\n      body: err.stack\n    };\n  }\n};\n```\n\n##Well that was easy... What next?\n\nWhy not look into executing other commands or practice with creating your own serverless functions next?"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}