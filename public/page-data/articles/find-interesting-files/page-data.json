{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/find-interesting-files/","result":{"pageContext":{"post":{"fields":{"slug":"/find-interesting-files"},"excerpt":"Find SUID files find / -perm -4000 -type f 2>/dev/null\n\n\nFind SUID files owned by root\n\nfind / -uid 0 -perm -4000 -type f 2>/dev/null\n\n\nFind…","frontmatter":{"date":"29th June 2022 ","title":"Find Interesting Files","description":"A significant part of our job when searching around a target system is to look for interesting files.  Whether we have a need to look for SSH keys, Bash History files or database backups the commands typically all follow the same syntax. This article will look at using basic Linux commands to find and discover files.","tags":"enumeration, linux","posttype":"article"},"body":"\n# Finding Interesting Files\n\nFind SUID files\n\n```bash\nfind / -perm -4000 -type f 2>/dev/null\n```\n\nFind SUID files owned by root\n\n```bash\nfind / -uid 0 -perm -4000 -type f 2>/dev/null\n```\n\nFind GUID files\n\n```bash\nfind / -perm -2000 -type f 2>/dev/null\n```\n\nFind world-writeable files\n\n```bash\nfind / -perm -2 -type f 2>/dev/null\n```\n\nFind world-writeable files excluding those in /proc\n\n```bash\nfind / ! -path \"*/proc/*\" -perm -2 -type f -print 2>/dev/null\n```\n\nFind word-writeable directories\n\n```bash\nfind / -perm -2 -type d 2>/dev/null\n```\n\nFind rhost config files\n\n```bash\nfind /home –name *.rhosts -print 2>/dev/null\n```\n\nFind *.plan files, list permissions and cat the file contents\n\n```bash\nfind /home -iname *.plan -exec ls -la {} ; -exec cat {} 2>/dev/null ;\n```\n\nFind hosts.equiv, list permissions and cat the file contents\n\n```bash\nfind /etc -iname hosts.equiv -exec ls -la {} 2>/dev/null ; -exec cat {} 2>/dev/null ;\n```\n\nSee if you can access other user directories to find interesting files\n\n```bash\nls -ahlR /root/\n```\n\nShow the current users’ command history\n\n```bash\ncat ~/.bash_history\n```\n\nShow the current users’ various history files\n\n```bash\nls -la ~/.*_history\n```\n\nCan we read root’s history files\n\n```bash\nls -la /root/.*_history\n```\n\nCheck for interesting ssh files in the current users’ directory\n\n```bash\nls -la ~/.ssh/\n```\n\nFind SSH keys/host information\n\n```bash\nfind / -name \"id_dsa*\" -o -name \"id_rsa*\" -o -name \"known_hosts\" -o -name \"authorized_hosts\" -o -name \"authorized_keys\" 2>/dev/null |xargs -r ls -la\n```\n\nCheck Configuration of inetd services\n\n```bash\nls -la /usr/sbin/in.*\n```\n\nCheck log files for keywords (‘pass’ in this example) and show positive matches\n\n```bash\ngrep -l -i pass /var/log/*.log 2>/dev/null\n```\n\nList files in specified directory (/var/log)\n\n```bash\nfind /var/log -type f -exec ls -la {} ; 2>/dev/null\n```\n\nList .log files in specified directory (/var/log)\n\n```bash\nfind /var/log -name *.log -type f -exec ls -la {} ; 2>/dev/null\n```\n\nList .conf files in /etc (recursive 1 level)\n\n```bash\nfind /etc/ -maxdepth 1 -name *.conf -type f -exec ls -la {} ; 2>/dev/null\n```\n\nAs above\n\n```bash\nls -la /etc/*.conf\n```\n\nFind .conf files (recursive 4 levels) and output line number where the word ‘password’ is located\n\n```bash\nfind / -maxdepth 4 -name *.conf -type f -exec grep -Hn password {} ; 2>/dev/null\n```\n\nList open files (output will depend on account privileges)\n\n```bash\nlsof -i -n\n```\n\nCan we read roots mail\n\n```bash\nhead /var/mail/root\n```"},"prev":{"fields":{"slug":"/windows-registry"},"excerpt":"The Root Keys HKEY_CLASSES_ROOT (HKCR)HKEY_CURRENT_USER (HKCU)HKEY_LOCAL_MACHINE (HKLM)HKEY_USERS (HKU)HKEY_CURRENT_CONFIG (HKCC)\nQue…","frontmatter":{"date":"13th July 2022 ","title":"Windows Registry","description":"The Registry has been a part of Windows since Windows 3.1. Simply put, it's a database that stores Windows and programme settings. Some of those settings are quite complex and aren't meant for humans to alter or comprehend; others are simple and can be safely tweaked.","tags":"registry","posttype":"article"},"body":"\n# Registry\n\n### The Root Keys\n\n- HKEY_CLASSES_ROOT (HKCR)\n- HKEY_CURRENT_USER (HKCU)\n- HKEY_LOCAL_MACHINE (HKLM)\n- HKEY_USERS (HKU)\n- HKEY_CURRENT_CONFIG (HKCC)\n\n### Query Registry via Command Line\n\nList all\n\n```\nreg query <hive>\n```\n\nUse `/f` to search\n\n```\nreg query HKLM /f password\n```\n\nAdd `/s` to make the search recursive.\n\n```\nreg query HKLM  /s /f password\n```\n\nUse `/d` to only search in the data only.\n\n```\nreg query HKLM /d /s /f password\n```\n\n### Examples\n\nInstalled Programs\n\n```\nreg query HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall >> installed_programs.txt\n```\n\nRecursively loop through all registry keys.\n\n```\nreg query HKEY_LOCAL_MACHINE\\Software\\ \\s\n```\n\nServices\n\n```\nreg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ >> installed_services.txt\n```\n\nVNC Stored\n\n```\nreg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\"\nreg query \"HKCU\\Software\\ORL\\WinVNC4\\Password\"\n```\n\nWindows Autologin\n\n```\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\"\n```\n\nSNMP Parameters\n\n```\nreg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\"\n```\n\nRun-on Boot\n\n```\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\"\n```\n\nVNC Password\n\n```\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\RealVNC\\WinVNC4 /v password\"\n```\n\nPutty Password\n\n```\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n```\n\nPutty clear text proxy credentials:\n\n```\nreg query \"HKCU\\Software\\<user>\\PuTTY\\Sessions\"\n```\n\nCheck notification packages\n\n```\nreg query \"\\\\DC02\\HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Notification Packages\"\n```\n\nStarting with Windows 2000-based computers, the machine account password automatically changes every 30 days. Check if this has been disabled\n\n```\nreg query \"\\\\DC02\\HKLM\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters\" /v \"DisablePasswordChange\"\n```\n\nSearch for passwords inside the registry\n\n```\nreg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\nreg query HKLM /s | findstr /i password > temp.txt\nreg query HKCU /s | findstr /i password > temp.txt\n```\n\nCheck autologon\n\n```\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\"\n```\n\nSNMP Settings\n\n```\nreg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\"\n```\n\nIf BOTH registry values are set to 1, we can install a malicious MSI file.\n\n```\nreg query \"HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\" /v \"AlwaysInstallElevated\"\nreg query \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\" /v \"AlwaysInstallElevated\"\n```\n\nView the Name of the Domain Controller\n\n```\nreg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\History\" /v DCName\n```\n\nCheck Browser Proxy Settings\n\n```\nreg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Wpad\"\n```\n\nInternet Explorer History\n\n```\nreg query \"HKCU\\Software\\Microsoft\\Internet Explorer\\TypedURLs\"\n```\n\nCheck physically attached hardware.\n\n```\nreg query \"HKLM\\System\\MountedDevices\"\n```\n\nCheck recent apps\n\n```\nreg query \"HKLM\\Microsoft\\Currentversion\\Search\\RecentApps\"\n```\n\nRemotely query the registry for the last logged in user.\n\n```\nreg query \"\\\\computername\\HKLM\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\WinLogon\"\n```\n\n### Terminal Server Service\n\nCheck if enabled\n\n```\nreg query \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v \"fDenyTSConnections\"\n```\n\nEnable remote desktop.\n\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n```\n\nDisable remote assistance\n\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n```\n\nThis setting enforces the deleting of Remote Desktop Services. Command checks if set.\n\n```\nreg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v \"DeleteTempDirsOnExit\"\n```"},"next":{"fields":{"slug":"/querying-active-directory-with-power-shell"},"excerpt":"PowerShell v1: .NET & ADSI PowerShell v2 & newer: PowerShell Active Directory Module\n\nImport-module servermanager; add-windowsfeature rsat…","frontmatter":{"date":"22nd June 2022 ","title":"Querying Active Directory With PowerShell","description":"Active Directory lies at the heart of most organisations' networks. PowerShell is a versatile Scripting Language that Windows natively support. We can leverage PowerShell to enumerate Active Directory for various pieces of information crucial to our penetration tests.","tags":"active-directory, enumeration, powershell","posttype":"article"},"body":"# Active Directory Querying With PowerShell\n\nPowerShell v1: .NET & ADSI\n\nPowerShell v2 & newer: PowerShell Active Directory Module\n\n```\nImport-module servermanager; add-windowsfeature rsat-ad-tools\nImport-module servermanager; add-windowsfeature rsat-ad-PowerShell\n```\n\n### .NET\n\nExample of .NET\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers\n```\n\n### ADSI\n\n[http://www.selfadsi.org/extended-ad/search-domain-controllers.htm](http://www.selfadsi.org/extended-ad/search-domain-controllers.htm)\n\nExample of ADSI\n\n```\n$UserID = \"JoeUser\"\n$root = [ADSI]''\n$searcher = new-object System.DirectoryServices.DirectorySearcher($root)\n$searcher.filter = \"(&(objectClass=user)(sAMAccountName=$UserID))\"\n$user = $searcher.findall()\n$user\n```\n\n### Active Directory Module\n\nExample of Active Directory Module\n\n- Requires AD Web Services (ADWS) running on targeted DC (TCP 9389)\n    - (Side Note) PowerShell Remoting uses TCP 5985 (HTTP) or TCP 5986 (HTTPS)\n- SOAP XML messages over HTTP translated on DC\n\n```\nImport-Module ActiveDirectory\n$UserID = \"JoeUser\"\nGet-ADUser $UserID -Property *\n```\n\nHere are some of the more useful Active Directory Module commands\n\n```\nGet-Module -ListAvailable\nGet-Command -Module ActiveDirectory\n```\n\nServer 2008 R2\n\n```\nGet/Set-ADForest\nGet/Set-ADDomain\nGet/Set-ADDomainController\nGet/Set-ADUser\nGet/Set-ADComputer\nGet/Set-ADGroup\nGet/Set-ADGroupMember\nGet/Set-ADObject\nGet/Set-ADOrganizationalUnit\n\nEnable-ADOptionalFeature\nDisable/Enable-ADAccount\nMove-ADDirectoryServerOperationMasterRole\nNew-ADUser\nNew-ADComputer\nNew-ADGroup\nNew-ADObject\nNew-ADOrganizationalUnit\n```\n\nServer 2012+\n\n```\n*-ADResourcePropertyListMember\n*-ADAuthenticationPolicy\n*-ADAuthenticationPolicySilo\n*-ADCentralAccessPolicy\n*-ADCentralAccessRule\n*-ADResourceProperty\n*-ADResourcePropertyList\n*-ADResourcePropertyValueType\n*-ADDCCloneConfigFile\n*-ADReplicationAttributeMetadata\n*-ADReplicationConnection\n*-ADReplicationFailure\n*-ADReplicationPartnerMetadata\n*-ADReplicationQueueOperation\n*-ADReplicationSite\n*-ADReplicationSiteLink\n*-ADReplicationSiteLinkBridge\n*-ADReplicationSubnet\n*-ADReplicationUpToDatenessVectorTable\nSync-ADObject\n```\n\nA nice looking inventory of DC’s\n\n```\nGet-ADDomainController -Filter * | select hostname,IPv4Address,IsGlobalCatalog,IsReadOnly,OperatingSystem | Format-Table -auto\n```\n\n### Active Directory Drive\n\nExample of Active Directory drive\n\n```\nImort-Module ActiveDirectory\ndir ad:\nSet-Location ad:\nSet-Location \"dc=lab,dc=pentest,dc=local\"\ndir\n```\n\n### ANR\n\nANR enables you to find a user when you have some information about a user, but don’t know exactly to which attribute that data corresponds. For example, if you know the user has “Thor” somewhere, but don’t know exactly what the SAMAccountName is (or DN, SID, name, etc). Submitting an ANR search will query the AD attributes flagged for ANR (attributes must be indexed) and replies with the results (may be more than one user found).\n\nExample of ANR\n\n```\nImport-Module ActiveDirectory\nGet-ADObject -LDAPFilter {(&(ObjectClass=User)(ANR=Thor))}\n```\n\n## Active Directory Enumeration with .NET\n\nHere are some alternatives to using Get-ADForest & Get-Domain:\n\n### Get Active Directory Forest Information\n\n```\n$ADForestInfo = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()\n$ADForestInfo.Name\n$ADForestInfo.Sites\n$ADForestInfo.Domains\n$ADForestInfo.GlobalCatalogs\n$ADForestInfo.ApplicationPartitions\n$ADForestInfo.ForestMode\n$ADForestInfo.RootDomain\n$ADForestInfo.Schema\n$ADForestInfo.SchemaRoleOwner\n$ADForestInfo.NamingRoleOwner\n```\n\nOR\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Name\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Sites\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().GlobalCatalogs\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ApplicationPartitions\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ForestMode\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().RootDomain\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Schema\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().SchemaRoleOwner\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().NamingRoleOwner\n```\n\n### Get Active Directory Domain Information\n\nTarget the current (local) computer’s domain:\n\n```\n$ADDomainInfo = [System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain()\n```\n\nTarget the current user’s domain:\n\n```\n$ADDomainName = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n```\n\n```\n$ADDomainInfo.Forest\n$ADDomainInfo.DomainControllers\n$ADDomainInfo.Children\n$ADDomainInfo.DomainMode\n$ADDomainInfo.Parent\n$ADDomainInfo.PdcRoleOwner\n$ADDomainInfo.RidRoleOwner\n$ADDomainInfo.Name\n```\n\nOR\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Forest\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Children\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainMode\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Parent\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().RidRoleOwner\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Name\n```\n\n- Note: Use `[System.DirectoryServices.ActiveDirectory.Domain]::GetCOMPUTERDomain().Attribute` for the local computer’s domain info.\n\nExample:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCOMPUTERDomain().Forest\n```\n\n### Get the local computer’s site information:\n\n```\n$LocalSiteInfo = [System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite()\n$LocalSiteInfo.Name\n$LocalSiteInfo.Domains\n$LocalSiteInfo.Subnets\n$LocalSiteInfo.Servers\n$LocalSiteInfo.AdjacentSites\n$LocalSiteInfo.SiteLinks\n$LocalSiteInfo.InterSiteTopologyGenerator\n$LocalSiteInfo.Options\n$LocalSiteInfo.Location\n$LocalSiteInfo.BridgeheadServers\n$LocalSiteInfo.PreferredSmtpBridgeheadServers\n$LocalSiteInfo.PreferredRpcBridgeheadServers\n$LocalSiteInfo.IntraSiteReplicationSchedule\n```\n\nOR\n\n```\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Name\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Domains\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Subnets\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Servers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().AdjacentSites\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().SiteLinks\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().InterSiteTopologyGenerator\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Options\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Location\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().BridgeheadServers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().PreferredSmtpBridgeheadServers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().PreferredRpcBridgeheadServers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().IntraSiteReplicationSchedule\n```\n\n## Sean Metcalf Fave Enumeration Commands\n\nGet a Computer’s Site:\n\n```\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite()\n```\n\nGet a User’s Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Name\n```\n\nGet a Computer’s Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain().Name\n```\n\nList Active Directory FSMOs:\n\n```\n([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).SchemaRoleOwner\n([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).NamingRoleOwner\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).InfrastructureRoleOwner\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).PdcRoleOwner\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).RidRoleOwner\n```\n\nList All Domain Controllers in a Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers\n```\n\nGet Active Directory Domain Mode:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainMode\n```\n\nGet Trusts for current Active Directory Domain:\n\n```\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n```\n\nGet Active Directory Forest Name:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Name\n```\n\nGet a List of Sites in the Active Directory Forest:\n\n```\n[array] $ADSites = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Sites\n```\n\nGet Active Directory Forest Domains:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains\n```\n\nGet Active Directory Forest Global Catalogues:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().GlobalCatalogs\n```\n\nGet Active Directory Forest Application Partitions:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ApplicationPartitions\n```\n\nGet Active Directory Forest Mode:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ForestMode\n```\n\nGet Active Directory Forest Root Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().RootDomain\n```\n\nGet Active Directory Forest Schema DN:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Schema\n```\n\n## PowerShell Mitigations\n\nPowerShell version 5 will be out very soon and has several compelling security enhancements.\n\n### System-wide Transcripts\n\nUse group policy to have PowerShell log all system PowerShell commands and save the transcripts to a share for parsing.\n\n### Script Block Logging\n\nPowerShell logs the obfuscated code as well as the dynamically generated code that PowerShell actually executes.\n\n### Constrained PowerShell\n\nAutomatically enables PowerShell constrained mode when AppLocker policy is set to â€œAllowâ€. This limits PowerShell code execution to only core capability. The offensive PowerShell tools typically used by attackers leverage advanced PowerShell functionality disabled in Constrained Mode.\n\n### Windows 10 - Antimalware Integration\n\nWindows 10 adds Antimalware Integration which automatically passes all code PowerShell processes to an installed antimalware solution before execution. If the code is deemed as malicious it doesn’t execute. This also includes code downloaded into memory from the Internet and executed.\n\nPowerShell Security Recommendations.\n\n- Limit PowerShell Remoting (WinRM) - Limit WinRM listener scope to admin subnet & Disable PowerShell Remoting (WinRM) on DCs.\n- Audit/block PowerShell script execution via AppLocker. Once you have PowerShell v3+, Enable PowerShell Module logging (via GPO). This Enables tracking of PowerShell command usage providing capability to detect invoke-mimikatz use - just search PowerShell logs for “mimikatz”. [Note this won’t catch everything]\n- PowerShell v3+: Enable PowerShell Module logging (via GPO).\n- Leverage Metering for PowerShell usage trend analysis - JoeUser ran PowerShell on 10 computers today?\n- Track PowerShell Remoting Usage through NetFlow data OR check the PowerShell logs on clients (event ID 06) & servers (event id 400)\n- Deploy PowerShell v5 and implement system-wide transcripts"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}