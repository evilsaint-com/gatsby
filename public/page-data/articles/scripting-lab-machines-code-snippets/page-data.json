{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/scripting-lab-machines-code-snippets/","result":{"pageContext":{"post":{"fields":{"slug":"/scripting-lab-machines-code-snippets"},"excerpt":"When creating home lab machines you may have a common set of needs that you wish to apply to each one. · Enable Workplace Network Sharing…","frontmatter":{"date":"20th June 2021 ","title":"Scripting Lab Machines: Code Snippets","description":"The below is an assortment of commands I frequently use when scripting the building of Windows machines and the creation of Active Directory environments.","tags":null,"posttype":"article"},"body":"When creating home lab machines you may have a common set of needs that you wish to apply to each one. \n\n\t· Enable Workplace Network Sharing\n\t· Disable ICE Protections on Servers\n\t· Turn off Windows Defender\n\t· Disable Updates\n\nThe below assortment of commands is what I used to script the building of Windows machines and the creation of Active Directory Environments. \n\n\n## Language and Locale\n\n\nPowerShell\n```\nSet-WinUserLanguageList -LanguageList en-GB -Force\nSet-WinSystemLocale en-GB\nSet-Culture en-GB\n```\n\n## Set Power Options\n\nCMD\n```\npowercfg.exe -change -monitor-timeout-ac 0\npowercfg.exe -change -monitor-timeout-dc 0\npowercfg.exe -change -disk-timeout-ac 0\npowercfg.exe -change -disk-timeout-dc 0\npowercfg.exe -change -standby-timeout-ac 0\npowercfg.exe -change -standby-timeout-dc 0\npowercfg.exe -change -hibernate-timeout-ac 0\npowercfg.exe -change -hibernate-timeout-dc 0\n```\n\n## Firewall\n\nPowerShell\n```\nSet-NetFirewallProfile -All -Enabled False\n```\n\nCMD\n```\nnetsh firewall set opmode disable\nnetsh advfirewall set allprofiles state off\n```\n\nIf keeping the firewall on then for labs you might need to enable File and Print sharing.\n```\nnetsh firewall set service type=fileandprint mode=enable profile=\"ALL\"\n```\n\n\n\n## Turn off Shutdown Events\n\n\nPowershell\n```\nSet-ItemProperty -Path \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Reliability\" -Name \"ShutdownReasonOn\" -Value 0\nSet-ItemProperty -Path \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Reliability\" -Name \"ShutdownReasonUI\" -Value 0\n```\n\nCMD\n```\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Reliability\" /v ShutdownReasonOn /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Reliability\" /v ShutdownReasonUI /t REG_DWORD /d 0 /f\n```\n\n## Turn off Windows Updates (On Desktop)\n\n\nPowerShell\n```\nSet-ItemProperty -Path \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" -Name \"AUOptions\" -Value 1\nSet-ItemProperty -Path \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\" -Name \"AUOptions\" -Value 1\n```\n\nCMD (Windows 10)\n```\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AUOptions /t REG_DWORD /d 1 /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\" /v AUOptions /t REG_DWORD /d 1 /f\n```\n\nOn Windows 10 builds I sometimes also need to do the following\n```\nnet stop wuauserv\nnet stop bits\nnet stop dosvc\n```\n\n## Disable Screen Saving (On Desktop)\n\nPowerShell\n```\nSet-ItemProperty -Path \"HKCU\\Software\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\" -Name \"ScreenSaveActive\" -Value 0\n```\n\nCMD\n```\nreg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 0 /f\n```\n\n## Stop Windows Defender\n\nPowerShell\n```\nStop-Service -Name WinDefend\nRemove-WindowsFeature Windows-Defender\n```\n\n## Enable RDP\n\nPowerShell\n```\nSet-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server'-name \"fDenyTSConnections\" -Value 0 \nSet-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"UserAuthentication\" -Value 1\n```\n\nCMD\n```\nnetsh advfirewall firewall set rule name=\"Remote Desktop - User Mode (TCP-In)\" new enable =Yes profile=\"domain,private,public\"\nnetsh advfirewall firewall set rule name=\"Remote Desktop - User Mode (UDP-In)\" new enable =Yes profile=\"domain,private,public\"\n```\n\n## Turn Off IE Enhanced Security (Servers)\n\nPowerShell\n```\nSet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}\" -Name \"IsInstalled\" -Value 0\nStop-Process -Name Explorer\n```\n\n## Activate Administrator Account and Set Password\n\n\nCMD\n```\nnet user Administrator /active:yes\nnet user Administrator Passw0rd!\n```\n\n## Rename Computer Hostname \n\nPowerShell\n```\n$ComputerInfo = Get-WmiObject -Class Win32_ComputerSystem\n$ComputerInfo.Rename($mchname)\n```\n\nCMD\n```\nRename-Computer -NewName $hostname\n```"},"prev":{"fields":{"slug":"/f-fmpeg-cheat-sheet"},"excerpt":"apt-get install ffmpeg Minimal example: transcode from MP3 to WMA:\n\nffmpeg -i input.mp3 output.wma\n\n\nYou can get the list of supported…","frontmatter":{"date":"2nd July 2021 ","title":"FFmpeg Cheat Sheet","description":"A handy cheat sheet of commands for the text line utility `ffmpeg`.","tags":"cheat-sheet, ffmpeg, mp3, wav, wma","posttype":"article"},"body":"# Installing FFMpeg\n\n```\napt-get install ffmpeg\n```\n\n\n# Converting Audio into Different Formats / Sample Rates\n\nMinimal example: transcode from MP3 to WMA:\n```\nffmpeg -i input.mp3 output.wma\n```\n\nYou can get the list of supported formats with:\n```\nffmpeg -formats\n```\n\nYou can get the list of installed codecs with:\n```\nffmpeg -codecs\n```\n\nConvert WAV to MP3, mix down to mono (use one audio channel), set bit rate to 64 kbps and  sample rate to 22050 Hz:\n```\nffmpeg -i input.wav -ac 1 -ab 64000 -ar 22050 output.mp3\n```\n\nConvert any MP3 file to WAV 16khz mono 16bit:\n```\nffmpeg -i 111.mp3 -acodec pcm_s16le -ac 1 -ar 16000 out.wav\n```\n\nConvert any MP3 file to WAV 20khz mono 16bit for ADDAC WAV Player:\n```\nffmpeg -i 111.mp3 -acodec pcm_s16le -ac 1 -ar 22050 out.wav\n```\n\n**cd into dir for the batch process:**\n```\nfor i in *.mp3; do ffmpeg -i \"$i\" -acodec pcm_s16le -ac 1 -ar 22050 \"${i%.mp3}-encoded.wav\"; done\n```\n\nPicking the 30 seconds fragment at an offset of 1 minute\n```\nffmpeg -i input.mp3 -ss 60 -t 30 output.wav\n```\n\nIn HH:MM:SS format\n```\nffmpeg -i input.mp3 -ss 0:01:00 -t 0:00:30 output.wav\n```\n\nSplit an audio stream at a specified segment rate (e.g. 3 seconds)\n```\nffmpeg -i somefile.mp3 -f segment -segment_time 3 -c copy out%03d.mp3\n```\n\n# Extract Audio\n\n`-vn` signals no video. `-acodec copy`  says to use the same audio stream that's already in there.\n```\nffmpeg -i input-video.avi -vn -acodec copy output-audio.aac \n```\n\nThe `-i` option is the input file/path. The `-f` specifies the format (in this case mp3 and the `-ab 192000` tells FFmpeg that we want the output to be encoded at 192Kbps, and as we learnt the last example `-vn` means we do not want video. \n```\nffmpeg -i video.mp4 -f mp3 -ab 192000 -vn music.mp3\n```\n\n# Replace Audio on a Video without re-encoding.\n\n**Preferred method**\n```\nffmpeg -i INPUT.mp4 -i AUDIO.wav -shortest -c:v copy -c:a aac -b:a 256k OUTPUT.mp4\n```\n\nStrip audio stream away from the video.\n```\nffmpeg -i INPUT.mp4 -codec copy -an OUTPUT.mp4\n```\n\nCombine the two streams (new audio with originally existing video).\n```\nffmpeg -i 36.MOV -i 36.wav -map 0:v -map 1:a -c copy -y 36-encoded.mov\n```\n\nOr add an offset to audio.\n```\nffmpeg -i 36.MOV -itsoffset -0.25 -i 36.wav -map 0:v -map 1:a -c copy -y 36-encoded.mov\n```\n\n> We can leave the audio format detection up to FFmpeg?\n\nTo convert one file:\n```\n ffmpeg -i videofile.mp4 -vn -acodec libvorbis audiofile.ogg \n```\n\nTo convert many files:\n```\n for vid in *.mp4; do ffmpeg -i \"$vid\" -vn -acodec libvorbis \"${vid%.mp4}.ogg\"; done \n```\n\nYou can, of course, select any FFmpeg parameters for audio encoding that you like, set things like bitrate, etc.\n\nUse ``` -acodec libmp3lame ```  and change the extension from ```.ogg``` to ```.mp3``` for mp3 encoding.\n\nIf you want to extract the audio, you can \"copy\" the audio track to a file using -acodec copy. Of course, the main difference is that transcoding is slow and CPU-intensive, while copying is speedy as you're just moving bytes from one file to another. Here's how to copy just the audio track (assuming it's in mp3 format):\n```\n ffmpeg -i videofile.mp4 -vn -acodec copy audiofile.mp3 \n```\n\nNote that in this case, the audio file format has to be consistent with what the container has (i.e. if the audio is AAC format, you have to say audiofile.aac). You can use the `ffprobe` command to see which formats you have; this may provide some information:\n```\n for file in *; do ffprobe $file 2>&1 |grep Audio; done \n```\n\nA possible way to automatically parse the audio codec and name the audio file accordingly would be\n```\n for file in *mp4 *avi; do ffmpeg -i \"$file\" -vn -acodec copy \"$file\".```ffprobe \"$file\" 2>&1 |sed -rn 's/.*Audio: (...), .*/\\1/p'```; done \n```\n\nNote that this command uses `sed` to parse output from `ffprobe` for each file. It assumes a 3-letter audio codec such as mp3, ogg or aac for example and will break if given anything different.\n\n\n# Encoding multiple files\n\nYou can use a Bash \"for loop\" to encode all files in a directory:\n```\nmkdir newfiles\nfor f in *.m4a; do ffmpeg -i \"$f\" -codec:v copy -codec:a libmp3lame -q:a 2 newfiles/\"${f%.m4a}.mp3\"; done\n```\n\nm4a to mp3 conversion with FFmpeg and lame\n```\nffmpeg -i input.m4a -acodec libmp3lame -ab 128k output.mp3\n``` \n\nA batch file version of the same command would be:\n```\nfor f in *.m4a; do ffmpeg -i \"$f\" -acodec libmp3lame -ab 256k \"${f%.m4a}.mp3\"; done\n```\n\n# Extract Single Image from a Video at Specified Frame\n\n```\nvf [ss][filename][outputFileName]\n```\n\nwhere `vf` is a custom bash script as follows:\n\n```\nffmpeg -ss $1 -i $2 -qmin 1 -q:v 1 -qscale:v 2 -frames:v 1 -huffman optimal $3.jpg\n```\n\nss offset = frame number divided by FPS of video = the decimal (in milliseconds) ffmpeg needs i.e. 130.5\n\n# Merge Multiple Videos\n\nConcatenate multiple files. \n```\ncat myvideos.txt\nfile '/path/to/file1'\nfile '/path/to/file2'\nfile '/path/to/file3'\n\n$ ffmpeg -f concat -safe 0 -i myvideos.txt -c copy output.mp4\n```\n\n# Split a Video into Images\n\n```\nffmpeg -i video.flv image%d.jpg\n```\n\n# Convert Images into a Video\n\n```\nffmpeg -f image2 -i image%d.jpg imagestovideo.mp4\n```\n\n```\nffmpeg -i image-%03d.png -c:v libx264 -pix_fmt yuv420p test.mp4\n```\n\n```\nffmpeg -r 1/5 -i image-%03d.png -c:v libx264 -vf fps=25 -pix_fmt yuv420p test.mp4\n```\n\n# Convert Single Image into a Video\n\n```\nffmpeg -loop 1 -i image.png -c:v libx264 -t 60 -pix_fmt yuv420p -vf scale=1920:1080 out.mp4\n```\n\n# Convert non-sequentially named Images in a directory \n\n```\nffmpeg -framerate 30 -pattern_type glob -i '*.jpeg' -c:v libx264 -pix_fmt yuv420p gan-1.mov\n```\n\n# Convert image sequence of many different sizes and conform to specific frame size\n\n```\nffmpeg -i image-%04d.jpg -c:v libx264 -pix_fmt yuv420p -vf \"scale=max(1280\\,a*720):max(1280\\,720/a),crop=1280:720\" test.mp4\n```\n\n# Guarantee aspect ratio from the image sequence\n\n```\nffmpeg -i image-%04d.jpg -c:v libx264 -pix_fmt yuv420p -vf \"scale=720:-2\" test.mp4\n```\n\n# Evaluate which ratio to apply for scaling, then scale with the requisite amount of padding\n\n```\nffmpeg -i image-%04d.jpg -c:v libx264 -pix_fmt yuv420p -vf \"scale=iw*min(1280/iw\\,720/ih):ih*min(1280/iw\\,720/ih), pad=1280:720:(1280-iw*min(1280/iw\\,720/ih))/2:(720-ih*min(1280/iw\\,720/ih))/2\" test.mp4\n```\n\n1920 version\n```\nffmpeg -i image-%04d.jpg -c:v libx264 -pix_fmt yuv420p -vf \"scale=iw*min(1920/iw\\,1080/ih):ih*min(1920/iw\\,1080/ih), pad=1920:1080:(1920-iw*min(1920/iw\\,1080/ih))/2:(1080-ih*min(1920/iw\\,1080/ih))/2\" test.mp4\n```\n\n# Convert .mov (JPEG-A or other codec) to H264 .mp4\n\n```\nffmpeg -i input.mov -vcodec libx264 -pix_fmt yuv420p output.mp4\n```\n\n# Simple FLAC convert\n\n```\nffmpeg -i audio.xxx -c:a flac audio.flac\n```\n\n# Mix Stereo to Mono\n\nYou can modify a video file directly without having to re-encode the video stream. However, the audio stream will need to encoded again.\n\n> If you want to use the right channel, write `0.1.1` instead of `0.1.0.`\n\nLeft channel to mono:\n```\nffmpeg -i video.mp4 -map_channel 0.1.0 -c:v copy mono.mp4\n```\n\nLeft channel to stereo:\n```\nffmpeg -i video.mp4 -map_channel 0.1.0 -map_channel 0.1.0 -c:v copy stereo.mp4\n```\n\n# Trim End of a File (mp3)\n\nThis command will slice up to 30 seconds without transcoding:\n```\nffmpeg -t 30 -i inputfile.mp3 -acodec copy outputfile.mp3\n```\n\n# To Encode or Re-encode?\n\nDo you need to cut video with re-encoding or without re-encoding mode? You can try the following command.\nSynopsis: ffmpeg -i [input_file] -ss [start_seconds] -t [duration_seconds] [output_file]\n\n### use FFmpeg cut mp4 video without re-encoding\n\nExample:\n\n```\nffmpeg -i source.mp4 -ss 00:00:05 -t 00:00:10 -c copy cut_video.mp4\n```\n\n### use FFmpeg cut mp4 video with re-encoding\n\nIf you want to cut off section from the beginning, drop `-t 00:00:10` from the command\n```\nffmpeg -i source.mp4 -ss 00:00:05 -t 00:00:10 -async 1 -strict -2 cut_video.mp4\n```\n\n### reduce filesize\n\nExample:\n\nThis command reported very little change in video quality and reductions of 90% of the filesize.\n```\nffmpeg -i input.mov -vcodec libx264 -crf 24 output.mp4\n```\n\nMake a grayscale version and scale to 640x480.\n```\nffmpeg -i video.mov -vf eq=saturation=0 -s 640x480 -c:v libx264 -crf 24 output.mp4\n```\n\n## Convert MP4 to WEBM\n\n```\nffmpeg -i input.mp4 -c:v libvpx-vp9 -crf 31 -b:v 1M output.webm\n```\n[more info](http://trac.ffmpeg.org/wiki/Encode/VP9)\n\n## Convert MKV to MP4\n\n```\nffmpeg -i file.mkv\n```\n\nCheck for streams that you want (video/audio). be sure to convert/specify DTS 6 channel audio stream\n```\nffmpeg -i input.mkv -strict experimental -map 0:0 -map 0:1 -c:v copy -c:a:1 libmp3lame -b:a 192k -ac 6 output.mp4\n```\n\n## Add Watermark overlay (png) to the centre of a video\n\n```\nffmpeg -i source.mov -i watermark.png -filter_complex \"overlay=x=(main_w-overlay_w)/2:y=(main_h-overlay_h)/2\" output.mp4\n```\n\n## Reverse a video\n\n```\nffmpeg -i vid.mp4 -vf reverse reversed.mp4\n```\n\n\n## Concat a video with a reversed copy of itself for ping-pong looping effect\n\n```\nffmpeg -i input.mp4 -filter_complex \"[0:v]reverse,fifo[r];[0:v][r] concat=n=2:v=1 [v]\" -map \"[v]\" output.mp4\n```"},"next":{"fields":{"slug":"/a-perfect-box-in-the-cloud"},"excerpt":"Vultr choco install -y git\nchoco install -y notepadplusplus.install\nchoco install -y pycharm\nchoco install -y xampp-80\nchoco install -y…","frontmatter":{"date":"19th June 2021 ","title":"A Perfect Box In The Cloud","description":"During a recent period where I had to relocate a lot of my digital estate, I found myself without a powerful core machine capable of managing multiple projects. This led me down a path in which I experienced the pros and cons of working in the cloud and in this article I will talk about my journey to find the perfect platform for me to work on","tags":"vultr","posttype":"article"},"body":"\n## Vultr\n\n```\nchoco install -y git\nchoco install -y notepadplusplus.install\nchoco install -y pycharm\nchoco install -y xampp-80\nchoco install -y wireshark\nchoco install -y chromium\nchoco install -y visualstudio2019community\nchoco install -y microsoft-edge\nchoco install -y grammarly-edge\nchoco install -y selenium-all-drivers\nchoco install -y python3\nchoco install -y sysinternals\nchoco install -y dogtail.dotnet3.5sp1\nchoco install -y netfx-4.5.2-devpack\nchoco install -y vscode\nchoco install -y vscode-python\nchoco install -y vscode-ansible\nchoco install -y vscode-docker\nchoco install -y windowdetective\nchoco install -y terraform\nchoco install -y windbg\nchoco install -y rsat\nchoco install -y dnspy\nchoco install -y markdownmonster\nchoco install -y unxutils\nchoco install -y 7zip\nchoco install -y clipx\nchoco install -y putty\nchoco install -y putty-ng\nchoco install -y winrar\nchoco install -y vscode-csharp\nchoco install -y bitvise-ssh-server\nchoco install -y ssh-copy-id\nchoco install -y puttytray\nchoco install -y mingw\nchoco install -y autoit\nchoco install -y powershelluniversal\nchoco install -y dropit.portable\nchoco install -y mousecontroller\nchoco install -y phraseexpress.portable\nchoco install -y eventghost\nchoco install -y clipboardfusion\nchoco install -y tinytask\nchoco install -y big-stretch-reminder\nchoco install -y stretchly\nchoco install -y toggl\nchoco install -y pomotime\nchoco install -y launchy\nchoco install -y everything\nchoco install -y freeter\nchoco install -y docker-machine\nchoco install -y docker-compose\nchoco install -y docker-cli\nchoco install -y openvpn\nchoco install -y ruby\nchoco install -y golang\nchoco install -y powergui\nchoco install -y conemu\nchoco install -y powershell\nchoco install -y powershell-core\nchoco install -y sublimetext3.app\nchoco install -y wsl\nchoco install -y wsl-alpine\nchoco install -y wsl-debiangnulinux\nchoco install -y wsl-ubuntu-1804\nchoco install -y wsl-kalilinux\n```"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}