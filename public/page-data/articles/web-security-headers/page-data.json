{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/web-security-headers/","result":{"pageContext":{"post":{"fields":{"slug":"/web-security-headers"},"excerpt":null,"frontmatter":{"date":"2nd January 2022 ","title":"Web Security Headers","description":"Web application security headers can make a big difference in reducing the attack surface of a clients application. Knowing the differences is an essential part of a consultants repertoire.","tags":"browsers, content-security-policy, csp, hsts, security-headers, strict-transport-security, x-content-type-options, x-frame-options","posttype":"article"},"body":"HTTP Headers are typically easy to implement and can significantly increase the security of your website and help prevent security vulnerabilities like Cross-Site Scripting, Clickjacking, Information disclosure and more. In this article, we are concerned chiefly with five security headers that can be implemented to improve the security posture of your website.\n\n- X Frames Options\n    - X-Frames-Options\n- XSS Protection\n    - *X-XSS-Protection*\n- X Content-Type Options\n    - *X-Content-Type-Options*\n- Strict Transport Security Header (HSTS)\n    - *Strict-Transport-Security*\n- Content Security Policy (CSP)\n    - *Content-Security-Policy*\n\nWhile these headers are certainly not in order of importance, I have purposely left Security Headers with more discussion points until later in this article.\n\nA quick word on setting headers. While the exact location of a webservers domain configuration file can be customised, it is quite common for the Nginx and Apache Configuration files to be at the following locations named typically after the web domain name or utilising the default configuration example. If your website was `something.com`, then check for a file called `something.com.conf` or potentially `default.conf` if the default template file was used.\n\n- /etc/apache2/sites-enabled/<website name|default>.conf\n- /etc/nginx/sites-enabled/<website name|default>.conf file:\n\n## X Frames Options - X-Frames-Options\n\nThe X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a `<frame>`, `<iframe>`, `<embed>` or `<object>`. Sites can use this to avoid clickjacking attacks by ensuring that their content is not embedded into other sites.\n\nThere are three ways to configure X-Frame-Options:\n\n**DENY:** This will disable iframe features altogether.\n\n**SAMEORIGIN:** iframe can be used only by someone of the same origin.\n\n**ALLOW-FROM:** This will allow pages to be put in iframes only from specific URLs.\n\nNginx\n\n```bash\nadd_header X-Frame-Options \"SAMEORIGIN\";\n```\n\nApache\n\n```bash\nHeader always set X-Frame-Options \"SAMEORIGIN\"\n```\n\n## XSS Protection - *X-XSS-Protection*\n\nThe XSS Protection header is an older security header that enables cross-site scripting protection in Internet Explorer, Chrome and Firefox. Although this functionality is now provided by CSP, which allows us to block inline JavaScript, the header can still provide protection when used with older browsers that do not support the Content Security Policy header.\n\nYou can implement XSS protection using the three options depending on the specific need.\n\n**X-XSS-Protection: 0**: This will disable the filter entirely.\n\n**X-XSS-Protection: 1**: This will enable the filter but only sanitizes potentially malicious scripts.\n\n**X-XSS-Protection: 1; mode=block**: This will enable the filter and completely blocks the page.\n\nNginx\n\n```bash\nadd_header X-XSS-Protection \"1; mode=block\";\n```\n\nApache\n\n```bash\nHeader set X-XSS-Protection \"1; mode=block\"\n```\n\n## X Content-Type Options - X-Content-Type-Options\n\nThis header tells the browser that the Multipurpose Internet Mail Extensions (MIME) types advertised in the Content-Type header should be followed. This header was first introduced by Microsoft to prevent MIME sniffing.\n\nMIME sniffing is where a browser looks at the contents of a given resource and attempts to detect the MIME type. An attack vector can open up if an attacker can control the content of a resource or upload a new resource to a website, and this Security Header is not advertised in the resource response. The attacker might make non-executable content appear to be executable content and trick the browser into executing it in the victim's browser.\n\nNginx\n\n```bash\nadd_header X-Content-Type-Options \"nosniff\"\n```\n\nApache\n\n```bash\nHeader set X-Content-Type-Options \"nosniff\"\n```\n\n## Strict Transport Security Header (HSTS) - *Strict-Transport-Security*\n\nThe first header for discussion is the Strict Transport Security Header (HSTS). The HSTS forces web browsers or clients to communicate with servers but only through HTTPS connections. HSTS ensures that connections only use HTTPS and prevent man in the middle, downgrade, and cookie hijacking attacks. HSTS is a trust on first use (sometimes abbreviated as TOFU), meaning it must send at least one insecure connection over HTTP to the host to transfer the security header.\n\nThe HSTS preload list is an effort to provide browsers with a list of sites that support HSTS to avoid this initial, insecure connection. However, suppose a site is not on the list but uses the 'strict-transport-security' header; after the initial exchange, the browser will only request access to the website over Transport Layer Security (TLS).\n\nNginx\n\n```bash\nadd_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';\n```\n\nApache\n\n```bash\nHeader set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n```\n\n## Content Security Policy (CSP) - *Content-Security-Policy*\n\nContent Security Policy, sometimes abbreviated as CSP, is a security header that helps mitigate the risk of certain types of data injection attacks such as cross-site scripting. CSP allows website administrators to eliminate or mitigate cross-site scripting by defining a policy that stipulates what locations browsers should trust and allows script execution. The Content Security Policy header is sometimes referred to as a poor man's Web Application Firewall (WAF).\n\nThis header is set in HTTP response when an HTML document is requested by a user. Content Security Policy enables the website to list precisely which domains the HTML document can load scripts from. Browsers then deny requests for scripts from any other servers.\n\nThe architecture of this policy allows sites to safelist only servers containing resources they need, such as CDNs and plugins. As a result, if an attacker successfully gets a page to request a script through a cross-site scripting attack, the browser will refuse to load the script because the origin isn't on the safelist.\n\nIn addition to disallowing non-whitelisted sites, a site that implements the Content Security Policy header no longer supports inline JavaScript. This means that sites must remove code within script tags in an HTML file, JavaScript URLs, and inline event handlers and handle those tasks using script files instead.\n\nAs an ultimate form of protection, sites that want to never allow scripts to be executed can opt to globally disallow script execution. In addition to restricting the domains from which content can be loaded, the server can specify which protocols were allowed. So, for example, a server can specify that all content must be loaded using HTTPS.\n\nHowever, it should be noted that as part of a defence in depth approach, all cookies should be marked with a secure flag to ensure that they can't be transmitted over HTTP.\n\nNginx\n\n```bash\nadd_header Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *\";\n```\n\nApache\n\n```bash\nHeader always set Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;\"\n```"},"prev":{"fields":{"slug":"/ip-sec-introduction"},"excerpt":null,"frontmatter":{"date":"3rd January 2022 ","title":"IP Sec - Introduction","description":"This is a two part article that will go over the fundamentals of IPSec. We will start with a background of IPSec, and take a look at configuring an IPSec tunnel. Then we will run the pentest tool ike-scan against our configured IPSec tunnel and collect and analyse traffic in wireshark.","tags":"ike, isakmp","posttype":"article"},"body":"<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/8b11686c-7367-4f73-9278-6d8b142cf1f5.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">IPSec Overview</figcaption></figure>\n\nIPSec is a framework of open standards. The benefit of being a framework is that if one component gets superseded, it can be replaced, or additional items can be added. The suite of protocols that make up IPSec allows secure, encrypted communication between two computers.\n\nUses of IPsec\n\n- Authenticating and encrypting host-to-host traffic.\n- Authenticating and encrypting traffic to specific servers.\n- Using L2TP/IPsec for VPN connections.\n- Site-to-site tunneling.\n- Enforcing logical networks.\n\n## Overview\n\nIPSec was designed to provide security options and enhancements to Internet Protocol (IP) and negate Internet Protocol weaknesses.\n\nIPsec provided the following security.\n\n- Authentication - IP spoofing and packet source forgery issues.\n- Data Integrity - Modification of data within IP packets.\n- Anti-replay - Replaying packet attacks.\n- Data Confidentiality - Prevent packet sniffing attacks.\n\nIPSec consists of three core components. IKE, ESP and AH.\n\n**Internet Key Exchange (IKE)** is a network security Protocol designed to allow two devices to dynamically exchange Encryption Keys and negotiate Security Associations (SA). Internet Key Exchange (IKE) Security Associations (SA) can be established dynamically and removed after a negotiated period.\n\n**Encapsulating Security Payload (ESP)** provides IPSec data integrity, encryption, authentication, and anti-replay functions. ESP authenticates the data within the VPN, ensuring the integrity of the data and that it is coming from the correct source. Encapsulating Security Payload can provide encryption via two modes. Transport mode and Tunnel mode. In transport mode, the payload is encrypted, and in tunnel mode, the entire packet is encrypted.\n\n**Authentication Header (AH)** provides data integrity, authentication, and anti-replay functions for IPSec. Authentication Header (AH) does not, however, provide any data encryption. Authentication Header (AH) is used to provide data integrity services to ensure that no data tampering has occurred during transmission.\n\nSo just to run that back again, the authentication header (AH) is concerned with ensuring that packets get delivered and maintain their integrity. It will block against replay attacks and make sure data has not been modified; however, it does not encrypt. Encapsulating Security Payload (if used) encapsulates and encrypts the IP datagrams to protect them from sniffing attacks in addition to what AH does alone.\n\n<aside>\n💡 Why would we ever use AH if ESP does everything? In short, when overhead and packet size becomes issues. ESP encapsulates packets with much overhead.\n\n</aside>\n\n## A look at IKE and ISAKMP\n\nIKE or Internet Key Exchange protocol is a protocol that sets up Security Associations (SAs) in the IPSec protocol suite.\n\nInternet Key Exchange (IKE) is a hybrid protocol that consists of 3 protocols.\n\n- ISAKMP: It is not a key exchange protocol per se. It is a framework on which key exchange protocols operate.\n- Oakley: Describes the \"modes\" of key exchange (e.g. perfect forward secrecy for keys, identity protection, and authentication)\n- SKEME: Provides support for public-key-based Key exchange, key distribution centres, and manual installation. It also outlines methods of secure and fast key refreshment.\n\nIn many texts, the terms IKE and ISAKMP are used interchangeably, which often confuses people in picking up this topic. Although we have briefly touched on their relationship, let us clarify the difference between IKE and ISAKMP.\n\nInternet Security Association Key Management Protocol (ISAKMP) is a framework for authentication and key exchange between two peers to establish, modify, and tear down SAs. It is designed to support many different kinds of key exchanges, not just IKE. ISAKMP uses UDP port 500 for communication between peers and is why port 500 is commonly associated with IPSec VPN.\n\nIKE is the implementation of ISAKMP using the Oakley and Skeme key exchange techniques. Oakley provides perfect forward secrecy (PFS) for keys, identity protection, and authentication; Skeme provides anonymity, reputability, and quick key refreshment.\n\nThink of ISAKMP as a framework, and IKE is an implementation of ISAKMP using the Oakley and Skeme key exchange techniques. Oakley provides perfect forward secrecy (PFS) for keys, identity protection, and authentication; Skeme provides anonymity, reputability, and quick key refreshment.\n\nEstablishing an IPSec tunnel requires two IKE phases.\n\n## IKE Phases\n\nIPsec VPNs are negotiated in phases\n\n- Successful Phase I negotiation results in an IKE Security Association (SA)\n- Successful Phase II negotiation results in two separate IPsec SAs for the directions in and out.\n- Phase II or (Quick Mode) happens through the Phase I tunnel.\n\n### Phase I\n\n- This Phase is where the IKE SA (Internet Key Exchange Security Association) is negotiated. This Phase can be performed in one of two Modes: Main (MM) or Aggressive (AM)\n\n### Phase II\n\n- This Phase is where the IPSec SA is negotiated. The IPSec tunnel (also called the IKE Phase II tunnel) build is complete when this Phase is completed. This Phase only has one mode called Quick Mode.\n\n## IPSec Implementation\n\nMost IPsec implementations use the Internet Key Exchange (IKE) service. Some older IPsec implementations use manual keying (Which involves exchanging encryption and authentication keys in advance), but this is now considered obsolete. As discussed briefly in the introduction, the Internet Key Exchange (IKE) protocol is used to negotiate the cryptographic algorithm choices and generate the associated keys. The Authentication Header (AH) and Encapsulating Security Payload (ESP) then use these choices.\n\nThe Internet Security Association and Key Management Protocol (ISAKMP) provides the framework for establishing SAs. A security association (SA) is a logical connection involving two devices that transfer data. With the help of the defined IPsec protocols, SAs offer data protection for unidirectional traffic. Generally, an IPsec tunnel features two unidirectional SAs, which offer a secure, full-duplex channel for data.\n\nA security association consists of parameters I remember as HAGLE:\n\nH = Hash Algorithm\n\nA = Authentication Method\n\nG = Group Number\n\nL = Lifetime Value\n\nE = Encryption\n\nBoth sides store the SA parameters in their security Association database when complete, sometimes referenced as SAD."},"next":{"fields":{"slug":"/advanced-phishing-tactics"},"excerpt":"","frontmatter":{"date":"17th August 2021 ","title":"Advanced Phishing Tactics","description":"This is the article summary at the top.","tags":"red-teaming","posttype":"article"},"body":""}}},"staticQueryHashes":["310218920"],"slicesMap":{}}