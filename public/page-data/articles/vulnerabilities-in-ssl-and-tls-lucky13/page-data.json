{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/vulnerabilities-in-ssl-and-tls-lucky13/","result":{"pageContext":{"post":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-lucky13"},"excerpt":"Main Points The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic…","frontmatter":{"date":"21st January 2022 ","title":"Vulnerabilities in SSL & TLS :- Lucky13","description":"In this article, we will look at CVE-2013-0169, also known as the Lucky 13 vulnerability, which exists within SSL and TLS. The TLS protocols 1.1 and 1.2, as well as the DTLS protocols 1.0 and 1.2, do not properly consider timing side-channel attacks when processing malformed CBC padding, allowing remote attackers to conduct plaintext-recovery.","tags":"lucky13, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- First reported by the Information Security Group at Royal Holloway, University of London.\n- TLS headers contain 13 bytes of data for the secure handshake protocol, which can be exploited.\n- When processing malformed CBC padding, the TLS protocols 1.1 and 1.2, as well as the DTLS protocols 1.0 and 1.2, as used in OpenSSL, OpenJDK, PolarSSL, and other products, do not properly consider timing side-channel attacks on a MAC check requirement, allowing remote attackers to conduct distinguishing attacks and plaintext recovery via statistical analysis of timing data for crafted packets.\n- To have enough data to attack, you need to collect several days' worth of packets and traffic via a person-in-the-middle attack. This is why Lucky 13 is a theoretically possible attack vector.\n\n## Quick Reference\n\n### Description\n\nThe TLS protocols 1.1 and 1.2, as well as the DTLS protocols 1.0 and 1.2, do not properly consider timing side-channel attacks when processing malformed CBC padding, allowing remote attackers to conduct plaintext-recovery.\n\n### Name\n\nLucky13 \n\n### CVE Number\n\nCVE-2013-0169\n\n### Type of Vulnerability\n\nWeakness in SSL and TLS themselves and not in a particular implementation of them.\n\n### Affected\n\nThe TLS protocols 1.1 and 1.2 and the DTLS protocols 1.0 and 1.2, as used in OpenSSL, OpenJDK, PolarSSL, and other products.\n\n### Remediation\n\nAvoid CBC mode cipher-suites (use AEAD cipher-suites).\n\nUse Encrypt-then-MAC TLS extension."},"prev":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-tls-renegotiation"},"excerpt":"Main Points SSL/TLS client-initiated renegotiation is a feature that allows the client to renegotiate new encryption parameters for an SSL…","frontmatter":{"date":"23rd January 2022 ","title":"Vulnerabilities in SSL & TLS :- TLS  Renegotiation","description":"In this article, we will look at the TLS Renegotiation Vulnerability in the SSL and TLS protocols. This is a plaintext injection attack into previously sent packets. TLS and SSL 3.0 do not correctly associate renegotiation handshakes with existing connections. This allows a person-in-the-middle positioned attacker to insert data into a HTTPS session.","tags":"insecure-tls-renegotiation, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- SSL/TLS client-initiated renegotiation is a feature that allows the client to renegotiate new encryption parameters for an SSL/TLS connection within a single TCP connection.\n- During the SSL/TLS handshake, the server incurs a higher computational cost. An attacker can exploit the higher computational cost of the server by opening an SSL/TLS connection to the server and repeatedly initiating renegotiation. This would cause the server to waste resources that would otherwise be used for the server's normal function. In addition, there is the possibility of a DOS.\n- To exploit this vulnerability, the server must not support secure renegotiation and must allow client-side renegotiation.\n- A TLS session can be renegotiated over an existing secure channel to rekey or perform further authentication. A flaw was discovered in the mechanism, by which an attacker with network access could intercept and hold handshake records from a legitimate client, establish a TLS session itself with a server, send application data, initiate renegotiation, and release the legitimate handshake records. As renegotiation is performed over an existing channel, the server believes the session is one and the same.\n\n## Quick Reference\n\n### TLDR\n\nThis is a plaintext injection attack into previously sent packets. TLS and SSL 3.0 do not correctly associate renegotiation handshakes with existing connections. This allows a person-in-the-middle positioned attacker to insert data into a HTTPS session.\n \n### Name\n\nTLS Renegotiation Vulnerability\n\n### CVE Number\n\nThe TLS protocol, and SSL protocol 3.0 (and possibly earlier)\n\n### Microsoft Vulnerability\n\nMS10-049\n\n### Type of Vulnerability\n\nWithin the protocol. \n\n### Affected\n\nThe TLS protocol, SSL protocol 3.0 and possibly earlier versions of SSL. \n\n### Remediation\n\nAvoid renegotiation, or cryptographically bind original and renegotiation TLS handshakes with the secure renegotiation extension."},"next":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-poodle-over-tls"},"excerpt":"Main Points The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic…","frontmatter":{"date":"20th January 2022 ","title":"Vulnerabilities in SSL & TLS :- POODLE over TLS","description":"In this article, we will look at CVE-2014-8730, also known as the Padding Oracle On Downgraded Legacy Over Transport Layer Security (POODLE over TLS) vulnerability. The vulnerability is caused by a TLS server failing to verify the block cipher padding when used with a cipher suite utilising a block cipher, such as AES and DES. Due to the lack of padding checking, encrypted TLS traffic can be decrypted.","tags":"poodle-over-tls, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- Uses a padding-oracle attack in the CBC padding because of the vulnerable TLS implementation.\n\n## Quick Reference\n\n### Description\n\nThis is the POODLE attack; however, the writing over the CBC padding is possible due to TLS implementation not checking cipher padding. \n\n### Abbreviation\n\nPOODLE over TLS \n\n### Name\n\nPadding Oracle On Downgraded Legacy Over Transport Layer Security\n\n### CVE Number\n\nCVE-2014-8730\n\n### Type of Vulnerability\n\nThe vulnerability is caused by the TLS server failing to verify block cipher padding when used with a cipher suite that utilises a block cipher, such as AES and DES. Due to the lack of padding checking, encrypted TLS traffic can be decrypted.\n\n### Affected\n\nThe SSL profiles components in F5 BIG-IP LTM, APM, and ASM 10.0.0 through 10.2.4 and 11.0.0 through 11.5.1\nAAM 11.4.0 through 11.5.1, AFM 11.3.0 through 11.5.1, Analytics 11.0.0 through 11.5.1, Edge Gateway, WebAccelerator, and WOM 10.1.0 through 10.2.4 and 11.0.0 through 11.3.0, PEM 11.3.0 through 11.6.0, and PSM 10.0.0 through 10.2.4 and 11.0.0 through 11.4.1 and BIG-IQ Cloud and Security 4.0.0 through 4.4.0 and Device 4.2.0 through 4.4.0, when using TLS 1.x before TLS 1.2, does not properly check CBC padding bytes when terminating connections.\n\n### Remediation\n\nCheck CBC padding in TLS stack. \n\nPatch vulnerable TLS implementations (ask vendor)."}}},"staticQueryHashes":["310218920"],"slicesMap":{}}