{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/vulnerabilities-in-ssl-and-tls-breach/","result":{"pageContext":{"post":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-breach"},"excerpt":"Main Points The attacker must use a different exploit to become a man-in-the-middle and to inject content into the network traffic stream…","frontmatter":{"date":"15th January 2022 ","title":"Vulnerabilities in SSL & TLS :- BREACH","description":"In this article we look at CVE Number CVE-2013-3587 or what is commonly referred as the BREACH attack. The HTTPS protocol can encrypt compressed data without properly obfuscating the length of the unencrypted data, which makes it easier for man-in-the-middle (MitM) attackers to obtain plaintext secret values by observing length differences during a series of guesses in which a string in an HTTP request URL potentially matches an unknown string in an HTTP response body.","tags":"breach, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- The attacker must use a different exploit to become a man-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- The BREACH attack is very similar to how CRIME work but BREACH exploits of vulnerability within the HTTP compression allowing an attacker to identify if text exists within a page.\n- BREACH attack on HTTP request responses, whereas CRIME looks at HTTP requests.\n- The BREACH attack is agnostic to the version of TLS/SSL, and does not require TLS-layer compression (only HTTP compression).\n- The BREACH attack works against any cipher suite.\n- The BREACH attack against stream ciphers is simpler as when performing attacks against block ciphers additional work must be done to align the output to the cipher text blocks.\n- The BREACH attack can be exploited with just a few thousand requests, and can be executed in under a minute**.** The number of requests required will depend on the secret size. The power of the attack comes from the fact that it allows guessing a secret one character at a time.\n\n\n## Quick Reference\n\n### TLDR\n\nThe HTTPS protocol can encrypt compressed data without properly obfuscating the length of the unencrypted data, which makes it easier for man-in-the-middle (MitM) attackers to obtain plaintext secret values by observing length differences during a series of guesses in which a string in an HTTP request URL potentially matches an unknown string in an HTTP response body.\n\n### Abbreviation\n\nBREACH\n\n### Name\n\nBrowser Reconnaissance & Exfiltration via Adaptive Compression of Hypertext\n\n### CVE Number\n\nCVE-2013-3587\n\n### Type of Vulnerability\n\nThe vulnerability is in HTTPS protocol compression. \n\n### Affected\n\nTo be vulnerable, a web application must:\n\n- Be served from a server that uses HTTP-level compression\n- Reflect user-input in HTTP response bodies\n- Reflect a secret (such as a CSRF token) in HTTP response bodies\n\n### Remediation\n\nNo clear mitigation to this attack. The following is a list of potential mitigations in order of effectiveness (not practicality)  provided by breachattack.com\n\n1. Disabling HTTP compression\n2. Separating secrets from user input\n3. Randomizing secrets per request\n4. Masking secrets (effectively randomizing by XORing with a random secret per request)\n5. Protecting vulnerable pages with CSRF\n6. Length hiding (by adding random number of bytes to the responses)\n7. Rate-limiting the requests"},"prev":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-rc-4-byte-biases"},"excerpt":"Main Points The RC4 algorithm has many byte biases (certain bytes are more (or less) likely to appear than others).An attacker can use…","frontmatter":{"date":"16th January 2022 ","title":"Vulnerabilities in SSL & TLS :- RC4 Byte Biases","description":"In this article, we will look into CVE-2013-2566, also known as RC4 Byte Biases. The RC4 algorithm, which is used in the TLS and SSL protocols, has many single-byte biases, making it easier for remote attackers to carry plaintext-recovery attacks by statistically analysing ciphertext in a large number of sessions that use the same plaintext.","tags":"rc4-byte-biases, ssl","posttype":"article"},"body":"## Main Points\n\n- The RC4 algorithm has many byte biases (certain bytes are more (or less) likely to appear than others).\n- An attacker can use byte biases to recover plaintext bytes at known locations (such as a session token within a cookie) upon encrypting the same plaintext many times and monitoring the ciphertext.\n- This attack requires generation of large data volumes.\n- It is somewhat impractical but highlights a significant flaw within RC4.\n\n## Quick Reference\n\n### Description\n\nThe RC4 algorithm, which is used in the TLS and SSL protocols, has many single-byte biases, making it easier for remote attackers to carry plaintext-recovery attacks by statistically analysing ciphertext in a large number of sessions that use the same plaintext.\n\n### Name\n\nRC4 Byte Biases\n\n### CVE Number\n\nCVE-2013-2566\n\n### Type of Vulnerability\n\nCBC decryption vulnerability\n\n### Affected\n\nConnections supporting RC4\n\n### Remediation\n\nDisable support for RC4 algorithm."},"next":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-beast"},"excerpt":"Main Points The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic…","frontmatter":{"date":"14th January 2022 ","title":"Vulnerabilities in SSL & TLS :- BEAST","description":"In this article, we will look at CVE Number CVE-2011-3389, also known as BEAST. BEAST, or Browser Exploit Against SSL/TLS, is a largely theoretical attack that requires a person-in-the-middle to eavesdrop on a connection and downgrade encryption support to (vulnerable) TLS 1.0. This allows attackers to decrypt the traffic and listen in on conversations.","tags":"beast, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- The attack was carried out for the first time in 2011 by security researchers Thai Duong and Juliano Rizzo (Google Chrome developers), but the theoretical vulnerability was discovered in 2002 by Phillip Rogaway.\n- Thai Duong and Juliano Rizzo created their POC in JavaScript.\n- Researchers found that TLS 1.0 (and older) encryption can be broken quickly, giving the attacker an opportunity to listen in on the conversation.\n- If your server supports TLS 1.0, the attacker can make it believe that this is the only protocol that the client can use. This is called a protocol downgrade attack. Then, the attacker can use the BEAST attack to eavesdrop.\n- The attack leverages weaknesses in cipher block chaining (CBC) to exploit the Secure Sockets Layer (SSL) protocol\n- If the attacker can get into a person-in-the-middle position while the victims are using TLS 1.0, they may silently decrypt secrets.\n\n## Quick Reference\n\n### Description\n\nA vulnerability that allows a person-in-the-middle attacker to eavesdrop on a connection and downgrade encryption support to (vulnerable) TLS 1.0. This allows attackers to decrypt the traffic and listen in on conversations.\n\n### Abbreviation\n\nBEAST\n\n### Name\n\nBrowser Exploit Against SSL/TLS\n\n### CVE Number\n\nCVE-2011-3389\n\n### Type of Vulnerability\n\nIn the SSL protocol and TLS 1.0\n\n### Affected\n\nIf you support TLS 1.0 or any version of SSL, then you are vulnerable to BEAST. \n\nOriginally, the RC4 cipher was recommended for use to mitigate BEAST attacks (because it is a stream cipher, not a block cipher). However, RC4 was later found to be unsafe.\n\n## How to Configure Web Server to Mitigate BEAST Vulnerability\n\nTo protect our web server against [POODLE](https://evilsaint.com/article/vulnerabilities-ssl-tls-poodle/) it is recommended to stop support for SSL version 3.0 or lower. This, however, would still leave us vulnerable to [BEAST](https://evilsaint.com/article/vulnerabilities-ssl-tls-beast/), where it is recommended to stop support for TLS 1.0 as well. \n\n### Apache Web Server\n\nEdit the SSLProtocol directive in the ssl.conf file, which is usually located in /etc/httpd/conf.d/ssl.conf. For example, if you have:\n```\nSSLProtocol all\n```\n\nchange it to:\n```\nSSLProtocol TLSv1.1 TLSv1.2\n```\nThen, restart httpd.\n\n### NGINX\n\nEdit the ssl_protocols directive in the nginx.conf file. For example, if you have:\n```\nssl_protocols TLSv1.1 TLSv1.2;\n```\n\nchange it to:\n```\nssl_protocols TLSv1.1 TLSv1.2;\n```\n\nThen, restart nginx.\n\n### Microsoft IIS\n\nTo disable TLS 1.0 in Microsoft IIS, you must edit the registry settings in Microsoft Windows.\n\n1. Open the registry editor\n\t* Find the key `HKLM SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.0\\Server`\n\t* Change the DWORD value of the Enabled entry to `0`.\n\t* Create a `DisabledByDefault` entry and change the DWORD value to `1`.\n\n2. Repeat the above steps for all versions of SSL."}}},"staticQueryHashes":["310218920"],"slicesMap":{}}