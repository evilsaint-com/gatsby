{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/vulnerabilities-in-ssl-and-tls-tls-renegotiation/","result":{"pageContext":{"post":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-tls-renegotiation"},"excerpt":"Main Points SSL/TLS client-initiated renegotiation is a feature that allows the client to renegotiate new encryption parameters for an SSL…","frontmatter":{"date":"23rd January 2022 ","title":"Vulnerabilities in SSL & TLS :- TLS  Renegotiation","description":"In this article, we will look at the TLS Renegotiation Vulnerability in the SSL and TLS protocols. This is a plaintext injection attack into previously sent packets. TLS and SSL 3.0 do not correctly associate renegotiation handshakes with existing connections. This allows a person-in-the-middle positioned attacker to insert data into a HTTPS session.","tags":"insecure-tls-renegotiation, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- SSL/TLS client-initiated renegotiation is a feature that allows the client to renegotiate new encryption parameters for an SSL/TLS connection within a single TCP connection.\n- During the SSL/TLS handshake, the server incurs a higher computational cost. An attacker can exploit the higher computational cost of the server by opening an SSL/TLS connection to the server and repeatedly initiating renegotiation. This would cause the server to waste resources that would otherwise be used for the server's normal function. In addition, there is the possibility of a DOS.\n- To exploit this vulnerability, the server must not support secure renegotiation and must allow client-side renegotiation.\n- A TLS session can be renegotiated over an existing secure channel to rekey or perform further authentication. A flaw was discovered in the mechanism, by which an attacker with network access could intercept and hold handshake records from a legitimate client, establish a TLS session itself with a server, send application data, initiate renegotiation, and release the legitimate handshake records. As renegotiation is performed over an existing channel, the server believes the session is one and the same.\n\n## Quick Reference\n\n### TLDR\n\nThis is a plaintext injection attack into previously sent packets. TLS and SSL 3.0 do not correctly associate renegotiation handshakes with existing connections. This allows a person-in-the-middle positioned attacker to insert data into a HTTPS session.\n \n### Name\n\nTLS Renegotiation Vulnerability\n\n### CVE Number\n\nThe TLS protocol, and SSL protocol 3.0 (and possibly earlier)\n\n### Microsoft Vulnerability\n\nMS10-049\n\n### Type of Vulnerability\n\nWithin the protocol. \n\n### Affected\n\nThe TLS protocol, SSL protocol 3.0 and possibly earlier versions of SSL. \n\n### Remediation\n\nAvoid renegotiation, or cryptographically bind original and renegotiation TLS handshakes with the secure renegotiation extension."},"prev":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-overview"},"excerpt":"Since January 6th, we have been looking at individual SSL/TLS vulnerabilities. This article will provide an overview of the series and…","frontmatter":{"date":"24th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Overview","description":"Since January 6th, we have been looking at individual SSL/TLS vulnerabilities. This article will provide an overview of the series and provide background information on SSL/TLS for those who are unfamiliar with the subject. If you scroll to the bottom, you will find a handy reference sheet for when you are on the phone with customers.","tags":"ssl, tls","posttype":"article"},"body":"Since January 6th, we have been looking at individual SSL/TLS vulnerabilities. This article will provide an overview of the series and provide background information on SSL/TLS for those who are unfamiliar with the subject. \n\nA timeline of SSL and TLS development:\n\n- SSL 2.0. Released in 1995, this version of SSL is now prohibited by the Internet Engineering Task Force (see RFC-6176).\n- SSL 3.0. Released in 1996, SSL 3.0 is deprecated, but a few browsers still support it (RFC-7568).\n- TLS 1.0. Released in 1999 and deprecated in 2020.\n- TLS 1.1. Released in 2006 and deprecated in 2020.\n- TLS 1.2. Released in 2008 and still has no security issues.\n- TLS 1.3. Released in 2018 and continues to be the main protocol used today without any known vulnerabilities.\n\nIn this article series we will cover:\n\n1. [Heartbleed](https://evilsaint.com/article/vulnerabilities-ssl-tls-heartbleed/) \n2. [SWEET32](https://evilsaint.com/article/vulnerabilities-ssl-tls-sweet32/) \n3. [DROWN](https://evilsaint.com/article/vulnerabilities-ssl-tls-drown/) \n4. [FREAK](https://evilsaint.com/article/vulnerabilities-ssl-tls-freak/) \n5. [logjam](https://evilsaint.com/article/vulnerabilities-ssl-tls-logjam/) \n6. [BEAST](https://evilsaint.com/article/vulnerabilities-ssl-tls-beast/) \n7. [BREACH](https://evilsaint.com/article/vulnerabilities-ssl-tls-breach/) \n8. [RC4 Biases](https://evilsaint.com/article/vulnerabilities-ssl-tls-rc4-byte-biases/) \n9. [CCS injection vulnerability](https://evilsaint.com/article/vulnerabilities-ssl-tls-ccs-injection-vulnerability/) \n10. [POODLE](https://evilsaint.com/article/vulnerabilities-ssl-tls-poodle/) \n11. [POODLE over TLS](https://evilsaint.com/article/vulnerabilities-ssl-tls-poodle-over-tls/) \n12. [Lucky13](https://evilsaint.com/article/vulnerabilities-ssl-tls-lucky13/) \n13. [TLS Renegotiation](https://evilsaint.com/article/vulnerabilities-ssl-tls-tls-renegotiation/) \n\n\n## Quick Guide\n\nRight now, if you have the client on the phone, however...\n\nAttack | CVE | Affects | Mitigation \n:-----:|:-----:|:-----|:-----\nLogjam | CVE-2015-4000 | The TLS protocol 1.2 and earlier when a DHE_EXPORT cipher suite is enabled. | Enforce DH group sizes of 1,024 bits and above\nPOODLE | CVE-2014-3566 | SSL version 3.0 | Disable support for SSL 3.0\nBEAST | CVE-2011-3389  | TLS 1.0 or any version of SSL | Enforce TLS 1.1 and higher\nCRIME | 2012-4929  | TLS compression| Disable TLS compression\nBREACH and TIME | CVE-2013-3587 | HTTP compression | Disable HTTP compression\nLucky 13 | CVE-2013-0169 | TLS protocol 1.1 and 1.2 and the DTLS protocol 1.0 and 1.2 in several vendors products | Disable CBC ciphers if your server implementation is flawed\nRC4 byte biases | CVE-2013-2566  | Connections supporting RC4 | Disable support for RC4 cipher suites\nFREAK | CVE-2015-0204  | Any system willing to negotiate RSA Export Keys.  | Disable support for weak export-grade ciphers\nSWEET32 | CVE-2016–2183 and CVE-2016–6329 | Long term client browser foothold | Do not support or negotiate 3DES cipher-suites. At a minimum, AES should be preferred over 3DES. Limit length of TLS session."},"next":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-lucky13"},"excerpt":"Main Points The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic…","frontmatter":{"date":"21st January 2022 ","title":"Vulnerabilities in SSL & TLS :- Lucky13","description":"In this article, we will look at CVE-2013-0169, also known as the Lucky 13 vulnerability, which exists within SSL and TLS. The TLS protocols 1.1 and 1.2, as well as the DTLS protocols 1.0 and 1.2, do not properly consider timing side-channel attacks when processing malformed CBC padding, allowing remote attackers to conduct plaintext-recovery.","tags":"lucky13, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- First reported by the Information Security Group at Royal Holloway, University of London.\n- TLS headers contain 13 bytes of data for the secure handshake protocol, which can be exploited.\n- When processing malformed CBC padding, the TLS protocols 1.1 and 1.2, as well as the DTLS protocols 1.0 and 1.2, as used in OpenSSL, OpenJDK, PolarSSL, and other products, do not properly consider timing side-channel attacks on a MAC check requirement, allowing remote attackers to conduct distinguishing attacks and plaintext recovery via statistical analysis of timing data for crafted packets.\n- To have enough data to attack, you need to collect several days' worth of packets and traffic via a person-in-the-middle attack. This is why Lucky 13 is a theoretically possible attack vector.\n\n## Quick Reference\n\n### Description\n\nThe TLS protocols 1.1 and 1.2, as well as the DTLS protocols 1.0 and 1.2, do not properly consider timing side-channel attacks when processing malformed CBC padding, allowing remote attackers to conduct plaintext-recovery.\n\n### Name\n\nLucky13 \n\n### CVE Number\n\nCVE-2013-0169\n\n### Type of Vulnerability\n\nWeakness in SSL and TLS themselves and not in a particular implementation of them.\n\n### Affected\n\nThe TLS protocols 1.1 and 1.2 and the DTLS protocols 1.0 and 1.2, as used in OpenSSL, OpenJDK, PolarSSL, and other products.\n\n### Remediation\n\nAvoid CBC mode cipher-suites (use AEAD cipher-suites).\n\nUse Encrypt-then-MAC TLS extension."}}},"staticQueryHashes":["310218920"],"slicesMap":{}}