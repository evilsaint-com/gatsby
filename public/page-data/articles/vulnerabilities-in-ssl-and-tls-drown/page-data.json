{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/vulnerabilities-in-ssl-and-tls-drown/","result":{"pageContext":{"post":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-drown"},"excerpt":"Main Points For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the…","frontmatter":{"date":"8th January 2022 ","title":"Vulnerabilities in SSL & TLS :- DROWN","description":"In this article we look at CVE Number CVE-2016-0800, also known as the DROWN vulnerability. Decrypting RSA with Obsolete and Weakened eNcryption (DROWN) is an attack that demonstrates that even if you do not allow SSLv2, simply supporting it can be dangerous.","tags":"drown, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the network traffic stream.\n- At the time of public disclosure on March 2016, it was indicated 33% of all HTTPS servers were vulnerable to the attack.\n- At the time of the public disclosure in March 2016, it was estimated that 33% of all HTTPS servers were vulnerable to the attack.\n- Takes hours to retrieve data unless a specific version of OpenSSL is used, which is known to allow for a one minute average decryption rate rather than a four hour average decryption rate.\n- Another attack that relies on export grade cryptography; introduced to comply with US government restrictions in the 1990s.\n- DROWN demonstrates that simply allowing SSLv2, even if no legitimate clients use it, poses a risk to modern servers and clients. It allows an attacker to decrypt modern TLS connections between up-to-date clients and servers by sending probes to any server that supports SSLv2 and uses the same private key.\n- At the time of publication (August 2016), the team behind the paper \"DROWN: Breaking TLS Using SSLv2\" was able to attack and decrypt a TLS 1.2 handshake using 2048-bit RSA in under eight hours, at a cost of $440 on Amazon EC2.\n\n## Quick Reference \n\n### Description\n\nDecrypting RSA with Obsolete and Weakened eNcryption (DROWN) is an attack that demonstrates that even if you do not allow SSLv2, simply supporting it can be dangerous. It allows an attacker to decrypt TLS connections between clients and servers.\n\n### Abbreviation\n\nDROWN\n\n### Name\n\nDecrypting RSA with Obsolete and Weakened eNcryption\n\n### CVE Number\n\nCVE-2016-0800\n\n### Type of Vulnerability\n\nWithin the SSL v2.0 protocol when paired with export grade ciphers. \n\n### Affected\n\nTwo types of systems are vulnerable. \n\n1. A system supporting SSLv2. (Systems that support SSLv2 negotiation are still surprisingly common!)\n2. A system that uses its private key on any other server that allows SSLv2 connections, even if it is for a different protocol. TLS, for example, is another protocol. The original system is vulnerable as long as SSLv2 can be negotiated on the second system.\n\n### Remediation\n\nRemove support for SSL v2, and best practises would suggest removing anything older than TLS 1.1. TLS 1.0 does not need to be supported. \n\nEven if you are confident that you have disabled SSLv2 on your HTTPS server, you could be reusing your private key on another server (such as an email server) that does support SSLv2. We recommend manually inspecting all servers that use your private key."},"prev":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-freak"},"excerpt":"Main Points In the 1990s, the US government established rules governing the strength of encryption that could be exported (\"Export keys\").…","frontmatter":{"date":"9th January 2022 ","title":"Vulnerabilities in SSL & TLS :- FREAK","description":"In this article, we will look at CVE-2015-0204, also known as the FREAK attack. This attack makes use of a person-in-the-middle position to allow end clients to communicate using RSA Export Keys, which were a form of weak strength RSA encryption keys capped at 512 bits. The US government imposed this in the 1990s to prevent the encryption from being used against them. The idea was to give protection from a modest system but not prevent the NSA from decrypting it.","tags":"freak, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- In the 1990s, the US government established rules governing the strength of encryption that could be exported (\"Export keys\").\n- In any Secure Socket Layer (SSL) implementations aimed at export, these rules limited the strength of the RSA encryption keys to a maximum of 512 bits.\n- The RSA Export keys were designed to allow exports to contain encryption that could not be broken by a typical computing resource but could be broken by the NSA.\n- For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the network traffic stream.\n- The FREAK attack necessitates a person-in-the-middle position in order to change the initial HTTP packet that is sent out when negotiating cipher use to request \"Export Keys.\"\n- The use of “Export Keys” suites was stopped, and by the year 2000, browsers could use a higher-security SSL.\n- Attack Narrative\n    1. An attacker gains a person-in-the-middle position between two computers. \n    2. Victim requests a secure connection to a webpage. The victims browser sends a \"Client Hello message\" to the server asking for typical cipher suites. \n    3. The attacker intercepts the conversation and substitutes the requested cipher suites with a request for ‘export RSA’\n    4. The server agrees and accepts the request (not understanding that it was modified). It responds with a 512-bit export RSA key.\n    5. The client accepts ‘export RSA’ (not understanding that its request was modified).\n    6. Attacker breaks weaker keys (first done by a researcher in 1999, modern cloud computing makes this much easier) and obtains information.\n\n## Quick Reference \n\n### Abbreviation\n\nFREAK \n\n### Name\n\nFactoring RSA Export Keys\n\n### CVE Number\n\nCVE-2015-0204\n\n### Type of Vulnerability\n\nThe vulnerability is in the ciphers with which the system is willing to communicate. They cannot be negotiated if the weak cipher is removed. It is a simple fix.\n\n### Affected\n\nAny system willing to negotiate RSA Export Keys. \n\n### Remediation\n\nDisable support for weak export-grade ciphers\n\n### Mediation\n\nRemove any weak ciphers from your configuration. Refuse to communicate using weak ciphers. This way the person-in-the-middle cipher negotiation cannot be modified to support RSA Export Keys."},"next":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-sweet32"},"excerpt":"Main Points Sweet32 takes advantage of weaknesses in the design of some ciphers.Allows an attacker to recover small portions of plaintext…","frontmatter":{"date":"7th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Sweet32","description":"In this article, we will look at CVE Numbers CVE-2016–2183 and CVE-2016–6329, also known as the Sweet32 attack. The attack which involves collecting SSL traffic using legacy block ciphers via a person-in-the-middle context and subjecting it to a collision attack.","tags":"ssl, sweet32, tls","posttype":"article"},"body":"## Main Points\n\n- Sweet32 takes advantage of weaknesses in the design of some ciphers.\n- Allows an attacker to recover small portions of plaintext encrypted with 64-bit block ciphers (such as Triple-DES and Blowfish).\n- Based on the use of legacy block ciphers, which are vulnerable to a practical collision attack when used in CBC mode. A simple birthday attack can be used to identify 64-bit block cipher collisions when using the CBC mode of operation. When a collision occurs, it means that the input and output are the same, allowing the encrypted data to be exfiltrated.\n- The use of a 64-bit block ciphers is likely to produce a collision after 32 GB of data, but for a practical attack the researchers found that up to 785 GB of data is required.\n- A specific weakness in the OpenSSL implementation of SSLv2 allows for a 'special DROWN attack,' which greatly reduces the effort required to break the encryption, allowing for real-time person-in-the-middle attacks.\n\n## Quick Reference\n\n### Description\n\nThe attack which involves collecting SSL traffic using legacy block ciphers via a person-in-the-middle context and subjecting it to a collision attack.\n\n### Abbreviation\n\nSWEET32\n\n### Name\n\nSWEET32\n\n### CVE Number\n\nCVE-2016–2183 and CVE-2016–6329\n\n### Type of Vulnerability\n\nThe attack takes advantage of flaws in the design of some block ciphers.\n\n### Affected\n\nCarrying out the TLS variant of the Sweet32 attack successfully requires a very specific set of capabilities on the part of the attacker:\n\n- The attacker must be able to run JavaScript in the victim's browser to generate data for transmission to the server.\n- The attacker must keep the victim on the malicious JavaScript page for one to two days to generate enough ciphertext blocks to find a collision.\n\n### Remediation\n\nDo not support or negotiate 3DES cipher-suites. At a minimum, AES should be preferred over 3DES. Limit the length of the TLS session."}}},"staticQueryHashes":["310218920"],"slicesMap":{}}