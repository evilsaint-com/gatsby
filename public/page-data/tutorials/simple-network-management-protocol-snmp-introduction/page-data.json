{"componentChunkName":"component---src-templates-blog-post-js","path":"/tutorials/simple-network-management-protocol-snmp-introduction/","result":{"pageContext":{"post":{"fields":{"slug":"/simple-network-management-protocol-snmp-introduction"},"excerpt":"SNMP stands for Simple Network Management Protocol. It is generally used by network monitoring applications to read and write network state…","frontmatter":{"date":"19th January 2021 ","title":"Simple Network Management Protocol (SNMP) :- Introduction","description":"","tags":"snmp, snmpwalk, community-string","posttype":"tutorial"},"body":"SNMP stands for Simple Network Management Protocol. It is generally used by network monitoring applications to read and write network state variables\n(state of the interface, no. of sent packets etc.). Types of managed devices include servers, workstations and network devices.  \n  \nSNMP services run by default on the 161 UDP port.  \n  \nSNMP communications are generally protected by using an authentication string called community string. There are two types of community strings, a read-only\ncommunity string that gives us access to the general variables of the network and a read-write one, that also allows us to set specific variables.  \n  \nIf you can \"guess\" the read-only or read-write strings you can obtain quite a bit of access you would not normally have. In addition, if Windows based\ndevices are configured with SNMP, often times with the RO/RW community strings, you can extract patch levels, services running, last reboot times,\nusernames on the system, routes, and various other amounts of information that is valuable to an attacker.  \n  \nIf you can find a Cisco device running a private string for example, you can actually download the entire device configuration, modify it, and upload your\nown malicious config. Often the passwords themselves are level 7 encoded which means they are trivial to decode and obtain the ‘enable‘ or login password for\nthe specific device  \n  \nWhen querying through SNMP, there is what's called an MIB API. The MIB stands for the Management Information Base (MIB). This interface allows you to query\nthe device and extract information.  \n  \n  \nRFC MIB = http://www.oidview.com/mibs/0/HOST-RESOURCES-MIB.html  \n  \nVENDOR SPECIFIC = http://www.oidview.com/mibs/detail.html  \n  \nMICROSOFT = http://www.oidview.com/mibs/311/md-311-1.html  \n  \n```  \n1.3.6.1.2.1.25.1.6.0 System Processes  \n1.3.6.1.2.1.25.4.2.1.2 Running Programs  \n1.3.6.1.2.1.25.4.2.1.4 Processes Path  \n1.3.6.1.2.1.25.2.3.1.4 Storage Units  \n1.3.6.1.2.1.25.6.3.1.2 Software Name  \n1.3.6.1.4.1.77.1.2.25 User Accounts  \n1.3.6.1.2.1.6.13.1.3 TCP Local Ports  \n```\n\n## SNMPWalk\n\nSnmpwalk is a popular tool for testing SNMP. This tool acts as SNMP client, and we can use it for our penetration testing where we require making requests\nto the SNMP service on the target host.  \n  \n### Common Usage\n\nShows Help  \n```  \nsnmpwalk --help\n```  \n\nLooks at one host, specifying a community string of public  \n```  \nsnmpwalk -v 1 -c public 10.11.1.22\n```  \n\nHere we are asking snmpwalk to walk one node subset in the MIB  \n```  \nsnmpwalk -v 1 -c public 10.11.1.22 .1.3.6.1.2.1.25.1.6.0\n```  \n\n`-M` option allows us to include a file of MIB's to look throgh  \n```  \nsnmpwalk -v 1 -c public 10.11.1.22 -M mibs.txt\n```  \n\nSome MIB nodes display in hex, in order to force display of those in ASCI we add the -Oa options  \n```  \nsnmpwalk -v 1 -c public 10.11.1.73 iso.3.6.1.2.1.2.2.1.2 -Oa\n```  \n\nAdding the `n` to the `-O` option means it displays full OID's  \n```  \nsnmpwalk -v 1 -c public 10.11.1.73 iso.3.6.1.2.1.2.2.1.2 -Oan\n```  \n\nSearching snmpwalk for a specific MID string.  \n```  \nfor ip in $(cat out | cut -d\" \" -f1 | sort -u | grep \"10.11\"); do echo $ip ;\nsnmpwalk -c public -v1 $ip 1.3.6.1.2.1.25.4.2.1.2 ; done\n```  \n\nFiltering output of a lookup for a specific string  \n```  \nsnmpwalk -v 1 -c public 10.11.1.73 -Oa | grep \"iso.3.6.1.2.1.2.2.1.2\"\n```  \n\n### Important MIB's ID for Pentestesters\n\n#### Windows  \n  \n```\nRUNNING PROCESSES 1.3.6.1.2.1.25.4.2.1.2  \nINSTALLED SOFTWARE 1.3.6.1.2.1.25.6.3.1.2  \nSYSTEM INFO 1.3.6.1.2.1.1.1  \nHOSTNAME 1.3.6.1.2.1.1.5  \nDOMAIN 1.3.6.1.4.1.77.1.4.1  \nUPTIME 1.3.6.1.2.1.1.3  \nUSERS 1.3.6.1.4.1.77.1.2.25  \nSHARES 1.3.6.1.4.1.77.1.2.27  \nDISKS 1.3.6.1.2.1.25.2.3.1.3  \nSERVICES 1.3.6.1.4.1.77.1.2.3.1.1  \nLISTENING TCP PORTS 1.3.6.1.2.1.6.13.1.3.0.0.0.0  \nLISTENING UDP PORTS 1.3.6.1.2.1.7.5.1.2.0.0.0.0  \nSYSTEM PROCESSES 1.3.6.1.2.1.25.1.6.0  \nSTORAGE UNITS 1.3.6.1.2.1.25.2.3.1.4  \n```\n\n#### Linux\n\n```  \nRUNNING PROCESSES 1.3.6.1.2.1.25.4.2.1.2  \nSYSTEM INFO 1.3.6.1.2.1.1.1  \nHOSTNAME 1.3.6.1.2.1.1.5  \nUPTIME 1.3.6.1.2.1.1.3  \nMOUNTPOINTS 1.3.6.1.2.1.25.2.3.1.3  \nRUNNING SOFTWARE PATHS 1.3.6.1.2.1.25.4.2.1.4  \nLISTENING UDP PORTS 1.3.6.1.2.1.7.5.1.2.0.0.0.0  \nLISTENING TCP PORTS 1.3.6.1.2.1.6.13.1.3.0.0.0.0  \nSYSTEM PROCESSES 1.3.6.1.2.1.25.1.6.0  \nSTORAGE UNITS 1.3.6.1.2.1.25.2.3.1.4  \n```\n\n#### Cisco\n\n```\nLAST TERMINAL USERS 1.3.6.1.4.1.9.9.43.1.1.6.1.8  \nINTERFACES 1.3.6.1.2.1.2.2.1.2  \nSYSTEM INFO 1.3.6.1.2.1.1.1  \nHOSTNAME 1.3.6.1.2.1.1.5  \nSNMPcommunities 1.3.6.1.6.3.12.1.3.1.4  \nUPTIME 1.3.6.1.2.1.1.3  \nIP ADDRESSES 1.3.6.1.2.1.4.20.1.1  \nINTERFACE DESCRIPTIONS 1.3.6.1.2.1.31.1.1.1.18  \nHARDWARE 1.3.6.1.2.1.47.1.1.1.1.2  \nTACACS SERVER 1.3.6.1.4.1.9.2.1.5  \nLOGMESSAGES 1.3.6.1.4.1.9.9.41.1.2.3.1.5  \nPROCESSES 1.3.6.1.4.1.9.9.109.1.2.1.1.2  \nSNMP TRAP SERVER 1.3.6.1.6.3.12.1.2.1.7`\n```\n\n## snmp-check\n\n`snmp-check` allows you to enumerate the SNMP devices and places the output in a very human readable friendly format. It could be useful for \npenetration testing or systems monitoring.\n\n```\nsnmp-check -w ip_address\n-p, --port : SNMP port; default port is 161;\n-c, --community: SNMP community; default is public;\n-v, --version : SNMP version (1,2c); default is 1;\n-w, --write : detect write access (separate action by enumeration);\n-d, --disable_tcp : disable 'TCP\n```\n\n## snmpset\n\nIf we find write access to an SNMP server we can use snmpset to write to it.\n\n`snmpset` - communicates with a network entity using SNMP SET requests\n\n## Onesixtyone\n\nOnesixtyone is an SNMP scanner that sends multiple SNMP requests to multiple IP addresses, trying different community strings and waiting for replies.\n\nKey Features\n* Very fast scanning speed (over 50,000 guesses per second)\n* Scan a single host or thousands of hosts at the same time\n* You can tune scan speed to support both LAN and WAN testing\n\n### Prepping Your Dictionary\n\nSNMP strings in onesixtyone can't be longer than 16 characters at time of this writing. If you have an error with your dictionary file you can find out which words are causing problems with the following command.\n\n```  \ncat snmpstrings.txt | grep -xv .\\{0,16\\}\n```  \n\nThere is a current approve request in onesixtyone to increase the size as currently the following string which is default in the kali linux wordlists for snmp community strings can not be parsed for onesixtyone.\n\nThis is the APC default community string:\n```  \nTENmanUFactOryPOWER\n```  \n\nHowever if you wish to use onesixtyone and you need to filter your list down you can do the following to pipe all the words between 0-16 characters into a new list\n```  \ncat snmpstrings.txt | grep -x '.\\{0,16\\}' > snmp.txt\n```  \n\n### Example usage\n\nScanning Hosts/Community Strings From Files\n```\nonesixtyone -c snmp.txt -i opensnmp.txt \n-i = This flag allows you to input hosts from a list\n-c = This flag allows you to input community strings from a list.\n```\n\nScanning a single host.\n```  \nonesixtyone -c /dict/snmp.txt 10.0.0.1\n```  \n\n### Key Flags\n```  \n-c = file with community string names to try\n-i = file with target hosts\n-o = output log\n-d = debug mode\n-w = Wait in milliseconds between sending packets (default 10)\n-q = Quiet mode, do not print to std out.\n```  \n\nBrute Force And Scan Network SNMP bruteforce script.\n```\nroot@kali:/# echo \"public\" > community\nroot@kali:/# echo \"private\" > community\nroot@kali:/# echo \"manager\" > community\nroot@kali:/# for ip in $(seq 200 254); do echo 192.168.19.$ip ;done > ips.txt\nroot@kali:/# onesixtyone -c community -i ips.txt\n```\n\n## SNMP with NMAP\n\nThis is a standard network scan looking for potential snmp open port hosts.\n\n```bash\nnmap -Pn -sU -sV -p 161 --open 10.0.0.1/24\n-Pn = Treat all hosts as online \n-sU = Specifys a UDP Scan\n-p = Specify the port\n-sV = Specify to perform service enumeration\n--open = Returns on Open Ports\n```\n\nThis should hopefully tell us the version number of the SNMP. Now we can run nmap with scripts to further enumerate\n```  \nnmap -Pn -sU -p 161 10.0.0.1 --script=snmp-brute\n```  \n\n### NMAP NSE Scripts for SNMP\n\n```  \ncd \"/usr/share/nmap/scripts\"\nls -la | grep \"snmp\"\n```\n\n#### Flags\n\n```  \nsnmp-brute = Attempts to find an SNMP community string by brute force guessing\nsnmp-hh3c-logins = Attempts to enumerate Huawei / HP/H3C Locally Defined Users\nsnmp-info = Extracts basic information from an SNMPv3 GET request\nsnmp-interfaces = Attempts to enumerate network interfaces through SNMP\nsnmp-ios-config = Attempts to download Cisco router IOS configuration files\nsnmp-netstat = Attempts to query SNMP for a netstat like output\nsnmp-processes = Attempts to enumerate running processes through SNMP\nsnmp-sysdescr = Attempts to extract system information from an SNMP version 1 service\nsnmp-win32-services = Attempts to enumerate Windows services through SNMP\nsnmp-win32-shares = Attempts to enumerate Windows Shares through SNMP.\nsnmp-win32-software = Attempts to enumerate installed software through SNMP.\nsnmp-win32-users = Attempts to enumerate Windows user accounts through SNMP\n```"},"prev":{"fields":{"slug":"/remote-ssh-access-tutorial"},"excerpt":"Remotely accessing Secure Shell (SSH) Services Generating a New Public Key\n\nssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub\n\n\n=============…","frontmatter":{"date":"21st March 2021 ","title":"Remote SSH Access tutorial","description":"","tags":"ssh","posttype":"tutorial"},"body":"Remotely accessing Secure Shell (SSH) Services\n\nGenerating a New Public Key\n```\nssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub\n```\n=========================================== \n\n\nhttps://www.ssh.com/ssh/passphrase"},"next":{"fields":{"slug":"/automating-vultr-setup-with-vultr-api-v1"},"excerpt":null,"frontmatter":{"date":"20th April 2020 ","title":"Automating Vultr Setup with Vultr API V1","description":"vultr, automation","tags":"vultr, automation","posttype":"tutorial"},"body":"```\nAPI Endpoint: https://api.vultr.com/\nAPI Key: Available in Members Area\n```\n\n### Example\n\n```\ncurl -H \"API-Key: YOURKEY\" https://api.vultr.com/v1/server/create --data \"DCID=8\" --data \"VPSPLANID=201\" --data \"OSID=270\" --data \"APPID=17\" --data \"label=docker-test\"\n```\n\nThe code example is calling Vultr API to create new Server\n\n```\n--data \"DCID=8\" = \"DCID\":\"8\",\"name\":\"London\" (server region)\n--data \"VPSPLANID=201\" = \"VPSPLANID\":\"201\",\"name\":\"1024 MB RAM,25 GB SSD,1.00 TB BW\" (plan)\n--data \"OSID=270\" = \"OSID\":270,\"name\":\"Ubuntu 18.04 x64\" (Operating System)\n--data \"APPID=17\" = \"APPID\":\"17\", \"name\":\"Docker\" (application)\n--data \"label=docker-test\" = \"label=docker-test\" (server label)\n```\n\n### cURL\n\nGET request with no arguments.\n\n```\ncurl \"https://api.vultr.com/v1/os/list\"\n```\n\nGET request that requires your API key.\n\n```\ncurl -H 'API-Key: YOURKEY' \"https://api.vultr.com/v1/server/list\"\n```\n\nGET request with additional parameters.\n\n```\ncurl -H 'API-Key: YOURKEY' -G --data \"SUBID=12345\" \"https://api.vultr.com/v1/server/list\"\n```\n\nPOST request that requires your API key.\n\n```\ncurl -H 'API-Key: YOURKEY' --data \"SUBID=12345\" \"https://api.vultr.com/v1/server/start\"\n```\n\nPOST request with additional parameters.\n\n```\ncurl -H 'API-Key: YOURKEY' --data \"SUBID=12345\" --data-urlencode 'label=my server!' \"https://api.vultr.com/v1/server/label_set\"\n```\n\n### Server region\n\n#### /v1/regions/list\n\nRetrieve a list of all active regions. Note that just because a region is listed here, does not mean that there is room for new servers.\n\n```\nAPI Key Required: No\nRequest Type: GET\n```\n\nExample Request:\n\n```\ncurl https://api.vultr.com/v1/regions/list\n```\n\nExample Response:\n\n```\n{\n    \"1\": {\n        \"DCID\": \"1\",\n        \"name\": \"New Jersey\",\n        \"country\": \"US\",\n        \"continent\": \"North America\",\n        \"state\": \"NJ\",\n        \"ddos_protection\": true,\n        \"block_storage\": true,\n        \"regioncode\": \"EWR\"\n    },\n    \"2\": {\n        \"DCID\": \"2\",\n        \"name\": \"Chicago\",\n        \"country\": \"US\",\n        \"continent\": \"North America\",\n        \"state\": \"IL\",\n        \"ddos_protection\": false,\n        \"block_storage\": false,\n        \"regioncode\": \"ORD\"\n    }\n}\n```\n\nExample Parameter\n\n```\n--data \"DCID=8\" = \"DCID\":\"8\",\"name\":\"London\" (server region)\n```\n\n#### List of All Regions\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/57030746-2ab6-479d-b3eb-0c87341b7aa6.png\" class=\"img-fluid\" alt=\"List of all regions\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List of all regions.</figcaption>\n</figure>\n\n### Plans\n\n#### /v1/plans/list\n\nRetrieve a list of all active plans. Plans that are no longer available will not be shown.\n\n```\nAPI Key Required: No\nRequest Type: GET\n```\n\nExample Request:\n\n```\ncurl https://api.vultr.com/v1/plans/list?type=vc2\n```\n\nExample Response:\n\n```\n{\n    \"1\": {\n        \"VPSPLANID\": \"1\",\n        \"name\": \"Starter\",\n        \"vcpu_count\": \"1\",\n        \"ram\": \"512\",\n        \"disk\": \"20\",\n        \"bandwidth\": \"1\",\n        \"price_per_month\": \"5.00\",\n        \"windows\": false,\n        \"plan_type\": \"SSD\",\n        \"available_locations\": [\n            1,\n            2,\n            3\n        ]\n    },\n    \"2\": {\n        \"VPSPLANID\": \"2\",\n        \"name\": \"Basic\",\n        \"vcpu_count\": \"1\",\n        \"ram\": \"1024\",\n        \"disk\": \"30\",\n        \"bandwidth\": \"2\",\n        \"price_per_month\": \"8.00\",\n        \"windows\": false,\n        \"plan_type\": \"SATA\",\n        \"available_locations\": [],\n        \"deprecated\": true\n    }\n}\n```\n\nExample Parameter\n\n```\n--data \"VPSPLANID=201\" = \"VPSPLANID\":\"201\",\"name\":\"1024 MB RAM,25 GB SSD,1.00 TB BW\" (plan)\n```\n\n#### List of all plans\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/5ad4d434-fb5c-4dee-ad05-93f2a35a5dc5.png\" class=\"img-fluid\" alt=\"List Of All Plans\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List Of All Plans.</figcaption>\n</figure>\n\n\n### Operating System\n\n#### /v1/os/list\n\nRetrieve a list of available operating systems. If the \"windows\" flag is true, a Windows license will be included with the instance, which will increase the cost.\n\n```\nAPI Key Required: No\nRequest Type: GET\n```\n\nExample Request:\n\n```\ncurl https://api.vultr.com/v1/os/list\n```\n\nExample Response:\n\n```\n{\n    \"127\": {\n        \"OSID\": \"127\",\n        \"name\": \"CentOS 6 x64\",\n        \"arch\": \"x64\",\n        \"family\": \"centos\",\n        \"windows\": false\n    },\n    \"148\": {\n        \"OSID\": \"148\",\n        \"name\": \"Ubuntu 12.04 i386\",\n        \"arch\": \"i386\",\n        \"family\": \"ubuntu\",\n        \"windows\": false\n    }\n}\n```\n\nExample Parameter\n\n```\n--data \"OSID=270\" = \"OSID\":270,\"name\":\"Ubuntu 18.04 x64\" (Operating System)\n```\n\n#### List of All Operating Systems\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/bd1d2d1a-1014-41c6-902a-e1ac6b8c6572.png\" class=\"img-fluid\" alt=\"List of all Operating Systems\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List of all Operating Systems.</figcaption>\n</figure>\n\n\n### Application\n\n#### /v1/app/list\n\nRetrieve a list of available applications. These refer to applications that can be launched when creating a Vultr VPS.\n\nThe \"surcharge\" field is deprecated and will always be set to zero.\n\n```\nAPI Key Required: No\nRequest Type: GET\n```\n\nExample Request:\n\n```\ncurl https://api.vultr.com/v1/app/list\n```\n\nExample Response:\n\n```\n{\n    \"1\": {\n        \"APPID\": \"1\",\n        \"name\": \"LEMP\",\n        \"short_name\": \"lemp\",\n        \"deploy_name\": \"LEMP on CentOS 6 x64\",\n        \"surcharge\": 0\n    },\n    \"2\": {\n        \"APPID\": \"2\",\n        \"name\": \"WordPress\",\n        \"short_name\": \"wordpress\",\n        \"deploy_name\": \"WordPress on CentOS 6 x64\",\n        \"surcharge\": 0\n    }\n}\n```\n\nExample Parameter\n\n```\n--data \"APPID=17\" = \"APPID\":\"17\", \"name\":\"Docker\" (application)\n```\n\n#### Full List of Apps\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/b08d3fce-7228-40af-9a4c-3dbdbeeb9003.png\" class=\"img-fluid\" alt=\"Full List Of Apps\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Full List Of Apps.</figcaption>\n</figure>\n\n\n### The process in creating the docker container, finding the app id, the dc number, and creating it\n\nExample Command\n```\ncurl -H \"API-Key: YOURKEY\" https://api.vultr.com/v1/server/create --data \"DCID=8\" --data \"VPSPLANID=201\" --data \"OSID=270\" --data \"APPID=17\" --data \"label=Docker-Server\"\n```\n\n```\n--data \"DCID=8\" = \"DCID\":\"8\",\"name\":\"London\" (server region)\n--data \"VPSPLANID=201\" = \"VPSPLANID\":\"201\",\"name\":\"1024 MB RAM,25 GB SSD,1.00 TB BW\" (plan)\n--data \"OSID=270\" = \"OSID\":270,\"name\":\"Ubuntu 18.04 x64\" (Operating System)\n--data \"APPID=17\" = \"APPID\":\"17\", \"name\":\"Docker\" (application)\n--data \"label=docker-test\" = \"label=Docker-Server\" (server label)\n```\n\n### Destroy (delete) a virtual machine. All data will be permanently lost, and the IP address will be released. There is no going back from this call.\n\nExample Request:\n\n```\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/server/destroy --data 'SUBID=576965'\n```\n\nUsed this command to find your SUBID inside your Vultr Account:\n\n```\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/server/list\n```\n\nExample Response:\n\n```\n{\n    \"576965\": {\n        \"SUBID\": \"576965\",\n        \"os\": \"CentOS 6 x64\",\n        \"ram\": \"4096 MB\",\n        \"disk\": \"Virtual 60 GB\",\n        \"main_ip\": \"123.123.123.123\",\n        \"vcpu_count\": \"2\",\n        \"location\": \"New Jersey\",\n        \"DCID\": \"1\",\n        \"default_password\": \"nreqnusibni\",\n        \"date_created\": \"2013-12-19 14:45:41\",\n        \"pending_charges\": \"46.67\",\n        \"status\": \"active\",\n        \"cost_per_month\": \"10.05\",\n        \"current_bandwidth_gb\": 131.512,\n        \"allowed_bandwidth_gb\": \"1000\",\n        \"netmask_v4\": \"255.255.255.248\",\n        \"gateway_v4\": \"123.123.123.1\",\n        \"power_status\": \"running\",\n        \"server_state\": \"ok\",\n        \"VPSPLANID\": \"28\",\n        \"v6_main_ip\": \"2001:0DB8:1000:0000:0000:000:0000:0101\",\n        \"v6_network_size\": \"64\",\n        \"v6_network\": \"2001:DB8:1000::\",\n        \"v6_networks\": [\n            {\n                \"v6_network\": \"2001:DB8:1000::\",\n                \"v6_main_ip\": \"2001:0DB8:1000:0000:0000:000:0000:0101\",\n                \"v6_network_size\": \"64\"\n            }\n        ],\n        \"label\": \"my new server\",\n        \"internal_ip\": \"10.99.0.10\",\n        \"kvm_url\": \"https://my.vultr.com/subs/novnc/api.php?data=eawxFVZw2mXnhGUV\",\n        \"auto_backups\": \"yes\",\n        \"tag\": \"mytag\",\n        \"OSID\": \"127\",\n        \"APPID\": \"0\",\n        \"FIREWALLGROUPID\": \"0\"\n    }\n}\n```\n\nServer List\n\nList all active or pending virtual machines on the current account.\n\nTo determine that a server is ready for use, you may poll <code>/v1/server/list?SUBID=SUBID</code> and check that the \"status\" field is set to \"active\", then test your OS login with SSH (Linux) or RDP (Windows).\n\nThe \"status\" field represents the status of the subscription and will be one of pending, active, suspended, or closed. If the status is \"active\", you can check \"power_status\" to determine if the VPS is powered on or not. When status is \"active\", you may also use \"server_state\" for a more detailed status of: none, locked, installingbooting, isomounting, or ok.\n\nThe \"v6_network\", \"v6_main_ip\", and \"v6_network_size\" fields are deprecated in favor of \"v6_networks\".\n\nThe \"kvm_url\" value will change periodically. It is not advised to cache this value.\n\nIf you need to filter the list, review the parameters for this function. Currently, only one filter at a time may be applied (SUBID, tag, label, main_ip).\n\n```\nAPI Key Required: Yes\nRequest Type: GET\nRequired Access: GET\n```\n\n```\n{% highlight PowerShell %}\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/server/list\n```\n\nExample Response:\n```\n{\n    \"576965\": {\n        \"SUBID\": \"576965\",\n        \"os\": \"CentOS 6 x64\",\n        \"ram\": \"4096 MB\",\n        \"disk\": \"Virtual 60 GB\",\n        \"main_ip\": \"123.123.123.123\",\n        \"vcpu_count\": \"2\",\n        \"location\": \"New Jersey\",\n        \"DCID\": \"1\",\n        \"default_password\": \"nreqnusibni\",\n        \"date_created\": \"2013-12-19 14:45:41\",\n        \"pending_charges\": \"46.67\",\n        \"status\": \"active\",\n        \"cost_per_month\": \"10.05\",\n        \"current_bandwidth_gb\": 131.512,\n        \"allowed_bandwidth_gb\": \"1000\",\n        \"netmask_v4\": \"255.255.255.248\",\n        \"gateway_v4\": \"123.123.123.1\",\n        \"power_status\": \"running\",\n        \"server_state\": \"ok\",\n        \"VPSPLANID\": \"28\",\n        \"v6_main_ip\": \"2001:0DB8:1000:0000:0000:000:0000:0101\",\n        \"v6_network_size\": \"64\",\n        \"v6_network\": \"2001:DB8:1000::\",\n        \"v6_networks\": [\n            {\n                \"v6_network\": \"2001:DB8:1000::\",\n                \"v6_main_ip\": \"2001:0DB8:1000:0000:0000:000:0000:0101\",\n                \"v6_network_size\": \"64\"\n            }\n        ],\n        \"label\": \"my new server\",\n        \"internal_ip\": \"10.99.0.10\",\n        \"kvm_url\": \"https://my.vultr.com/subs/novnc/api.php?data=eawxFVZw2mXnhGUV\",\n        \"auto_backups\": \"yes\",\n        \"tag\": \"mytag\",\n        \"OSID\": \"127\",\n        \"APPID\": \"0\",\n        \"FIREWALLGROUPID\": \"0\"\n    }\n}\n```\n\n### Changing the plan should you need more space\n\nUpgrade the plan of a virtual machine. The virtual machine will be rebooted upon a successful upgrade.\n\n```\nAPI Key Required: Yes\nRequest Type: POST\nRequired Access: POST\n```\n\nExample:\n\n```\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/server/upgrade_plan --data 'SUBID=39960375' --data 'VPSPLANID=29'\n```\n\n### Saving a snapshot of your machine.\n\nCreate a snapshot from an existing virtual machine. The virtual machine does not need to be stopped.\n\n```\nAPI Key Required: Yes\nRequest Type: POST\nRequired Access: POST\n```\n\nExample Request:\n\n```\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/snapshot/create --data 'SUBID=1312965'\n```\n\nExample Response:\n```\n{\n    \"SNAPSHOTID\": \"544e52f31c706\",\n    \"v2_id\": \"82f4a9f9-6d8b-44c8-ad59-6ade845bd2a6\"\n}\n```\n\n### How to Use Docker: Creating Your First Docker Container\n\nThis tutorial explains the basics of getting started with Docker. I assume that you already have Docker installed. Steps in this tutorial will work on any Linux distribution that is compatible with Docker (CentOS, Ubuntu, etc).\n\n#### Creating your first Docker container\n\nDocker creates virtual containers. Docker's container system is very efficient because it works with commits. This saves space, and allows you to see changes to the container. For example, if you install Apache in a container, you can create a commit with the name \"Installed Apache\" so you know exactly what happened.\n\nThe first thing we'll do is pull from a repository. Say that you want to install Ubuntu in a container, you can pull Ubuntu from the repository:\n\n\n```\ndocker pull ubuntu\n```\n\nBe patient, as this can take a while. After everything has been downloaded, you can create a container with this OS:\n\n```\ndocker run -i -t ubuntu /bin/bash\n```\n\nOr with Debian, for example:\n\n```\ndocker run -i -t debian /bin/bash\n```\n\nIf it can't find the OS (not pulled yet) it will automatically pull it from Docker Hub.\n\nEffectively, you now have a container! You are running bash in the slimmed down container that is managed by Docker. Try running some common Linux commands to get a feel for the environment.\n\nWhen you type exit to <code>exit</code> the container and return to your main OS, all of your changes will be gone. To save changes to a container, we use commits.\n\n#### Commits\n\nWhen you create a Docker container, its hostname is automatically generated. For example, when I create a new Ubuntu container, I might get the hostname f7943e42aff0. This is the name that Docker has given to your container.\n\nInstall what you want on it, and make sure everything works. Then exit your Docker container:\n\n```\nexit\n```\n\nWe now need to commit; otherwise, all of your changes will be lost.\n\n```\ndocker commit -a \"William E.\" -m \"Installed Apache\" f7943e42aff0 apachesnapshot\n```\n\nThe -a switch can be used to properly determine who authored that commit (who made the changes in the container). -m is the commit message. The f7943e42aff0 is the hostname of my container. In your case it will differ, as Docker generates them randomly. apachesnapshot is the name of your image.\n\nYou can view a list with all of the images on your local machine. The newest ones are at the top.\n\n```\ndocker images\n```\n\nIn order to start your Docker container with the changes, run:\n\n```\ndocker run -t -i apachesnapshot /bin/bash\n```\n\n#### Using Dockerfiles\n\nDockerfiles can be used to make images with applications already installed. This makes it convenient to start a container without having to run a specific command. For example, if we want to create an image with the file ~/file.txt already created, we would use the following Dockerfile:\n\n```\nFROM ubuntu:14.04\nMAINTAINER William E. <william@localhost>\nRUN touch ~/file.txt\n```\n\nIn order to create a Docker container with this Dockerfile, make a folder for your Dockerfile on your local machine (I used ~/files). Put the contents of your Dockerfile in a file called Dockerfile. You can now create an image with it by running:\n\n```\ndocker build -t=\"test\" .\n```\n\nThis creates a Docker image from your Dockerfile script. You can now run your container. test is the same value as test in the docker build command.\n\n```\ndocker run -t -i test /bin/bash\n```\n\nWhen the bash shell opens, you'll see that the ~/file.txt has already been created.\n\nThis is just a taste of the powerful environments that you can create using Docker. The Docker official manual goes into much further depth on these topics. At this point, you should be able to experiment running existing containers and begin to start imaging your own.\n\nYou can learn more docker commands and functions <a class=\"hover-link\" target=\"_blank\" href=\"https://docker-curriculum.com/\">here</a>."}}},"staticQueryHashes":["310218920"],"slicesMap":{}}