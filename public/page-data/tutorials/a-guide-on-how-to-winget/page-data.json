{"componentChunkName":"component---src-templates-blog-post-js","path":"/tutorials/a-guide-on-how-to-winget/","result":{"pageContext":{"post":{"fields":{"slug":"/a-guide-on-how-to-winget"},"excerpt":"Winget is the name of Microsofts new package manager. A package manager is a tool designed to help you quickly search for and install other…","frontmatter":{"date":"9th February 2022 ","title":"A Guide On How To Winget","description":"In this tutorial, we will take a look at Microsofts new package manager. A package manager is a tool designed to help you quickly search for and install other tools that your operating system supports. Microsoft's offering is called Winget.","tags":"winget","posttype":"tutorial"},"body":"Winget is the name of Microsofts new package manager.  A package manager is a tool designed to help you quickly search for and install other tools that your operating system supports.  Windows users have waited a long time for a native package manager offering from Microsoft. Until now the best offering has been chocolatey; however, after exploring some of the features I will show you in this tutorial I have made the switch.\n\n* Winget does not come installed by default. \n* There are several ways to install it\n  - Microsoft Store\n  - Release On Github\n  - Being a Member of the Windows Insiders Program (Free but may take time to appear as an install option.)\n\n![Winget Not Installed By Default](/static/3473ff07-a0b0-4652-8acd-58a5e0c2028c.png)\t\n\nWinget only supported on certain OS Versions.\n@todo: Enter OS that Winget Supports\n\n![CMD Version](/static/1423747c-29b1-4338-b389-f34eab49ddfb.png)\n\n* Because you will be using Winget to install the software you typically need to open up the console as an Administrator. \n\nIn this tutorial, we will be installing from Github however you can just as easily install this from the Windows Store if you have it enabled. \n* It can take a few days for the option to install Winget to appear \n\nI will be installing this release\n* https://github.com/microsoft/winget-cli/releases/tag/v1.2.10271\n\n\n![Installing Winget From Github](/static/3028d678-c368-4761-944a-2a448d8de2c4.png)\n\nAfter you click to download you can install by selecting open. This saves you having to save to disk, find the file and then having to click again to install. \n\n![Click on Open To Install](/static/6e4154f2-466b-4bf6-bf0b-44841fdb29e3.png)\n\nWindows will now install winget. We can verify this by seeing the version \n```\nwinget --version\n```\n\n![Winget Version](/static/499a492e-fdda-43de-a35a-9ca967dc4452.png)\n\nThe first time you actually use Winget for anything other than verifying its version you will see an agreement acceptance response like that below. \n\n![Accepting The Agreement](/static/00a6de3e-dac2-4ae2-955d-d38f2bd3eef5.png)\n\n\nWe can list packages currently installed on our machine. \n```\nwinget list\n```\n\n![Listing Packages Installed On The Machine](/static/538a8041-358f-4155-be0c-d9cbc2670bed.png)\n\nWe can query these packages \n```\nwinget list -q <term>\n```\n\n![Querying The List](/static/b7543e67-b171-47dc-b1ee-330d3d953be7.png)\n\nWe can show only the first `n` number of results\n```\nwinget list -n 10\n```\n\nSearching for new packages\n```\nwinget search <term>\n```\n\n![Searching Winget For The Term Git](/static/34d462bf-5a6f-4b4b-9ac0-58c3d38cddb6.png)\n\nIf you look at the last example you can see Winget searching for packages from two sources. We can list the sources that Winget knows about. \n\n```\nwinget source list\n```\n\n> Note you can install additional sources but that is out of scope for this tutorial. This is just a crash course to get you started. \n\n\nWe can also inspect a source. \n\n![Inspecint A Source](/static/ce39df38-f611-405a-aced-f0badd8b2b47.png)\n\nOkay, let us go back to searching.  This time we will limit our search to a source. \n\n![Searching By Source](/static/28a09c06-002d-4162-9b83-823e44c94bcb.png)\n\nWe can also search by Tag\n```\nwinget search --tag github\n```\n\n![Searching By Tag](/static/513804fc-8bce-499e-a753-e8e1fd76a32c.png)\n\nWe will now look at installing packages. We will look at a worked example using Microsoft Visual Studio Code. \n\nFirst, we will search. \n\n![Searching For Microsoft Visual Studio Code](/static/576dd63e-cb51-44c0-bbf0-1e45dca2d7de.png)\n\nThe top result looks like what we want. We can use the `show` subcommand to find more information. \n\n![Using The Show Command](/static/937e36c4-3bd2-4a63-bccc-efc82e4860c1.png)\n\n\nIf you look at the arrow we can see the package has a moniker. Typing `Microsoft.VisualStudioCode` with the install command would work but it is a lot to type. Instead, we can reference the package using the moniker. \n\n\n![Referencing By Moniker](/static/965b468d-94aa-485c-99dd-9f8412668318.png)\n\nWe can now install the package\n```\nwinget install vsscode\n```\n\n![Installing Visual Studio Code](/static/3a9134d0-16b8-4b59-aaa6-b4ad84f84d1e.png)\n\nGreat so our package is now installed. \n\nWhen installing you may see UI windows open like in the screenshot below. \n\n![Installing the Github CLI](/static/f43a3347-59c3-4dd0-8893-e0f64d56b23f.png)\n\nWe can prevent that happening, however. \n\nFirst I will show you how to uninstall a package and then we will install it a second time without the UI prompts. \n\nUninstalling \n```\nwinget uninstall Github.cli\n```\n![Uninstall Github CLI](/static/e8b7f955-ffc7-43ce-803f-e925dc5a336d.png)\n\nInstalling with the `--silent` flag. \n\n![Installing Silentlly](/static/7ce4226c-49e4-4a9a-9127-6c2a655d1baf.png)\n\nI have gone ahead and installed a few other programs and I like the collection of packages I have installed. What if I wanted to save this combination of packages for installation on another machine. \n\n```\nwinget export -o <file path>\n```\n![Exporting List Of Packages](/static/ed2c9105-f0ab-417a-8de1-a64c7ecbead3.png)\n\nWe can see that some Windows Packages do not have packages available in the Microsoft Store or in the Winget repository. \n\nLet us check the file we saved. Here it is where we specified on the desktop.\n\n![Winget Output](/static/ad40e2ad-b3ef-4bd4-b269-87fb324455c7.png)\n\nIf we look inside we can see the file is in JSON and we can see a collection of packages I have installed. \n\n![Winget Packages Output Contents](/static/1b919405-011b-490a-9273-469437feab00.png)\n\nI have removed some of the packages I installed but not all. Now I want to get the system up to sync. \n\n![Checking Packages](/static/0f1eeceb-4f94-4989-8d4d-d089b8bc577f.png)\n\nAs Winget gets to packages that are either not installed or have upgrades it gets to work. \n\n![Installing and updating missing packages](/static/dc2c1021-aaac-42b8-8776-53f1e06e45be.png)"},"prev":{"fields":{"slug":"/using-steampipe-on-aws"},"excerpt":"Installing steam pipe sudo /bin/sh -c \"$(curl -fsSL https://raw.githubusercontent.com/turbot/steampipe/main/install.sh)\"\n\n\nChecking the steam…","frontmatter":{"date":"15th February 2022 ","title":"Using Steampipe on AWS","description":"Steampipe is a tool that lets us gather information from AWS (or other sources) and lets us interact with that data the same way we would a relational database via SQL style queries.","tags":"steampipe, aws","posttype":"tutorial"},"body":"Installing steam pipe \n```\nsudo /bin/sh -c \"$(curl -fsSL https://raw.githubusercontent.com/turbot/steampipe/main/install.sh)\"\n```\n\nChecking the steam pipe version\n```\nsteampipe -v\n```\n\nInstalling steampipe plugin\n```\nsteampipe plugin install steampipe\n```\n\n\nMaking queries with steampipe\n```\nsteampipe query \"select name from steampipe_registry_plugin;\"\n```\n\nInstalling the AWS plugin\n```\nsteampipe plugin install aws\n```\n\nSetting up AWS access keys and secrets for Single Sign On environments\n```\naws configure sso\n```\n\n\nConfiguring AWS access keys and secrets for standard environments\n```\naws configure\n```\n\nConfiguring the AWS configuration file for steampipe. \n```\nnano ~/.steampipe/config/aws.spc\n```\n\nDropping down into an interactive query session. \n```\nsteampipe query\n```\n\nListing tables that are available\n```\n.tables\n```\n\nInspecting a table to see what columns it has\n```\n.inspect aws_iam_role\n```\n\n\nExample query \n```\nselect \n  group_name,\n  group_id\nfrom\n  aws_vpc_security_group_rule\nwhere \n  type = 'ingress'\n  and cidr_ip = '0.0.0.0/0';\n.quit\n```\n\nRunning compliance checks involves an additional module\n```\ngit clone https://github.com/turbot/steampipe-mod-aws-compliance.git\n```\n\nTo run the following commands we need to enter the newly created directory\n```\ncd steampipe-mod-aws-compliance\n```\n\nWe can either run all of the checks\n```\nsteampipe check all\n```\n\nOr specfic versions. \n```\nsteampipe check benchmark.cis_v140\n```\n\nIf needed we can even export a report in html and csv format\n```\nsteampipe check benchmark.cis_v140 --export=report.html --export=report.csv\n```"},"next":{"fields":{"slug":"/learn-mssql-and-postgre-sql-with-docker"},"excerpt":"In this tutorial, we will be using Docker to spin up database containers for us to enumerate. There are many articles on setting up and…","frontmatter":{"date":"1st February 2022 ","title":"Learn MSSQL and PostgreSQL with Docker","description":"In this tutorial, we use Docker to spin up database containers for us to practice our enumeration skills. At the end of this tutorial you will have run MSSQL Server 2019 from Microsoft and PostgreSQL inside docker container and enumerated them with `sqlcmd` and `psql` commands.","tags":"database, docker, mssql, postgresql, psql, sqlcmd","posttype":"tutorial"},"body":"\nIn this tutorial, we will be using Docker to spin up database containers for us to enumerate. There are many articles on setting up and installing docker on your favourite platform so this tutorial will start from the point where docker is already installed. \n\n## Installing Databases\n\nFor this tutorial, we will be using Docker containers for MSSQL Server 2019 and PostgreSQL 14.\n\nThe official docker hub page for Microsoft MSSQL Server 2019 and PostgreSQL are located at the following URL. \n\n* https://hub.docker.com/_/microsoft-mssql-server\n* https://hub.docker.com/_/postgres/\n\nBefore we start configuring our containers we should touch on some basics.  If we use the `docker pull` command we can pull a Docker image from the Docker hub to our machine. Pulling an image just gives us access to that image for when we need it. If however, we use the command `docker run` it will check if the image has already been pulled and if it hasn't been pulled previously this will pull the image and then run it\n\nMost docker installation guides take the user through the process of installing Docker and then running a \"Hello World\" example. The following example is the Docker equivalent of a programmers \"Hello World\" script\n\n```\n$ docker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete \nDigest: sha256:6f744a2005b12a704d2608d8070a494ad1145636eeb74a570c56b94d94ccdbfc\nStatus: Downloaded newer image for hello-world:latest\n```\n\nWe can see that when we used the `docker run` command that Docker was \"Unable to find 'hello-world:latest' locally\" so it made a pull. \n\n## Microsoft SQL Server\n\nRunning MSSQL Server 2019\n```\ndocker run --name sqlserver2019 -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password123' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest\n```\n\nCompared to the simple \"Hello World\" example we just looked at we can see the MSSQL Database requires a few more command-line arguments. \n\n\ndocker run --name sqlserver2019-2 -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password123' -p 2433:1433 -d mcr.microsoft.com/mssql/server:2019-latest\n\n## PostgreSQL\n\n\ndocker run --name postgresql -p 5432:5432 -e POSTGRES_PASSWORD=Password123 -d postgres:latest\ndocker run --name postgresql -p 6432:5432 -e POSTGRES_PASSWORD=Password123 -d postgres:latest\n\n\n## Interacting with Microsoft SQL Server\n\nLog into sqlserver2019 docker container\n```\ndocker exec -it sqlserver2019 bash\n```\n\nView OS information\n```\ncat /etc/os-release\n```\n\nLog into SQL Server using SQLCMD command line tool\n```\n/opt/mssql-tools/bin/sqlcmd -U sa -P Password123\n```\n\nView version information\n```\nSELECT @@Version;\nGO\n```\n\nList databases currently on the server\n```\nSELECT name FROM sys.databases;\nGO\n```\n\nCreate a new database\n```\nCREATE DATABASE evilsaint;\nGO\n```\n\nQuit SQLCMD CLI tool\n```\nexit\n```\n\nExit out of the docker container\n```\nexit\n```\n\n## PostgreSQL\n\nLog into postgresql docker container\n```\ndocker exec -it postgresql bash\n```\n\nView OS information\n```\ncat /etc/os-release\n```\n\nLog into PosgreSQL server using PSQL command line tool\n```\npsql -U postgres\n```\n\nView help documentation\n```\nhelp\n```\n\nList databases currently on the server\n```\n\\l\n```\n\nCreate a new database\n```\nCREATE DATABASE evilsaint;\n```\n\nQuit PSQL CLI tool\n```\n\\q\n```\n\nExit out of the docker container\n```\nexit\n```\n\nRun postgresql database 2 for bruteforce\n```\ndocker exec postgresql-2 bash\n```\n\n\n\n## Docker Commands\n\nview all running containers\n```\ndocker ps\n```\n\nview all containers regardless of status\n```\ndocker ps -a\n```\n\nstop a container\n```\ndocker stop sqlserver2019\n```\n\nstart a container\n```\ndocker start sqlserver2019\n```\n\nremove a container\n```\ndocker rm sqlserver2019\n```"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}